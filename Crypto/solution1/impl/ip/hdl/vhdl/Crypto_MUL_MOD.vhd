-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto_MUL_MOD is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input1_val : IN STD_LOGIC_VECTOR (31 downto 0);
    input2_val : IN STD_LOGIC_VECTOR (18 downto 0);
    MOD_INDEX : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of Crypto_MUL_MOD is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv20_F7FFC : STD_LOGIC_VECTOR (19 downto 0) := "11110111111111111100";
    constant ap_const_lv20_B8010 : STD_LOGIC_VECTOR (19 downto 0) := "10111000000000010000";
    constant ap_const_lv20_8003B : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000111011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv31_40002001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000010000000000001";
    constant ap_const_lv31_40012001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000010010000000000001";
    constant ap_const_lv31_40020001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000100000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal MOD_INDEX_read_reg_569 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal MOD_INDEX_read_reg_569_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_569_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_569_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_569_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_569_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_569_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_569_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_569_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln19_fu_146_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_fu_164_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_reg_607_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_reg_607_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal temp4_reg_617 : STD_LOGIC_VECTOR (29 downto 0);
    signal temp4_reg_617_pp0_iter2_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal temp4_reg_617_pp0_iter3_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_553_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln30_reg_627 : STD_LOGIC_VECTOR (32 downto 0);
    signal res_mult_fu_210_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal res_mult_reg_632 : STD_LOGIC_VECTOR (62 downto 0);
    signal res_mult_reg_632_pp0_iter5_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal res_mult_reg_632_pp0_iter6_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal res_mult_reg_632_pp0_iter7_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal res_mult_reg_632_pp0_iter8_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal res_mult_reg_632_pp0_iter9_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal res_mult_reg_632_pp0_iter10_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal input1_low_5_reg_637 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_3_reg_642 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln17_8_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln18_4_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_5_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_5_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_5_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_5_reg_671_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_5_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_5_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_5_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_5_reg_689_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln29_fu_303_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln29_reg_694 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln29_reg_694_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln30_7_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_7_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_5_fu_317_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln30_5_reg_704 : STD_LOGIC_VECTOR (32 downto 0);
    signal res_mult_shift_part_reg_709 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_715 : STD_LOGIC_VECTOR (15 downto 0);
    signal mod_fu_385_p5 : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_721 : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_721_pp0_iter10_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_721_pp0_iter11_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_721_pp0_iter12_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_721_pp0_iter13_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln19_6_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_6_fu_420_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_6_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_6_reg_764 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_442_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal temp4_6_reg_769 : STD_LOGIC_VECTOR (30 downto 0);
    signal res_shift_fu_464_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_shift_reg_779 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_shift_reg_779_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_561_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln30_6_reg_784 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln85_fu_481_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln85_reg_789 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal input1_low_fu_116_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_fu_128_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_fu_112_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_fu_150_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln20_fu_160_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_168_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_168_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_174_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_174_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_180_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_180_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum1_fu_189_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal sum2_fu_199_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln28_fu_195_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln28_7_fu_206_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal m_fu_236_p5 : STD_LOGIC_VECTOR (19 downto 0);
    signal input2_low_5_fu_247_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_5_fu_261_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln20_1_fu_271_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_279_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_279_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_285_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_285_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_291_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_291_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_297_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln30_12_fu_307_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln30_13_fu_310_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum2_5_fu_329_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln28_8_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_5_fu_323_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln9_fu_346_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_fu_340_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln74_fu_359_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal res_mult_shift_fu_353_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal input2_low_6_fu_396_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_6_fu_410_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_424_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_424_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_436_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_436_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_442_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_442_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum1_6_fu_451_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln68_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_9_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_6_fu_470_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln28_10_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln89_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_cast_fu_494_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln90_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln89_fu_489_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln90_fu_505_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_518_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln92_5_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln92_6_fu_533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln92_fu_526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln92_fu_537_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_553_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_553_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_553_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_561_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_561_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_561_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_ce : STD_LOGIC;
    signal grp_fu_174_ce : STD_LOGIC;
    signal grp_fu_180_ce : STD_LOGIC;
    signal grp_fu_279_ce : STD_LOGIC;
    signal grp_fu_285_ce : STD_LOGIC;
    signal grp_fu_291_ce : STD_LOGIC;
    signal grp_fu_297_ce : STD_LOGIC;
    signal grp_fu_424_ce : STD_LOGIC;
    signal grp_fu_436_ce : STD_LOGIC;
    signal grp_fu_442_ce : STD_LOGIC;
    signal select_ln92_3_fu_545_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_553_ce : STD_LOGIC;
    signal grp_fu_561_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal input1_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_int_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal MOD_INDEX_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_174_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_424_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_436_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_442_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_553_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_553_p20 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_561_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_561_p20 : STD_LOGIC_VECTOR (32 downto 0);

    component Crypto_mul_16ns_16ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Crypto_mul_14ns_16ns_30_2_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component Crypto_mux_3_2_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component Crypto_mux_3_2_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Crypto_mul_15ns_16ns_31_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Crypto_mac_muladd_14ns_16ns_32ns_33_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Crypto_mac_muladd_16ns_15ns_32ns_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;



begin
    mul_16ns_16ns_32_2_1_U192 : component Crypto_mul_16ns_16ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_168_p0,
        din1 => grp_fu_168_p1,
        ce => grp_fu_168_ce,
        dout => grp_fu_168_p2);

    mul_16ns_16ns_32_2_1_U193 : component Crypto_mul_16ns_16ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_174_p0,
        din1 => grp_fu_174_p1,
        ce => grp_fu_174_ce,
        dout => grp_fu_174_p2);

    mul_14ns_16ns_30_2_0_U194 : component Crypto_mul_14ns_16ns_30_2_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_180_p0,
        din1 => grp_fu_180_p1,
        ce => grp_fu_180_ce,
        dout => grp_fu_180_p2);

    mux_3_2_20_1_1_U195 : component Crypto_mux_3_2_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => ap_const_lv20_F7FFC,
        din1 => ap_const_lv20_B8010,
        din2 => ap_const_lv20_8003B,
        din3 => MOD_INDEX_read_reg_569_pp0_iter4_reg,
        dout => m_fu_236_p5);

    mul_16ns_16ns_32_2_1_U196 : component Crypto_mul_16ns_16ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_279_p0,
        din1 => grp_fu_279_p1,
        ce => grp_fu_279_ce,
        dout => grp_fu_279_p2);

    mul_16ns_16ns_32_2_1_U197 : component Crypto_mul_16ns_16ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_285_p0,
        din1 => grp_fu_285_p1,
        ce => grp_fu_285_ce,
        dout => grp_fu_285_p2);

    mul_16ns_16ns_32_2_1_U198 : component Crypto_mul_16ns_16ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_291_p0,
        din1 => grp_fu_291_p1,
        ce => grp_fu_291_ce,
        dout => grp_fu_291_p2);

    mul_16ns_16ns_32_2_1_U199 : component Crypto_mul_16ns_16ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_297_p0,
        din1 => grp_fu_297_p1,
        ce => grp_fu_297_ce,
        dout => grp_fu_297_p2);

    mux_3_2_31_1_1_U200 : component Crypto_mux_3_2_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 2,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_40002001,
        din1 => ap_const_lv31_40012001,
        din2 => ap_const_lv31_40020001,
        din3 => MOD_INDEX_read_reg_569_pp0_iter8_reg,
        dout => mod_fu_385_p5);

    mul_16ns_16ns_32_2_1_U201 : component Crypto_mul_16ns_16ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_424_p0,
        din1 => grp_fu_424_p1,
        ce => grp_fu_424_ce,
        dout => grp_fu_424_p2);

    mul_16ns_16ns_32_2_1_U202 : component Crypto_mul_16ns_16ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_436_p0,
        din1 => grp_fu_436_p1,
        ce => grp_fu_436_ce,
        dout => grp_fu_436_p2);

    mul_15ns_16ns_31_2_1_U203 : component Crypto_mul_15ns_16ns_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_442_p0,
        din1 => grp_fu_442_p1,
        ce => grp_fu_442_ce,
        dout => grp_fu_442_p2);

    mac_muladd_14ns_16ns_32ns_33_4_0_U204 : component Crypto_mac_muladd_14ns_16ns_32ns_33_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_553_p0,
        din1 => grp_fu_553_p1,
        din2 => grp_fu_553_p2,
        ce => grp_fu_553_ce,
        dout => grp_fu_553_p3);

    mac_muladd_16ns_15ns_32ns_33_4_1_U205 : component Crypto_mac_muladd_16ns_15ns_32ns_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_561_p0,
        din1 => grp_fu_561_p1,
        din2 => grp_fu_561_p2,
        ce => grp_fu_561_ce,
        dout => grp_fu_561_p3);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                MOD_INDEX_int_reg <= MOD_INDEX;
                input1_val_int_reg <= input1_val;
                input2_val_int_reg <= input2_val;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                MOD_INDEX_read_reg_569 <= MOD_INDEX_int_reg;
                MOD_INDEX_read_reg_569_pp0_iter1_reg <= MOD_INDEX_read_reg_569;
                MOD_INDEX_read_reg_569_pp0_iter2_reg <= MOD_INDEX_read_reg_569_pp0_iter1_reg;
                MOD_INDEX_read_reg_569_pp0_iter3_reg <= MOD_INDEX_read_reg_569_pp0_iter2_reg;
                MOD_INDEX_read_reg_569_pp0_iter4_reg <= MOD_INDEX_read_reg_569_pp0_iter3_reg;
                MOD_INDEX_read_reg_569_pp0_iter5_reg <= MOD_INDEX_read_reg_569_pp0_iter4_reg;
                MOD_INDEX_read_reg_569_pp0_iter6_reg <= MOD_INDEX_read_reg_569_pp0_iter5_reg;
                MOD_INDEX_read_reg_569_pp0_iter7_reg <= MOD_INDEX_read_reg_569_pp0_iter6_reg;
                MOD_INDEX_read_reg_569_pp0_iter8_reg <= MOD_INDEX_read_reg_569_pp0_iter7_reg;
                add_ln30_5_reg_704 <= add_ln30_5_fu_317_p2;
                add_ln30_6_reg_784 <= grp_fu_561_p3;
                add_ln30_7_reg_699 <= add_ln30_7_fu_313_p2;
                add_ln30_reg_627 <= grp_fu_553_p3;
                input1_high_3_reg_642 <= res_mult_fu_210_p2(61 downto 46);
                input1_low_5_reg_637 <= res_mult_fu_210_p2(45 downto 30);
                mod_reg_721 <= mod_fu_385_p5;
                mod_reg_721_pp0_iter10_reg <= mod_reg_721;
                mod_reg_721_pp0_iter11_reg <= mod_reg_721_pp0_iter10_reg;
                mod_reg_721_pp0_iter12_reg <= mod_reg_721_pp0_iter11_reg;
                mod_reg_721_pp0_iter13_reg <= mod_reg_721_pp0_iter12_reg;
                res_mult_reg_632 <= res_mult_fu_210_p2;
                res_mult_reg_632_pp0_iter10_reg <= res_mult_reg_632_pp0_iter9_reg;
                res_mult_reg_632_pp0_iter5_reg <= res_mult_reg_632;
                res_mult_reg_632_pp0_iter6_reg <= res_mult_reg_632_pp0_iter5_reg;
                res_mult_reg_632_pp0_iter7_reg <= res_mult_reg_632_pp0_iter6_reg;
                res_mult_reg_632_pp0_iter8_reg <= res_mult_reg_632_pp0_iter7_reg;
                res_mult_reg_632_pp0_iter9_reg <= res_mult_reg_632_pp0_iter8_reg;
                res_mult_shift_part_reg_709 <= add_ln74_fu_359_p2(47 downto 32);
                res_shift_reg_779 <= res_shift_fu_464_p2;
                res_shift_reg_779_pp0_iter12_reg <= res_shift_reg_779;
                sub_ln85_reg_789 <= sub_ln85_fu_481_p2;
                temp1_5_reg_671 <= grp_fu_279_p2;
                temp1_5_reg_671_pp0_iter7_reg <= temp1_5_reg_671;
                temp1_6_reg_759 <= grp_fu_424_p2;
                temp1_reg_607 <= grp_fu_168_p2;
                temp1_reg_607_pp0_iter2_reg <= temp1_reg_607;
                temp1_reg_607_pp0_iter3_reg <= temp1_reg_607_pp0_iter2_reg;
                temp2_5_reg_677 <= grp_fu_285_p2;
                temp3_5_reg_683 <= grp_fu_291_p2;
                temp3_6_reg_764 <= grp_fu_436_p2;
                temp3_reg_612 <= grp_fu_174_p2;
                temp4_5_reg_689 <= grp_fu_297_p2;
                temp4_5_reg_689_pp0_iter7_reg <= temp4_5_reg_689;
                temp4_6_reg_769 <= grp_fu_442_p2;
                temp4_reg_617 <= grp_fu_180_p2;
                temp4_reg_617_pp0_iter2_reg <= temp4_reg_617;
                temp4_reg_617_pp0_iter3_reg <= temp4_reg_617_pp0_iter2_reg;
                trunc_ln29_reg_694 <= trunc_ln29_fu_303_p1;
                trunc_ln29_reg_694_pp0_iter7_reg <= trunc_ln29_reg_694;
                trunc_ln_reg_715 <= res_mult_shift_fu_353_p2(63 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln92_3_fu_545_p3;
            end if;
        end if;
    end process;
    add_ln30_5_fu_317_p2 <= std_logic_vector(unsigned(zext_ln30_12_fu_307_p1) + unsigned(zext_ln30_13_fu_310_p1));
    add_ln30_7_fu_313_p2 <= std_logic_vector(unsigned(temp2_5_reg_677) + unsigned(temp3_5_reg_683));
    add_ln74_fu_359_p2 <= std_logic_vector(unsigned(trunc_ln9_fu_346_p3) + unsigned(tmp_fu_340_p3));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln92_3_fu_545_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln92_3_fu_545_p3;
        else 
            ap_return <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_168_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_168_ce <= ap_const_logic_1;
        else 
            grp_fu_168_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_168_p0 <= zext_ln19_fu_146_p1(16 - 1 downto 0);
    grp_fu_168_p1 <= grp_fu_168_p10(16 - 1 downto 0);
    grp_fu_168_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_fu_116_p1),32));

    grp_fu_174_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_174_ce <= ap_const_logic_1;
        else 
            grp_fu_174_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_174_p0 <= zext_ln19_fu_146_p1(16 - 1 downto 0);
    grp_fu_174_p1 <= grp_fu_174_p10(16 - 1 downto 0);
    grp_fu_174_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_fu_128_p4),32));

    grp_fu_180_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_180_ce <= ap_const_logic_1;
        else 
            grp_fu_180_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_180_p0 <= zext_ln20_fu_164_p1(14 - 1 downto 0);
    grp_fu_180_p1 <= grp_fu_180_p10(16 - 1 downto 0);
    grp_fu_180_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_fu_128_p4),30));

    grp_fu_279_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_279_ce <= ap_const_logic_1;
        else 
            grp_fu_279_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_279_p0 <= zext_ln17_8_fu_251_p1(16 - 1 downto 0);
    grp_fu_279_p1 <= zext_ln19_5_fu_257_p1(16 - 1 downto 0);

    grp_fu_285_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_285_ce <= ap_const_logic_1;
        else 
            grp_fu_285_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_285_p0 <= zext_ln17_8_fu_251_p1(16 - 1 downto 0);
    grp_fu_285_p1 <= zext_ln20_5_fu_275_p1(16 - 1 downto 0);

    grp_fu_291_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_291_ce <= ap_const_logic_1;
        else 
            grp_fu_291_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_291_p0 <= zext_ln18_4_fu_254_p1(16 - 1 downto 0);
    grp_fu_291_p1 <= zext_ln19_5_fu_257_p1(16 - 1 downto 0);

    grp_fu_297_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_297_ce <= ap_const_logic_1;
        else 
            grp_fu_297_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_297_p0 <= zext_ln18_4_fu_254_p1(16 - 1 downto 0);
    grp_fu_297_p1 <= zext_ln20_5_fu_275_p1(16 - 1 downto 0);

    grp_fu_424_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_424_ce <= ap_const_logic_1;
        else 
            grp_fu_424_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_424_p0 <= grp_fu_424_p00(16 - 1 downto 0);
    grp_fu_424_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_shift_part_reg_709),32));
    grp_fu_424_p1 <= zext_ln19_6_fu_406_p1(16 - 1 downto 0);

    grp_fu_436_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_436_ce <= ap_const_logic_1;
        else 
            grp_fu_436_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_436_p0 <= zext_ln19_6_fu_406_p1(16 - 1 downto 0);
    grp_fu_436_p1 <= grp_fu_436_p10(16 - 1 downto 0);
    grp_fu_436_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_715),32));

    grp_fu_442_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_442_ce <= ap_const_logic_1;
        else 
            grp_fu_442_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_442_p0 <= zext_ln20_6_fu_420_p1(15 - 1 downto 0);
    grp_fu_442_p1 <= grp_fu_442_p10(16 - 1 downto 0);
    grp_fu_442_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_715),31));

    grp_fu_553_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_553_ce <= ap_const_logic_1;
        else 
            grp_fu_553_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_553_p0 <= zext_ln20_fu_164_p1(14 - 1 downto 0);
    grp_fu_553_p1 <= grp_fu_553_p10(16 - 1 downto 0);
    grp_fu_553_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_fu_116_p1),30));
    grp_fu_553_p2 <= grp_fu_553_p20(32 - 1 downto 0);
    grp_fu_553_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp3_reg_612),33));

    grp_fu_561_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_561_ce <= ap_const_logic_1;
        else 
            grp_fu_561_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_561_p0 <= grp_fu_561_p00(16 - 1 downto 0);
    grp_fu_561_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_shift_part_reg_709),31));
    grp_fu_561_p1 <= zext_ln20_6_fu_420_p1(15 - 1 downto 0);
    grp_fu_561_p2 <= grp_fu_561_p20(32 - 1 downto 0);
    grp_fu_561_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp3_6_reg_764),33));
    input1_high_fu_128_p4 <= input1_val_int_reg(31 downto 16);
    input1_low_fu_116_p1 <= input1_val_int_reg(16 - 1 downto 0);
    input2_high_5_fu_261_p4 <= m_fu_236_p5(19 downto 16);
    input2_high_6_fu_410_p4 <= mod_fu_385_p5(30 downto 16);
    input2_high_fu_150_p4 <= input2_val_int_reg(18 downto 16);
    input2_low_5_fu_247_p1 <= m_fu_236_p5(16 - 1 downto 0);
    input2_low_6_fu_396_p1 <= mod_fu_385_p5(16 - 1 downto 0);
    input2_low_fu_112_p1 <= input2_val_int_reg(16 - 1 downto 0);
    res_mult_fu_210_p2 <= std_logic_vector(unsigned(zext_ln28_fu_195_p1) + unsigned(zext_ln28_7_fu_206_p1));
    res_mult_shift_fu_353_p2 <= std_logic_vector(unsigned(zext_ln28_8_fu_336_p1) + unsigned(sum1_5_fu_323_p3));
    res_shift_fu_464_p2 <= std_logic_vector(unsigned(zext_ln68_fu_448_p1) - unsigned(zext_ln28_9_fu_457_p1));
    select_ln92_3_fu_545_p3 <= 
        trunc_ln92_fu_526_p1 when (tmp_5_fu_510_p3(0) = '1') else 
        select_ln92_fu_537_p3;
    select_ln92_fu_537_p3 <= 
        trunc_ln92_5_fu_529_p1 when (tmp_6_fu_518_p3(0) = '1') else 
        trunc_ln92_6_fu_533_p1;
        sext_ln20_1_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input2_high_5_fu_261_p4),16));

        sext_ln20_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input2_high_fu_150_p4),14));

    sub_ln85_fu_481_p2 <= std_logic_vector(unsigned(res_shift_reg_779_pp0_iter12_reg) - unsigned(zext_ln28_10_fu_477_p1));
    sub_ln89_fu_489_p2 <= std_logic_vector(unsigned(sub_ln85_reg_789) - unsigned(zext_ln89_fu_486_p1));
    sub_ln90_fu_505_p2 <= std_logic_vector(unsigned(sub_ln85_reg_789) - unsigned(zext_ln90_fu_501_p1));
    sum1_5_fu_323_p3 <= (temp4_5_reg_689_pp0_iter7_reg & temp1_5_reg_671_pp0_iter7_reg);
    sum1_6_fu_451_p3 <= (temp4_6_reg_769 & temp1_6_reg_759);
    sum1_fu_189_p3 <= (temp4_reg_617_pp0_iter3_reg & temp1_reg_607_pp0_iter3_reg);
    sum2_5_fu_329_p3 <= (add_ln30_5_reg_704 & ap_const_lv16_0);
    sum2_6_fu_470_p3 <= (add_ln30_6_reg_784 & ap_const_lv16_0);
    sum2_fu_199_p3 <= (add_ln30_reg_627 & ap_const_lv16_0);
    tmp_5_fu_510_p3 <= sub_ln89_fu_489_p2(63 downto 63);
    tmp_6_fu_518_p3 <= sub_ln90_fu_505_p2(63 downto 63);
    tmp_fu_340_p3 <= (trunc_ln29_reg_694_pp0_iter7_reg & temp1_5_reg_671_pp0_iter7_reg);
    trunc_ln29_fu_303_p1 <= grp_fu_297_p2(16 - 1 downto 0);
    trunc_ln92_5_fu_529_p1 <= sub_ln89_fu_489_p2(32 - 1 downto 0);
    trunc_ln92_6_fu_533_p1 <= sub_ln90_fu_505_p2(32 - 1 downto 0);
    trunc_ln92_fu_526_p1 <= sub_ln85_reg_789(32 - 1 downto 0);
    trunc_ln9_fu_346_p3 <= (add_ln30_7_reg_699 & ap_const_lv16_0);
    zext_ln17_8_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_5_reg_637),32));
    zext_ln18_4_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_3_reg_642),32));
    zext_ln19_5_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_5_fu_247_p1),32));
    zext_ln19_6_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_6_fu_396_p1),32));
    zext_ln19_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_fu_112_p1),32));
    zext_ln20_5_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln20_1_fu_271_p1),32));
    zext_ln20_6_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_6_fu_410_p4),31));
    zext_ln20_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln20_fu_160_p1),30));
    zext_ln28_10_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_6_fu_470_p3),64));
    zext_ln28_7_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_199_p3),63));
    zext_ln28_8_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_5_fu_329_p3),64));
    zext_ln28_9_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_6_fu_451_p3),64));
    zext_ln28_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_189_p3),63));
    zext_ln30_12_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp2_5_reg_677),33));
    zext_ln30_13_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp3_5_reg_683),33));
    zext_ln68_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_reg_632_pp0_iter10_reg),64));
    zext_ln89_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mod_reg_721_pp0_iter13_reg),64));
    zext_ln90_cast_fu_494_p3 <= (mod_reg_721_pp0_iter13_reg & ap_const_lv1_0);
    zext_ln90_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln90_cast_fu_494_p3),64));
end behav;
