-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto_Crypto_Pipeline_WRITE_TWIDDLE_LOOP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    NTTTWiddleRAM_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_1_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_1_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_2_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_2_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_3_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_3_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_4_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_4_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_5_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_5_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_6_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_6_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_7_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_7_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_8_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_8_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_9_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_9_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_10_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_10_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_11_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_11_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_12_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_12_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_12_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_13_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_13_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_13_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_14_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_14_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_14_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_15_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    NTTTWiddleRAM_15_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_15_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTwiddleIn_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    NTTTwiddleIn_ce0 : OUT STD_LOGIC;
    NTTTwiddleIn_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_1_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_1_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_2_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_2_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_3_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_3_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_4_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_4_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_5_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_5_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_6_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_6_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_7_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_7_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_8_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_8_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_9_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_9_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_10_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_10_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_11_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_11_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_12_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_12_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_12_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_13_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_13_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_13_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_14_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_14_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_14_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_15_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    INTTTWiddleRAM_15_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_15_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTwiddleIn_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    INTTTwiddleIn_ce0 : OUT STD_LOGIC;
    INTTTwiddleIn_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Crypto_Crypto_Pipeline_WRITE_TWIDDLE_LOOP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln68_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_fu_616_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_681 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_681_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln2_reg_685 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln2_reg_685_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal NTTTwiddleIn_load_reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal INTTTwiddleIn_load_reg_720 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_cast70_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln68_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_144 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln68_fu_604_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Crypto_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Crypto_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln68_fu_598_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_144 <= add_ln68_fu_604_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_144 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                INTTTwiddleIn_load_reg_720 <= INTTTwiddleIn_q0;
                NTTTwiddleIn_load_reg_700 <= NTTTwiddleIn_q0;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                empty_reg_681_pp0_iter1_reg <= empty_reg_681;
                lshr_ln2_reg_685_pp0_iter1_reg <= lshr_ln2_reg_685;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_598_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_reg_681 <= empty_fu_616_p1;
                lshr_ln2_reg_685 <= ap_sig_allocacmp_i_1(10 downto 4);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    INTTTWiddleRAM_10_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_10_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_10_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_10_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_A) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_10_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_11_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_11_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_11_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_11_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_B) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_11_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_12_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_12_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_12_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_12_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_C) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_12_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_13_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_13_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_13_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_13_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_D) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_13_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_14_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_14_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_14_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_14_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_E) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_14_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_15_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_15_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_15_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_15_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_F) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_15_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_1_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_1_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_1_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_1_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_2_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_2_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_2_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_2_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_3_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_3_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_3_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_3_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_4_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_4_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_4_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_4_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_5_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_5_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_5_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_5_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_5_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_6_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_6_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_6_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_6_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_7_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_7_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_7_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_7) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_7_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_8_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_8_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_8_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_8_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_8) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_8_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_9_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_9_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_9_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_9_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_9) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_9_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    INTTTWiddleRAM_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_d0 <= INTTTwiddleIn_load_reg_720;

    INTTTWiddleRAM_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTWiddleRAM_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTwiddleIn_address0 <= i_2_cast70_fu_610_p1(11 - 1 downto 0);

    INTTTwiddleIn_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            INTTTwiddleIn_ce0 <= ap_const_logic_1;
        else 
            INTTTwiddleIn_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_10_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_10_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_10_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_10_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_A) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_10_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_11_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_11_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_11_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_11_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_B) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_11_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_12_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_12_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_12_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_12_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_C) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_12_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_13_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_13_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_13_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_13_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_D) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_13_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_14_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_14_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_14_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_14_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_E) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_14_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_15_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_15_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_15_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_15_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_F) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_15_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_1_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_1_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_1_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_1_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_2_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_2_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_2_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_2_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_3_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_3_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_3_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_3_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_4_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_4_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_4_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_4_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_5_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_5_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_5_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_5_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_5_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_6_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_6_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_6_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_6_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_7_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_7_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_7_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_7) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_7_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_8_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_8_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_8_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_8_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_8) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_8_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_9_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_9_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_9_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_9_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_9) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_9_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_address0 <= zext_ln68_fu_635_p1(7 - 1 downto 0);

    NTTTWiddleRAM_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_d0 <= NTTTwiddleIn_load_reg_700;

    NTTTWiddleRAM_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_reg_681_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_reg_681_pp0_iter1_reg = ap_const_lv4_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTWiddleRAM_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTwiddleIn_address0 <= i_2_cast70_fu_610_p1(11 - 1 downto 0);

    NTTTwiddleIn_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            NTTTwiddleIn_ce0 <= ap_const_logic_1;
        else 
            NTTTwiddleIn_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln68_fu_604_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv12_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln68_fu_598_p2)
    begin
        if (((icmp_ln68_fu_598_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_144, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_144;
        end if; 
    end process;

    empty_fu_616_p1 <= ap_sig_allocacmp_i_1(4 - 1 downto 0);
    i_2_cast70_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
    icmp_ln68_fu_598_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv12_800) else "0";
    zext_ln68_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_reg_685_pp0_iter1_reg),64));
end behav;
