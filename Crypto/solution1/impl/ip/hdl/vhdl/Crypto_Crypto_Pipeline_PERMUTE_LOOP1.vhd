-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto_Crypto_Pipeline_PERMUTE_LOOP1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    DataRAM_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_ce0 : OUT STD_LOGIC;
    DataRAM_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_1_ce0 : OUT STD_LOGIC;
    DataRAM_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_2_ce0 : OUT STD_LOGIC;
    DataRAM_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_3_ce0 : OUT STD_LOGIC;
    DataRAM_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_4_ce0 : OUT STD_LOGIC;
    DataRAM_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_5_ce0 : OUT STD_LOGIC;
    DataRAM_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_6_ce0 : OUT STD_LOGIC;
    DataRAM_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_7_ce0 : OUT STD_LOGIC;
    DataRAM_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_8_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_8_ce0 : OUT STD_LOGIC;
    DataRAM_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_9_ce0 : OUT STD_LOGIC;
    DataRAM_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_10_ce0 : OUT STD_LOGIC;
    DataRAM_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_11_ce0 : OUT STD_LOGIC;
    DataRAM_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_12_ce0 : OUT STD_LOGIC;
    DataRAM_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_13_ce0 : OUT STD_LOGIC;
    DataRAM_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_14_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_14_ce0 : OUT STD_LOGIC;
    DataRAM_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_15_ce0 : OUT STD_LOGIC;
    DataRAM_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_16_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_16_ce0 : OUT STD_LOGIC;
    DataRAM_16_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_17_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_17_ce0 : OUT STD_LOGIC;
    DataRAM_17_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_18_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_18_ce0 : OUT STD_LOGIC;
    DataRAM_18_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_19_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_19_ce0 : OUT STD_LOGIC;
    DataRAM_19_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_20_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_20_ce0 : OUT STD_LOGIC;
    DataRAM_20_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_21_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_21_ce0 : OUT STD_LOGIC;
    DataRAM_21_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_22_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_22_ce0 : OUT STD_LOGIC;
    DataRAM_22_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_23_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_23_ce0 : OUT STD_LOGIC;
    DataRAM_23_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_24_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_24_ce0 : OUT STD_LOGIC;
    DataRAM_24_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_25_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_25_ce0 : OUT STD_LOGIC;
    DataRAM_25_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_26_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_26_ce0 : OUT STD_LOGIC;
    DataRAM_26_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_27_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_27_ce0 : OUT STD_LOGIC;
    DataRAM_27_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_28_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_28_ce0 : OUT STD_LOGIC;
    DataRAM_28_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_29_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_29_ce0 : OUT STD_LOGIC;
    DataRAM_29_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_30_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_30_ce0 : OUT STD_LOGIC;
    DataRAM_30_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_31_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DataRAM_31_ce0 : OUT STD_LOGIC;
    DataRAM_31_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_ce0 : OUT STD_LOGIC;
    BitReverseData_we0 : OUT STD_LOGIC;
    BitReverseData_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_1_ce0 : OUT STD_LOGIC;
    BitReverseData_1_we0 : OUT STD_LOGIC;
    BitReverseData_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_2_ce0 : OUT STD_LOGIC;
    BitReverseData_2_we0 : OUT STD_LOGIC;
    BitReverseData_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_3_ce0 : OUT STD_LOGIC;
    BitReverseData_3_we0 : OUT STD_LOGIC;
    BitReverseData_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_4_ce0 : OUT STD_LOGIC;
    BitReverseData_4_we0 : OUT STD_LOGIC;
    BitReverseData_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_5_ce0 : OUT STD_LOGIC;
    BitReverseData_5_we0 : OUT STD_LOGIC;
    BitReverseData_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_6_ce0 : OUT STD_LOGIC;
    BitReverseData_6_we0 : OUT STD_LOGIC;
    BitReverseData_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_7_ce0 : OUT STD_LOGIC;
    BitReverseData_7_we0 : OUT STD_LOGIC;
    BitReverseData_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_8_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_8_ce0 : OUT STD_LOGIC;
    BitReverseData_8_we0 : OUT STD_LOGIC;
    BitReverseData_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_9_ce0 : OUT STD_LOGIC;
    BitReverseData_9_we0 : OUT STD_LOGIC;
    BitReverseData_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_10_ce0 : OUT STD_LOGIC;
    BitReverseData_10_we0 : OUT STD_LOGIC;
    BitReverseData_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_11_ce0 : OUT STD_LOGIC;
    BitReverseData_11_we0 : OUT STD_LOGIC;
    BitReverseData_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_12_ce0 : OUT STD_LOGIC;
    BitReverseData_12_we0 : OUT STD_LOGIC;
    BitReverseData_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_13_ce0 : OUT STD_LOGIC;
    BitReverseData_13_we0 : OUT STD_LOGIC;
    BitReverseData_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_14_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_14_ce0 : OUT STD_LOGIC;
    BitReverseData_14_we0 : OUT STD_LOGIC;
    BitReverseData_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    BitReverseData_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    BitReverseData_15_ce0 : OUT STD_LOGIC;
    BitReverseData_15_we0 : OUT STD_LOGIC;
    BitReverseData_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    RAMSel_cast : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Crypto_Crypto_Pipeline_PERMUTE_LOOP1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln24_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_fu_826_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_987 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_987_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln26_3_fu_876_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln26_3_reg_1153 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln26_3_reg_1153_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln26_3_reg_1153_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln26_1_fu_886_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln26_1_reg_1158 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln26_1_reg_1158_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln26_1_reg_1158_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal DataRAM_load_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_1_load_reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_2_load_reg_1172 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_3_load_reg_1177 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_4_load_reg_1182 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_5_load_reg_1187 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_6_load_reg_1192 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_7_load_reg_1197 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_8_load_reg_1202 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_9_load_reg_1207 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_10_load_reg_1212 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_11_load_reg_1217 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_12_load_reg_1222 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_13_load_reg_1227 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_14_load_reg_1232 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_15_load_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_16_load_reg_1242 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_17_load_reg_1247 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_18_load_reg_1252 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_19_load_reg_1257 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_20_load_reg_1262 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_21_load_reg_1267 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_22_load_reg_1272 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_23_load_reg_1277 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_24_load_reg_1282 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_25_load_reg_1287 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_26_load_reg_1292 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_27_load_reg_1297 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_28_load_reg_1302 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_29_load_reg_1307 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_30_load_reg_1312 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataRAM_31_load_reg_1317 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_943_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1322 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln24_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln26_fu_952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_fu_172 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln24_fu_820_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln24_1_fu_830_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_901_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_922_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Crypto_mux_16_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Crypto_mux_2_1_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Crypto_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_16_4_32_1_1_U1 : component Crypto_mux_16_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => DataRAM_load_reg_1162,
        din1 => DataRAM_1_load_reg_1167,
        din2 => DataRAM_2_load_reg_1172,
        din3 => DataRAM_3_load_reg_1177,
        din4 => DataRAM_4_load_reg_1182,
        din5 => DataRAM_5_load_reg_1187,
        din6 => DataRAM_6_load_reg_1192,
        din7 => DataRAM_7_load_reg_1197,
        din8 => DataRAM_8_load_reg_1202,
        din9 => DataRAM_9_load_reg_1207,
        din10 => DataRAM_10_load_reg_1212,
        din11 => DataRAM_11_load_reg_1217,
        din12 => DataRAM_12_load_reg_1222,
        din13 => DataRAM_13_load_reg_1227,
        din14 => DataRAM_14_load_reg_1232,
        din15 => DataRAM_15_load_reg_1237,
        din16 => empty_reg_987_pp0_iter1_reg,
        dout => tmp_s_fu_901_p18);

    mux_16_4_32_1_1_U2 : component Crypto_mux_16_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => DataRAM_16_load_reg_1242,
        din1 => DataRAM_17_load_reg_1247,
        din2 => DataRAM_18_load_reg_1252,
        din3 => DataRAM_19_load_reg_1257,
        din4 => DataRAM_20_load_reg_1262,
        din5 => DataRAM_21_load_reg_1267,
        din6 => DataRAM_22_load_reg_1272,
        din7 => DataRAM_23_load_reg_1277,
        din8 => DataRAM_24_load_reg_1282,
        din9 => DataRAM_25_load_reg_1287,
        din10 => DataRAM_26_load_reg_1292,
        din11 => DataRAM_27_load_reg_1297,
        din12 => DataRAM_28_load_reg_1302,
        din13 => DataRAM_29_load_reg_1307,
        din14 => DataRAM_30_load_reg_1312,
        din15 => DataRAM_31_load_reg_1317,
        din16 => empty_reg_987_pp0_iter1_reg,
        dout => tmp_1_fu_922_p18);

    mux_2_1_32_1_1_U3 : component Crypto_mux_2_1_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_s_fu_901_p18,
        din1 => tmp_1_fu_922_p18,
        din2 => RAMSel_cast,
        dout => tmp_2_fu_943_p4);

    flow_control_loop_pipe_sequential_init_U : component Crypto_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_7_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln24_fu_814_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_7_fu_172 <= add_ln24_fu_820_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_7_fu_172 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                DataRAM_10_load_reg_1212 <= DataRAM_10_q0;
                DataRAM_11_load_reg_1217 <= DataRAM_11_q0;
                DataRAM_12_load_reg_1222 <= DataRAM_12_q0;
                DataRAM_13_load_reg_1227 <= DataRAM_13_q0;
                DataRAM_14_load_reg_1232 <= DataRAM_14_q0;
                DataRAM_15_load_reg_1237 <= DataRAM_15_q0;
                DataRAM_16_load_reg_1242 <= DataRAM_16_q0;
                DataRAM_17_load_reg_1247 <= DataRAM_17_q0;
                DataRAM_18_load_reg_1252 <= DataRAM_18_q0;
                DataRAM_19_load_reg_1257 <= DataRAM_19_q0;
                DataRAM_1_load_reg_1167 <= DataRAM_1_q0;
                DataRAM_20_load_reg_1262 <= DataRAM_20_q0;
                DataRAM_21_load_reg_1267 <= DataRAM_21_q0;
                DataRAM_22_load_reg_1272 <= DataRAM_22_q0;
                DataRAM_23_load_reg_1277 <= DataRAM_23_q0;
                DataRAM_24_load_reg_1282 <= DataRAM_24_q0;
                DataRAM_25_load_reg_1287 <= DataRAM_25_q0;
                DataRAM_26_load_reg_1292 <= DataRAM_26_q0;
                DataRAM_27_load_reg_1297 <= DataRAM_27_q0;
                DataRAM_28_load_reg_1302 <= DataRAM_28_q0;
                DataRAM_29_load_reg_1307 <= DataRAM_29_q0;
                DataRAM_2_load_reg_1172 <= DataRAM_2_q0;
                DataRAM_30_load_reg_1312 <= DataRAM_30_q0;
                DataRAM_31_load_reg_1317 <= DataRAM_31_q0;
                DataRAM_3_load_reg_1177 <= DataRAM_3_q0;
                DataRAM_4_load_reg_1182 <= DataRAM_4_q0;
                DataRAM_5_load_reg_1187 <= DataRAM_5_q0;
                DataRAM_6_load_reg_1192 <= DataRAM_6_q0;
                DataRAM_7_load_reg_1197 <= DataRAM_7_q0;
                DataRAM_8_load_reg_1202 <= DataRAM_8_q0;
                DataRAM_9_load_reg_1207 <= DataRAM_9_q0;
                DataRAM_load_reg_1162 <= DataRAM_q0;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_987_pp0_iter1_reg <= empty_reg_987;
                or_ln26_1_reg_1158_pp0_iter1_reg <= or_ln26_1_reg_1158;
                or_ln26_3_reg_1153_pp0_iter1_reg <= or_ln26_3_reg_1153;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_814_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_reg_987 <= empty_fu_826_p1;
                or_ln26_1_reg_1158 <= or_ln26_1_fu_886_p4;
                or_ln26_3_reg_1153 <= or_ln26_3_fu_876_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                or_ln26_1_reg_1158_pp0_iter2_reg <= or_ln26_1_reg_1158_pp0_iter1_reg;
                or_ln26_3_reg_1153_pp0_iter2_reg <= or_ln26_3_reg_1153_pp0_iter1_reg;
                tmp_2_reg_1322 <= tmp_2_fu_943_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    BitReverseData_10_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_10_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_10_d0 <= tmp_2_reg_1322;

    BitReverseData_10_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_10_we0 <= ap_const_logic_1;
        else 
            BitReverseData_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_11_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_11_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_11_d0 <= tmp_2_reg_1322;

    BitReverseData_11_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_11_we0 <= ap_const_logic_1;
        else 
            BitReverseData_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_12_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_12_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_12_d0 <= tmp_2_reg_1322;

    BitReverseData_12_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_12_we0 <= ap_const_logic_1;
        else 
            BitReverseData_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_13_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_13_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_13_d0 <= tmp_2_reg_1322;

    BitReverseData_13_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_13_we0 <= ap_const_logic_1;
        else 
            BitReverseData_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_14_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_14_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_14_d0 <= tmp_2_reg_1322;

    BitReverseData_14_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_14_we0 <= ap_const_logic_1;
        else 
            BitReverseData_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_15_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_15_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_15_d0 <= tmp_2_reg_1322;

    BitReverseData_15_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_F) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_15_we0 <= ap_const_logic_1;
        else 
            BitReverseData_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_1_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_1_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_1_d0 <= tmp_2_reg_1322;

    BitReverseData_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_1_we0 <= ap_const_logic_1;
        else 
            BitReverseData_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_2_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_2_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_2_d0 <= tmp_2_reg_1322;

    BitReverseData_2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_2_we0 <= ap_const_logic_1;
        else 
            BitReverseData_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_3_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_3_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_3_d0 <= tmp_2_reg_1322;

    BitReverseData_3_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_3_we0 <= ap_const_logic_1;
        else 
            BitReverseData_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_4_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_4_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_4_d0 <= tmp_2_reg_1322;

    BitReverseData_4_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_4_we0 <= ap_const_logic_1;
        else 
            BitReverseData_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_5_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_5_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_5_d0 <= tmp_2_reg_1322;

    BitReverseData_5_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_5_we0 <= ap_const_logic_1;
        else 
            BitReverseData_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_6_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_6_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_6_d0 <= tmp_2_reg_1322;

    BitReverseData_6_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_6_we0 <= ap_const_logic_1;
        else 
            BitReverseData_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_7_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_7_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_7_d0 <= tmp_2_reg_1322;

    BitReverseData_7_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_7_we0 <= ap_const_logic_1;
        else 
            BitReverseData_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_8_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_8_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_8_d0 <= tmp_2_reg_1322;

    BitReverseData_8_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_8_we0 <= ap_const_logic_1;
        else 
            BitReverseData_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_9_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_9_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_9_d0 <= tmp_2_reg_1322;

    BitReverseData_9_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_9_we0 <= ap_const_logic_1;
        else 
            BitReverseData_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_address0 <= zext_ln26_fu_952_p1(8 - 1 downto 0);

    BitReverseData_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_ce0 <= ap_const_logic_1;
        else 
            BitReverseData_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BitReverseData_d0 <= tmp_2_reg_1322;

    BitReverseData_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, or_ln26_1_reg_1158_pp0_iter2_reg)
    begin
        if (((or_ln26_1_reg_1158_pp0_iter2_reg = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            BitReverseData_we0 <= ap_const_logic_1;
        else 
            BitReverseData_we0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_10_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_10_ce0 <= ap_const_logic_1;
        else 
            DataRAM_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_11_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_11_ce0 <= ap_const_logic_1;
        else 
            DataRAM_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_12_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_12_ce0 <= ap_const_logic_1;
        else 
            DataRAM_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_13_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_13_ce0 <= ap_const_logic_1;
        else 
            DataRAM_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_14_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_14_ce0 <= ap_const_logic_1;
        else 
            DataRAM_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_15_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_15_ce0 <= ap_const_logic_1;
        else 
            DataRAM_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_16_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_16_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_16_ce0 <= ap_const_logic_1;
        else 
            DataRAM_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_17_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_17_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_17_ce0 <= ap_const_logic_1;
        else 
            DataRAM_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_18_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_18_ce0 <= ap_const_logic_1;
        else 
            DataRAM_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_19_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_19_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_19_ce0 <= ap_const_logic_1;
        else 
            DataRAM_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_1_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_1_ce0 <= ap_const_logic_1;
        else 
            DataRAM_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_20_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_20_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_20_ce0 <= ap_const_logic_1;
        else 
            DataRAM_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_21_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_21_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_21_ce0 <= ap_const_logic_1;
        else 
            DataRAM_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_22_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_22_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_22_ce0 <= ap_const_logic_1;
        else 
            DataRAM_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_23_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_23_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_23_ce0 <= ap_const_logic_1;
        else 
            DataRAM_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_24_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_24_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_24_ce0 <= ap_const_logic_1;
        else 
            DataRAM_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_25_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_25_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_25_ce0 <= ap_const_logic_1;
        else 
            DataRAM_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_26_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_26_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_26_ce0 <= ap_const_logic_1;
        else 
            DataRAM_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_27_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_27_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_27_ce0 <= ap_const_logic_1;
        else 
            DataRAM_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_28_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_28_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_28_ce0 <= ap_const_logic_1;
        else 
            DataRAM_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_29_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_29_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_29_ce0 <= ap_const_logic_1;
        else 
            DataRAM_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_2_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_2_ce0 <= ap_const_logic_1;
        else 
            DataRAM_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_30_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_30_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_30_ce0 <= ap_const_logic_1;
        else 
            DataRAM_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_31_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_31_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_31_ce0 <= ap_const_logic_1;
        else 
            DataRAM_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_3_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_3_ce0 <= ap_const_logic_1;
        else 
            DataRAM_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_4_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_4_ce0 <= ap_const_logic_1;
        else 
            DataRAM_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_5_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_5_ce0 <= ap_const_logic_1;
        else 
            DataRAM_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_6_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_6_ce0 <= ap_const_logic_1;
        else 
            DataRAM_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_7_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_7_ce0 <= ap_const_logic_1;
        else 
            DataRAM_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_8_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_8_ce0 <= ap_const_logic_1;
        else 
            DataRAM_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_9_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_9_ce0 <= ap_const_logic_1;
        else 
            DataRAM_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_address0 <= zext_ln24_fu_840_p1(8 - 1 downto 0);

    DataRAM_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_ce0 <= ap_const_logic_1;
        else 
            DataRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln24_fu_820_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv13_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln24_fu_814_p2)
    begin
        if (((icmp_ln24_fu_814_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_7_fu_172, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_i <= i_7_fu_172;
        end if; 
    end process;

    empty_fu_826_p1 <= ap_sig_allocacmp_i(4 - 1 downto 0);
    icmp_ln24_fu_814_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv13_1000) else "0";
    lshr_ln24_1_fu_830_p4 <= ap_sig_allocacmp_i(11 downto 4);
    
    or_ln26_1_fu_886_p4_proc : process(ap_sig_allocacmp_i)
    variable vlo_cpy : STD_LOGIC_VECTOR(13+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(13+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable or_ln26_1_fu_886_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(13 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_B(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_8(4 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_i;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(13-1-unsigned(ap_const_lv32_8(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(13-1-unsigned(ap_const_lv32_B(4-1 downto 0)));
            for or_ln26_1_fu_886_p4_i in 0 to 13-1 loop
                v0_cpy(or_ln26_1_fu_886_p4_i) := ap_sig_allocacmp_i(13-1-or_ln26_1_fu_886_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(13-1 downto 0)))));
        res_mask := res_mask(13-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        or_ln26_1_fu_886_p4 <= resvalue(4-1 downto 0);
    end process;

    
    or_ln26_3_fu_876_p4_proc : process(ap_sig_allocacmp_i)
    variable vlo_cpy : STD_LOGIC_VECTOR(13+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(13+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable or_ln26_3_fu_876_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(13 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(13 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_7(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_i;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(13-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(13-1-unsigned(ap_const_lv32_7(4-1 downto 0)));
            for or_ln26_3_fu_876_p4_i in 0 to 13-1 loop
                v0_cpy(or_ln26_3_fu_876_p4_i) := ap_sig_allocacmp_i(13-1-or_ln26_3_fu_876_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(13-1 downto 0)))));
        res_mask := res_mask(13-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        or_ln26_3_fu_876_p4 <= resvalue(8-1 downto 0);
    end process;

    zext_ln24_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln24_1_fu_830_p4),64));
    zext_ln26_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_3_reg_1153_pp0_iter2_reg),64));
end behav;
