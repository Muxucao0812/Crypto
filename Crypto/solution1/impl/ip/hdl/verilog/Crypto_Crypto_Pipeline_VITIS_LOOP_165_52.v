// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Crypto_Crypto_Pipeline_VITIS_LOOP_165_52 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        DataRAM_11_address0,
        DataRAM_11_ce0,
        DataRAM_11_we0,
        DataRAM_11_d0,
        DataRAM_8_address0,
        DataRAM_8_ce0,
        DataRAM_8_we0,
        DataRAM_8_d0,
        DataRAM_5_address0,
        DataRAM_5_ce0,
        DataRAM_5_we0,
        DataRAM_5_d0,
        DataRAM_2_address0,
        DataRAM_2_ce0,
        DataRAM_2_we0,
        DataRAM_2_d0,
        BitReverseData_2_address0,
        BitReverseData_2_ce0,
        BitReverseData_2_q0,
        RAMSel_cast
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] DataRAM_11_address0;
output   DataRAM_11_ce0;
output   DataRAM_11_we0;
output  [31:0] DataRAM_11_d0;
output  [11:0] DataRAM_8_address0;
output   DataRAM_8_ce0;
output   DataRAM_8_we0;
output  [31:0] DataRAM_8_d0;
output  [11:0] DataRAM_5_address0;
output   DataRAM_5_ce0;
output   DataRAM_5_we0;
output  [31:0] DataRAM_5_d0;
output  [11:0] DataRAM_2_address0;
output   DataRAM_2_ce0;
output   DataRAM_2_we0;
output  [31:0] DataRAM_2_d0;
output  [11:0] BitReverseData_2_address0;
output   BitReverseData_2_ce0;
input  [31:0] BitReverseData_2_q0;
input  [1:0] RAMSel_cast;

reg ap_idle;
reg DataRAM_11_ce0;
reg DataRAM_11_we0;
reg DataRAM_8_ce0;
reg DataRAM_8_we0;
reg DataRAM_5_ce0;
reg DataRAM_5_we0;
reg DataRAM_2_ce0;
reg DataRAM_2_we0;
reg BitReverseData_2_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln165_fu_125_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] RAMSel_cast_read_reg_158;
wire    ap_block_pp0_stage0_11001;
reg   [11:0] DataRAM_2_addr_reg_171;
reg   [11:0] DataRAM_2_addr_reg_171_pp0_iter1_reg;
reg   [11:0] DataRAM_5_addr_reg_176;
reg   [11:0] DataRAM_5_addr_reg_176_pp0_iter1_reg;
reg   [11:0] DataRAM_8_addr_reg_181;
reg   [11:0] DataRAM_8_addr_reg_181_pp0_iter1_reg;
reg   [11:0] DataRAM_11_addr_reg_186;
reg   [11:0] DataRAM_11_addr_reg_186_pp0_iter1_reg;
reg   [31:0] BitReverseData_2_load_reg_191;
wire   [63:0] zext_ln165_fu_137_p1;
wire    ap_block_pp0_stage0;
reg   [12:0] j_fu_46;
wire   [12:0] add_ln165_fu_131_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_j_11;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Crypto_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln165_fu_125_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_46 <= add_ln165_fu_131_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_46 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_2_load_reg_191 <= BitReverseData_2_q0;
        DataRAM_11_addr_reg_186_pp0_iter1_reg <= DataRAM_11_addr_reg_186;
        DataRAM_2_addr_reg_171_pp0_iter1_reg <= DataRAM_2_addr_reg_171;
        DataRAM_5_addr_reg_176_pp0_iter1_reg <= DataRAM_5_addr_reg_176;
        DataRAM_8_addr_reg_181_pp0_iter1_reg <= DataRAM_8_addr_reg_181;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln165_fu_125_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataRAM_11_addr_reg_186 <= zext_ln165_fu_137_p1;
        DataRAM_2_addr_reg_171 <= zext_ln165_fu_137_p1;
        DataRAM_5_addr_reg_176 <= zext_ln165_fu_137_p1;
        DataRAM_8_addr_reg_181 <= zext_ln165_fu_137_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_2_ce0 = 1'b1;
    end else begin
        BitReverseData_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        DataRAM_11_ce0 = 1'b1;
    end else begin
        DataRAM_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (2'd3 == RAMSel_cast_read_reg_158))) begin
        DataRAM_11_we0 = 1'b1;
    end else begin
        DataRAM_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        DataRAM_2_ce0 = 1'b1;
    end else begin
        DataRAM_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (2'd0 == RAMSel_cast_read_reg_158))) begin
        DataRAM_2_we0 = 1'b1;
    end else begin
        DataRAM_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        DataRAM_5_ce0 = 1'b1;
    end else begin
        DataRAM_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (2'd1 == RAMSel_cast_read_reg_158))) begin
        DataRAM_5_we0 = 1'b1;
    end else begin
        DataRAM_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        DataRAM_8_ce0 = 1'b1;
    end else begin
        DataRAM_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (2'd2 == RAMSel_cast_read_reg_158))) begin
        DataRAM_8_we0 = 1'b1;
    end else begin
        DataRAM_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln165_fu_125_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_11 = 13'd0;
    end else begin
        ap_sig_allocacmp_j_11 = j_fu_46;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BitReverseData_2_address0 = zext_ln165_fu_137_p1;

assign DataRAM_11_address0 = DataRAM_11_addr_reg_186_pp0_iter1_reg;

assign DataRAM_11_d0 = BitReverseData_2_load_reg_191;

assign DataRAM_2_address0 = DataRAM_2_addr_reg_171_pp0_iter1_reg;

assign DataRAM_2_d0 = BitReverseData_2_load_reg_191;

assign DataRAM_5_address0 = DataRAM_5_addr_reg_176_pp0_iter1_reg;

assign DataRAM_5_d0 = BitReverseData_2_load_reg_191;

assign DataRAM_8_address0 = DataRAM_8_addr_reg_181_pp0_iter1_reg;

assign DataRAM_8_d0 = BitReverseData_2_load_reg_191;

assign RAMSel_cast_read_reg_158 = RAMSel_cast;

assign add_ln165_fu_131_p2 = (ap_sig_allocacmp_j_11 + 13'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln165_fu_125_p2 = ((ap_sig_allocacmp_j_11 == 13'd4096) ? 1'b1 : 1'b0);

assign zext_ln165_fu_137_p1 = ap_sig_allocacmp_j_11;

endmodule //Crypto_Crypto_Pipeline_VITIS_LOOP_165_52
