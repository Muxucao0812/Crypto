// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Crypto_Crypto_Pipeline_WRITE_TWIDDLE_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        NTTTWiddleRAM_address0,
        NTTTWiddleRAM_ce0,
        NTTTWiddleRAM_we0,
        NTTTWiddleRAM_d0,
        NTTTWiddleRAM_1_address0,
        NTTTWiddleRAM_1_ce0,
        NTTTWiddleRAM_1_we0,
        NTTTWiddleRAM_1_d0,
        NTTTWiddleRAM_2_address0,
        NTTTWiddleRAM_2_ce0,
        NTTTWiddleRAM_2_we0,
        NTTTWiddleRAM_2_d0,
        NTTTWiddleRAM_3_address0,
        NTTTWiddleRAM_3_ce0,
        NTTTWiddleRAM_3_we0,
        NTTTWiddleRAM_3_d0,
        NTTTWiddleRAM_4_address0,
        NTTTWiddleRAM_4_ce0,
        NTTTWiddleRAM_4_we0,
        NTTTWiddleRAM_4_d0,
        NTTTWiddleRAM_5_address0,
        NTTTWiddleRAM_5_ce0,
        NTTTWiddleRAM_5_we0,
        NTTTWiddleRAM_5_d0,
        NTTTWiddleRAM_6_address0,
        NTTTWiddleRAM_6_ce0,
        NTTTWiddleRAM_6_we0,
        NTTTWiddleRAM_6_d0,
        NTTTWiddleRAM_7_address0,
        NTTTWiddleRAM_7_ce0,
        NTTTWiddleRAM_7_we0,
        NTTTWiddleRAM_7_d0,
        NTTTWiddleRAM_8_address0,
        NTTTWiddleRAM_8_ce0,
        NTTTWiddleRAM_8_we0,
        NTTTWiddleRAM_8_d0,
        NTTTWiddleRAM_9_address0,
        NTTTWiddleRAM_9_ce0,
        NTTTWiddleRAM_9_we0,
        NTTTWiddleRAM_9_d0,
        NTTTWiddleRAM_10_address0,
        NTTTWiddleRAM_10_ce0,
        NTTTWiddleRAM_10_we0,
        NTTTWiddleRAM_10_d0,
        NTTTWiddleRAM_11_address0,
        NTTTWiddleRAM_11_ce0,
        NTTTWiddleRAM_11_we0,
        NTTTWiddleRAM_11_d0,
        NTTTWiddleRAM_12_address0,
        NTTTWiddleRAM_12_ce0,
        NTTTWiddleRAM_12_we0,
        NTTTWiddleRAM_12_d0,
        NTTTWiddleRAM_13_address0,
        NTTTWiddleRAM_13_ce0,
        NTTTWiddleRAM_13_we0,
        NTTTWiddleRAM_13_d0,
        NTTTWiddleRAM_14_address0,
        NTTTWiddleRAM_14_ce0,
        NTTTWiddleRAM_14_we0,
        NTTTWiddleRAM_14_d0,
        NTTTWiddleRAM_15_address0,
        NTTTWiddleRAM_15_ce0,
        NTTTWiddleRAM_15_we0,
        NTTTWiddleRAM_15_d0,
        NTTTwiddleIn_address0,
        NTTTwiddleIn_ce0,
        NTTTwiddleIn_q0,
        INTTTWiddleRAM_address0,
        INTTTWiddleRAM_ce0,
        INTTTWiddleRAM_we0,
        INTTTWiddleRAM_d0,
        INTTTWiddleRAM_1_address0,
        INTTTWiddleRAM_1_ce0,
        INTTTWiddleRAM_1_we0,
        INTTTWiddleRAM_1_d0,
        INTTTWiddleRAM_2_address0,
        INTTTWiddleRAM_2_ce0,
        INTTTWiddleRAM_2_we0,
        INTTTWiddleRAM_2_d0,
        INTTTWiddleRAM_3_address0,
        INTTTWiddleRAM_3_ce0,
        INTTTWiddleRAM_3_we0,
        INTTTWiddleRAM_3_d0,
        INTTTWiddleRAM_4_address0,
        INTTTWiddleRAM_4_ce0,
        INTTTWiddleRAM_4_we0,
        INTTTWiddleRAM_4_d0,
        INTTTWiddleRAM_5_address0,
        INTTTWiddleRAM_5_ce0,
        INTTTWiddleRAM_5_we0,
        INTTTWiddleRAM_5_d0,
        INTTTWiddleRAM_6_address0,
        INTTTWiddleRAM_6_ce0,
        INTTTWiddleRAM_6_we0,
        INTTTWiddleRAM_6_d0,
        INTTTWiddleRAM_7_address0,
        INTTTWiddleRAM_7_ce0,
        INTTTWiddleRAM_7_we0,
        INTTTWiddleRAM_7_d0,
        INTTTWiddleRAM_8_address0,
        INTTTWiddleRAM_8_ce0,
        INTTTWiddleRAM_8_we0,
        INTTTWiddleRAM_8_d0,
        INTTTWiddleRAM_9_address0,
        INTTTWiddleRAM_9_ce0,
        INTTTWiddleRAM_9_we0,
        INTTTWiddleRAM_9_d0,
        INTTTWiddleRAM_10_address0,
        INTTTWiddleRAM_10_ce0,
        INTTTWiddleRAM_10_we0,
        INTTTWiddleRAM_10_d0,
        INTTTWiddleRAM_11_address0,
        INTTTWiddleRAM_11_ce0,
        INTTTWiddleRAM_11_we0,
        INTTTWiddleRAM_11_d0,
        INTTTWiddleRAM_12_address0,
        INTTTWiddleRAM_12_ce0,
        INTTTWiddleRAM_12_we0,
        INTTTWiddleRAM_12_d0,
        INTTTWiddleRAM_13_address0,
        INTTTWiddleRAM_13_ce0,
        INTTTWiddleRAM_13_we0,
        INTTTWiddleRAM_13_d0,
        INTTTWiddleRAM_14_address0,
        INTTTWiddleRAM_14_ce0,
        INTTTWiddleRAM_14_we0,
        INTTTWiddleRAM_14_d0,
        INTTTWiddleRAM_15_address0,
        INTTTWiddleRAM_15_ce0,
        INTTTWiddleRAM_15_we0,
        INTTTWiddleRAM_15_d0,
        INTTTwiddleIn_address0,
        INTTTwiddleIn_ce0,
        INTTTwiddleIn_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] NTTTWiddleRAM_address0;
output   NTTTWiddleRAM_ce0;
output   NTTTWiddleRAM_we0;
output  [31:0] NTTTWiddleRAM_d0;
output  [6:0] NTTTWiddleRAM_1_address0;
output   NTTTWiddleRAM_1_ce0;
output   NTTTWiddleRAM_1_we0;
output  [31:0] NTTTWiddleRAM_1_d0;
output  [6:0] NTTTWiddleRAM_2_address0;
output   NTTTWiddleRAM_2_ce0;
output   NTTTWiddleRAM_2_we0;
output  [31:0] NTTTWiddleRAM_2_d0;
output  [6:0] NTTTWiddleRAM_3_address0;
output   NTTTWiddleRAM_3_ce0;
output   NTTTWiddleRAM_3_we0;
output  [31:0] NTTTWiddleRAM_3_d0;
output  [6:0] NTTTWiddleRAM_4_address0;
output   NTTTWiddleRAM_4_ce0;
output   NTTTWiddleRAM_4_we0;
output  [31:0] NTTTWiddleRAM_4_d0;
output  [6:0] NTTTWiddleRAM_5_address0;
output   NTTTWiddleRAM_5_ce0;
output   NTTTWiddleRAM_5_we0;
output  [31:0] NTTTWiddleRAM_5_d0;
output  [6:0] NTTTWiddleRAM_6_address0;
output   NTTTWiddleRAM_6_ce0;
output   NTTTWiddleRAM_6_we0;
output  [31:0] NTTTWiddleRAM_6_d0;
output  [6:0] NTTTWiddleRAM_7_address0;
output   NTTTWiddleRAM_7_ce0;
output   NTTTWiddleRAM_7_we0;
output  [31:0] NTTTWiddleRAM_7_d0;
output  [6:0] NTTTWiddleRAM_8_address0;
output   NTTTWiddleRAM_8_ce0;
output   NTTTWiddleRAM_8_we0;
output  [31:0] NTTTWiddleRAM_8_d0;
output  [6:0] NTTTWiddleRAM_9_address0;
output   NTTTWiddleRAM_9_ce0;
output   NTTTWiddleRAM_9_we0;
output  [31:0] NTTTWiddleRAM_9_d0;
output  [6:0] NTTTWiddleRAM_10_address0;
output   NTTTWiddleRAM_10_ce0;
output   NTTTWiddleRAM_10_we0;
output  [31:0] NTTTWiddleRAM_10_d0;
output  [6:0] NTTTWiddleRAM_11_address0;
output   NTTTWiddleRAM_11_ce0;
output   NTTTWiddleRAM_11_we0;
output  [31:0] NTTTWiddleRAM_11_d0;
output  [6:0] NTTTWiddleRAM_12_address0;
output   NTTTWiddleRAM_12_ce0;
output   NTTTWiddleRAM_12_we0;
output  [31:0] NTTTWiddleRAM_12_d0;
output  [6:0] NTTTWiddleRAM_13_address0;
output   NTTTWiddleRAM_13_ce0;
output   NTTTWiddleRAM_13_we0;
output  [31:0] NTTTWiddleRAM_13_d0;
output  [6:0] NTTTWiddleRAM_14_address0;
output   NTTTWiddleRAM_14_ce0;
output   NTTTWiddleRAM_14_we0;
output  [31:0] NTTTWiddleRAM_14_d0;
output  [6:0] NTTTWiddleRAM_15_address0;
output   NTTTWiddleRAM_15_ce0;
output   NTTTWiddleRAM_15_we0;
output  [31:0] NTTTWiddleRAM_15_d0;
output  [10:0] NTTTwiddleIn_address0;
output   NTTTwiddleIn_ce0;
input  [31:0] NTTTwiddleIn_q0;
output  [6:0] INTTTWiddleRAM_address0;
output   INTTTWiddleRAM_ce0;
output   INTTTWiddleRAM_we0;
output  [31:0] INTTTWiddleRAM_d0;
output  [6:0] INTTTWiddleRAM_1_address0;
output   INTTTWiddleRAM_1_ce0;
output   INTTTWiddleRAM_1_we0;
output  [31:0] INTTTWiddleRAM_1_d0;
output  [6:0] INTTTWiddleRAM_2_address0;
output   INTTTWiddleRAM_2_ce0;
output   INTTTWiddleRAM_2_we0;
output  [31:0] INTTTWiddleRAM_2_d0;
output  [6:0] INTTTWiddleRAM_3_address0;
output   INTTTWiddleRAM_3_ce0;
output   INTTTWiddleRAM_3_we0;
output  [31:0] INTTTWiddleRAM_3_d0;
output  [6:0] INTTTWiddleRAM_4_address0;
output   INTTTWiddleRAM_4_ce0;
output   INTTTWiddleRAM_4_we0;
output  [31:0] INTTTWiddleRAM_4_d0;
output  [6:0] INTTTWiddleRAM_5_address0;
output   INTTTWiddleRAM_5_ce0;
output   INTTTWiddleRAM_5_we0;
output  [31:0] INTTTWiddleRAM_5_d0;
output  [6:0] INTTTWiddleRAM_6_address0;
output   INTTTWiddleRAM_6_ce0;
output   INTTTWiddleRAM_6_we0;
output  [31:0] INTTTWiddleRAM_6_d0;
output  [6:0] INTTTWiddleRAM_7_address0;
output   INTTTWiddleRAM_7_ce0;
output   INTTTWiddleRAM_7_we0;
output  [31:0] INTTTWiddleRAM_7_d0;
output  [6:0] INTTTWiddleRAM_8_address0;
output   INTTTWiddleRAM_8_ce0;
output   INTTTWiddleRAM_8_we0;
output  [31:0] INTTTWiddleRAM_8_d0;
output  [6:0] INTTTWiddleRAM_9_address0;
output   INTTTWiddleRAM_9_ce0;
output   INTTTWiddleRAM_9_we0;
output  [31:0] INTTTWiddleRAM_9_d0;
output  [6:0] INTTTWiddleRAM_10_address0;
output   INTTTWiddleRAM_10_ce0;
output   INTTTWiddleRAM_10_we0;
output  [31:0] INTTTWiddleRAM_10_d0;
output  [6:0] INTTTWiddleRAM_11_address0;
output   INTTTWiddleRAM_11_ce0;
output   INTTTWiddleRAM_11_we0;
output  [31:0] INTTTWiddleRAM_11_d0;
output  [6:0] INTTTWiddleRAM_12_address0;
output   INTTTWiddleRAM_12_ce0;
output   INTTTWiddleRAM_12_we0;
output  [31:0] INTTTWiddleRAM_12_d0;
output  [6:0] INTTTWiddleRAM_13_address0;
output   INTTTWiddleRAM_13_ce0;
output   INTTTWiddleRAM_13_we0;
output  [31:0] INTTTWiddleRAM_13_d0;
output  [6:0] INTTTWiddleRAM_14_address0;
output   INTTTWiddleRAM_14_ce0;
output   INTTTWiddleRAM_14_we0;
output  [31:0] INTTTWiddleRAM_14_d0;
output  [6:0] INTTTWiddleRAM_15_address0;
output   INTTTWiddleRAM_15_ce0;
output   INTTTWiddleRAM_15_we0;
output  [31:0] INTTTWiddleRAM_15_d0;
output  [10:0] INTTTwiddleIn_address0;
output   INTTTwiddleIn_ce0;
input  [31:0] INTTTwiddleIn_q0;

reg ap_idle;
reg NTTTWiddleRAM_ce0;
reg NTTTWiddleRAM_we0;
reg NTTTWiddleRAM_1_ce0;
reg NTTTWiddleRAM_1_we0;
reg NTTTWiddleRAM_2_ce0;
reg NTTTWiddleRAM_2_we0;
reg NTTTWiddleRAM_3_ce0;
reg NTTTWiddleRAM_3_we0;
reg NTTTWiddleRAM_4_ce0;
reg NTTTWiddleRAM_4_we0;
reg NTTTWiddleRAM_5_ce0;
reg NTTTWiddleRAM_5_we0;
reg NTTTWiddleRAM_6_ce0;
reg NTTTWiddleRAM_6_we0;
reg NTTTWiddleRAM_7_ce0;
reg NTTTWiddleRAM_7_we0;
reg NTTTWiddleRAM_8_ce0;
reg NTTTWiddleRAM_8_we0;
reg NTTTWiddleRAM_9_ce0;
reg NTTTWiddleRAM_9_we0;
reg NTTTWiddleRAM_10_ce0;
reg NTTTWiddleRAM_10_we0;
reg NTTTWiddleRAM_11_ce0;
reg NTTTWiddleRAM_11_we0;
reg NTTTWiddleRAM_12_ce0;
reg NTTTWiddleRAM_12_we0;
reg NTTTWiddleRAM_13_ce0;
reg NTTTWiddleRAM_13_we0;
reg NTTTWiddleRAM_14_ce0;
reg NTTTWiddleRAM_14_we0;
reg NTTTWiddleRAM_15_ce0;
reg NTTTWiddleRAM_15_we0;
reg NTTTwiddleIn_ce0;
reg INTTTWiddleRAM_ce0;
reg INTTTWiddleRAM_we0;
reg INTTTWiddleRAM_1_ce0;
reg INTTTWiddleRAM_1_we0;
reg INTTTWiddleRAM_2_ce0;
reg INTTTWiddleRAM_2_we0;
reg INTTTWiddleRAM_3_ce0;
reg INTTTWiddleRAM_3_we0;
reg INTTTWiddleRAM_4_ce0;
reg INTTTWiddleRAM_4_we0;
reg INTTTWiddleRAM_5_ce0;
reg INTTTWiddleRAM_5_we0;
reg INTTTWiddleRAM_6_ce0;
reg INTTTWiddleRAM_6_we0;
reg INTTTWiddleRAM_7_ce0;
reg INTTTWiddleRAM_7_we0;
reg INTTTWiddleRAM_8_ce0;
reg INTTTWiddleRAM_8_we0;
reg INTTTWiddleRAM_9_ce0;
reg INTTTWiddleRAM_9_we0;
reg INTTTWiddleRAM_10_ce0;
reg INTTTWiddleRAM_10_we0;
reg INTTTWiddleRAM_11_ce0;
reg INTTTWiddleRAM_11_we0;
reg INTTTWiddleRAM_12_ce0;
reg INTTTWiddleRAM_12_we0;
reg INTTTWiddleRAM_13_ce0;
reg INTTTWiddleRAM_13_we0;
reg INTTTWiddleRAM_14_ce0;
reg INTTTWiddleRAM_14_we0;
reg INTTTWiddleRAM_15_ce0;
reg INTTTWiddleRAM_15_we0;
reg INTTTwiddleIn_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln68_fu_598_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] empty_fu_616_p1;
reg   [3:0] empty_reg_681;
reg   [3:0] empty_reg_681_pp0_iter1_reg;
reg   [6:0] lshr_ln2_reg_685;
reg   [6:0] lshr_ln2_reg_685_pp0_iter1_reg;
reg   [31:0] NTTTwiddleIn_load_reg_700;
reg   [31:0] INTTTwiddleIn_load_reg_720;
wire   [63:0] i_2_cast70_fu_610_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln68_fu_635_p1;
reg   [11:0] i_fu_144;
wire   [11:0] add_ln68_fu_604_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_i_1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Crypto_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln68_fu_598_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_144 <= add_ln68_fu_604_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_144 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        INTTTwiddleIn_load_reg_720 <= INTTTwiddleIn_q0;
        NTTTwiddleIn_load_reg_700 <= NTTTwiddleIn_q0;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        empty_reg_681_pp0_iter1_reg <= empty_reg_681;
        lshr_ln2_reg_685_pp0_iter1_reg <= lshr_ln2_reg_685;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_598_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_reg_681 <= empty_fu_616_p1;
        lshr_ln2_reg_685 <= {{ap_sig_allocacmp_i_1[10:4]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_10_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd10) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_10_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_11_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd11) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_11_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_12_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd12) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_12_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_13_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd13) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_13_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_14_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd14) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_14_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_15_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd15) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_15_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_1_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_1_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_2_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_2_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_3_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_3_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_4_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd4) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_4_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_5_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd5) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_5_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_6_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd6) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_6_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_7_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd7) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_7_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_8_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd8) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_8_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_9_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd9) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_9_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        INTTTwiddleIn_ce0 = 1'b1;
    end else begin
        INTTTwiddleIn_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_10_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd10) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_10_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_11_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd11) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_11_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_12_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd12) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_12_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_13_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd13) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_13_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_14_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd14) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_14_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_15_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd15) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_15_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_1_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_1_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_2_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_2_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_3_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_3_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_4_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd4) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_4_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_5_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd5) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_5_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_6_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd6) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_6_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_7_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd7) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_7_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_8_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd8) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_8_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_9_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd9) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_9_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_681_pp0_iter1_reg == 4'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        NTTTwiddleIn_ce0 = 1'b1;
    end else begin
        NTTTwiddleIn_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_fu_598_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 12'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_144;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INTTTWiddleRAM_10_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_10_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_11_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_11_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_12_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_12_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_13_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_13_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_14_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_14_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_15_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_15_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_1_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_1_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_2_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_2_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_3_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_3_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_4_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_4_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_5_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_5_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_6_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_6_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_7_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_7_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_8_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_8_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_9_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_9_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTWiddleRAM_address0 = zext_ln68_fu_635_p1;

assign INTTTWiddleRAM_d0 = INTTTwiddleIn_load_reg_720;

assign INTTTwiddleIn_address0 = i_2_cast70_fu_610_p1;

assign NTTTWiddleRAM_10_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_10_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_11_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_11_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_12_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_12_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_13_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_13_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_14_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_14_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_15_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_15_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_1_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_1_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_2_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_2_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_3_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_3_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_4_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_4_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_5_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_5_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_6_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_6_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_7_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_7_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_8_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_8_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_9_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_9_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTWiddleRAM_address0 = zext_ln68_fu_635_p1;

assign NTTTWiddleRAM_d0 = NTTTwiddleIn_load_reg_700;

assign NTTTwiddleIn_address0 = i_2_cast70_fu_610_p1;

assign add_ln68_fu_604_p2 = (ap_sig_allocacmp_i_1 + 12'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_616_p1 = ap_sig_allocacmp_i_1[3:0];

assign i_2_cast70_fu_610_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln68_fu_598_p2 = ((ap_sig_allocacmp_i_1 == 12'd2048) ? 1'b1 : 1'b0);

assign zext_ln68_fu_635_p1 = lshr_ln2_reg_685_pp0_iter1_reg;

endmodule //Crypto_Crypto_Pipeline_WRITE_TWIDDLE_LOOP
