// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Crypto_Crypto_Pipeline_INTT_PERMUTE_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        BitReverseData_address0,
        BitReverseData_ce0,
        BitReverseData_q0,
        BitReverseData_1_address0,
        BitReverseData_1_ce0,
        BitReverseData_1_q0,
        BitReverseData_2_address0,
        BitReverseData_2_ce0,
        BitReverseData_2_q0,
        BitReverseData_3_address0,
        BitReverseData_3_ce0,
        BitReverseData_3_q0,
        BitReverseData_4_address0,
        BitReverseData_4_ce0,
        BitReverseData_4_q0,
        BitReverseData_5_address0,
        BitReverseData_5_ce0,
        BitReverseData_5_q0,
        BitReverseData_6_address0,
        BitReverseData_6_ce0,
        BitReverseData_6_q0,
        BitReverseData_7_address0,
        BitReverseData_7_ce0,
        BitReverseData_7_q0,
        BitReverseData_8_address0,
        BitReverseData_8_ce0,
        BitReverseData_8_q0,
        BitReverseData_9_address0,
        BitReverseData_9_ce0,
        BitReverseData_9_q0,
        BitReverseData_10_address0,
        BitReverseData_10_ce0,
        BitReverseData_10_q0,
        BitReverseData_11_address0,
        BitReverseData_11_ce0,
        BitReverseData_11_q0,
        BitReverseData_12_address0,
        BitReverseData_12_ce0,
        BitReverseData_12_q0,
        BitReverseData_13_address0,
        BitReverseData_13_ce0,
        BitReverseData_13_q0,
        BitReverseData_14_address0,
        BitReverseData_14_ce0,
        BitReverseData_14_q0,
        BitReverseData_15_address0,
        BitReverseData_15_ce0,
        BitReverseData_15_q0,
        DataRAM_address0,
        DataRAM_ce0,
        DataRAM_we0,
        DataRAM_d0,
        DataRAM_1_address0,
        DataRAM_1_ce0,
        DataRAM_1_we0,
        DataRAM_1_d0,
        DataRAM_2_address0,
        DataRAM_2_ce0,
        DataRAM_2_we0,
        DataRAM_2_d0,
        DataRAM_3_address0,
        DataRAM_3_ce0,
        DataRAM_3_we0,
        DataRAM_3_d0,
        DataRAM_4_address0,
        DataRAM_4_ce0,
        DataRAM_4_we0,
        DataRAM_4_d0,
        DataRAM_5_address0,
        DataRAM_5_ce0,
        DataRAM_5_we0,
        DataRAM_5_d0,
        DataRAM_6_address0,
        DataRAM_6_ce0,
        DataRAM_6_we0,
        DataRAM_6_d0,
        DataRAM_7_address0,
        DataRAM_7_ce0,
        DataRAM_7_we0,
        DataRAM_7_d0,
        DataRAM_8_address0,
        DataRAM_8_ce0,
        DataRAM_8_we0,
        DataRAM_8_d0,
        DataRAM_9_address0,
        DataRAM_9_ce0,
        DataRAM_9_we0,
        DataRAM_9_d0,
        DataRAM_10_address0,
        DataRAM_10_ce0,
        DataRAM_10_we0,
        DataRAM_10_d0,
        DataRAM_11_address0,
        DataRAM_11_ce0,
        DataRAM_11_we0,
        DataRAM_11_d0,
        DataRAM_12_address0,
        DataRAM_12_ce0,
        DataRAM_12_we0,
        DataRAM_12_d0,
        DataRAM_13_address0,
        DataRAM_13_ce0,
        DataRAM_13_we0,
        DataRAM_13_d0,
        DataRAM_14_address0,
        DataRAM_14_ce0,
        DataRAM_14_we0,
        DataRAM_14_d0,
        DataRAM_15_address0,
        DataRAM_15_ce0,
        DataRAM_15_we0,
        DataRAM_15_d0,
        DataRAM_16_address0,
        DataRAM_16_ce0,
        DataRAM_16_we0,
        DataRAM_16_d0,
        DataRAM_17_address0,
        DataRAM_17_ce0,
        DataRAM_17_we0,
        DataRAM_17_d0,
        DataRAM_18_address0,
        DataRAM_18_ce0,
        DataRAM_18_we0,
        DataRAM_18_d0,
        DataRAM_19_address0,
        DataRAM_19_ce0,
        DataRAM_19_we0,
        DataRAM_19_d0,
        DataRAM_20_address0,
        DataRAM_20_ce0,
        DataRAM_20_we0,
        DataRAM_20_d0,
        DataRAM_21_address0,
        DataRAM_21_ce0,
        DataRAM_21_we0,
        DataRAM_21_d0,
        DataRAM_22_address0,
        DataRAM_22_ce0,
        DataRAM_22_we0,
        DataRAM_22_d0,
        DataRAM_23_address0,
        DataRAM_23_ce0,
        DataRAM_23_we0,
        DataRAM_23_d0,
        DataRAM_24_address0,
        DataRAM_24_ce0,
        DataRAM_24_we0,
        DataRAM_24_d0,
        DataRAM_25_address0,
        DataRAM_25_ce0,
        DataRAM_25_we0,
        DataRAM_25_d0,
        DataRAM_26_address0,
        DataRAM_26_ce0,
        DataRAM_26_we0,
        DataRAM_26_d0,
        DataRAM_27_address0,
        DataRAM_27_ce0,
        DataRAM_27_we0,
        DataRAM_27_d0,
        DataRAM_28_address0,
        DataRAM_28_ce0,
        DataRAM_28_we0,
        DataRAM_28_d0,
        DataRAM_29_address0,
        DataRAM_29_ce0,
        DataRAM_29_we0,
        DataRAM_29_d0,
        DataRAM_30_address0,
        DataRAM_30_ce0,
        DataRAM_30_we0,
        DataRAM_30_d0,
        DataRAM_31_address0,
        DataRAM_31_ce0,
        DataRAM_31_we0,
        DataRAM_31_d0,
        RAMSel_cast
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] BitReverseData_address0;
output   BitReverseData_ce0;
input  [31:0] BitReverseData_q0;
output  [7:0] BitReverseData_1_address0;
output   BitReverseData_1_ce0;
input  [31:0] BitReverseData_1_q0;
output  [7:0] BitReverseData_2_address0;
output   BitReverseData_2_ce0;
input  [31:0] BitReverseData_2_q0;
output  [7:0] BitReverseData_3_address0;
output   BitReverseData_3_ce0;
input  [31:0] BitReverseData_3_q0;
output  [7:0] BitReverseData_4_address0;
output   BitReverseData_4_ce0;
input  [31:0] BitReverseData_4_q0;
output  [7:0] BitReverseData_5_address0;
output   BitReverseData_5_ce0;
input  [31:0] BitReverseData_5_q0;
output  [7:0] BitReverseData_6_address0;
output   BitReverseData_6_ce0;
input  [31:0] BitReverseData_6_q0;
output  [7:0] BitReverseData_7_address0;
output   BitReverseData_7_ce0;
input  [31:0] BitReverseData_7_q0;
output  [7:0] BitReverseData_8_address0;
output   BitReverseData_8_ce0;
input  [31:0] BitReverseData_8_q0;
output  [7:0] BitReverseData_9_address0;
output   BitReverseData_9_ce0;
input  [31:0] BitReverseData_9_q0;
output  [7:0] BitReverseData_10_address0;
output   BitReverseData_10_ce0;
input  [31:0] BitReverseData_10_q0;
output  [7:0] BitReverseData_11_address0;
output   BitReverseData_11_ce0;
input  [31:0] BitReverseData_11_q0;
output  [7:0] BitReverseData_12_address0;
output   BitReverseData_12_ce0;
input  [31:0] BitReverseData_12_q0;
output  [7:0] BitReverseData_13_address0;
output   BitReverseData_13_ce0;
input  [31:0] BitReverseData_13_q0;
output  [7:0] BitReverseData_14_address0;
output   BitReverseData_14_ce0;
input  [31:0] BitReverseData_14_q0;
output  [7:0] BitReverseData_15_address0;
output   BitReverseData_15_ce0;
input  [31:0] BitReverseData_15_q0;
output  [7:0] DataRAM_address0;
output   DataRAM_ce0;
output   DataRAM_we0;
output  [31:0] DataRAM_d0;
output  [7:0] DataRAM_1_address0;
output   DataRAM_1_ce0;
output   DataRAM_1_we0;
output  [31:0] DataRAM_1_d0;
output  [7:0] DataRAM_2_address0;
output   DataRAM_2_ce0;
output   DataRAM_2_we0;
output  [31:0] DataRAM_2_d0;
output  [7:0] DataRAM_3_address0;
output   DataRAM_3_ce0;
output   DataRAM_3_we0;
output  [31:0] DataRAM_3_d0;
output  [7:0] DataRAM_4_address0;
output   DataRAM_4_ce0;
output   DataRAM_4_we0;
output  [31:0] DataRAM_4_d0;
output  [7:0] DataRAM_5_address0;
output   DataRAM_5_ce0;
output   DataRAM_5_we0;
output  [31:0] DataRAM_5_d0;
output  [7:0] DataRAM_6_address0;
output   DataRAM_6_ce0;
output   DataRAM_6_we0;
output  [31:0] DataRAM_6_d0;
output  [7:0] DataRAM_7_address0;
output   DataRAM_7_ce0;
output   DataRAM_7_we0;
output  [31:0] DataRAM_7_d0;
output  [7:0] DataRAM_8_address0;
output   DataRAM_8_ce0;
output   DataRAM_8_we0;
output  [31:0] DataRAM_8_d0;
output  [7:0] DataRAM_9_address0;
output   DataRAM_9_ce0;
output   DataRAM_9_we0;
output  [31:0] DataRAM_9_d0;
output  [7:0] DataRAM_10_address0;
output   DataRAM_10_ce0;
output   DataRAM_10_we0;
output  [31:0] DataRAM_10_d0;
output  [7:0] DataRAM_11_address0;
output   DataRAM_11_ce0;
output   DataRAM_11_we0;
output  [31:0] DataRAM_11_d0;
output  [7:0] DataRAM_12_address0;
output   DataRAM_12_ce0;
output   DataRAM_12_we0;
output  [31:0] DataRAM_12_d0;
output  [7:0] DataRAM_13_address0;
output   DataRAM_13_ce0;
output   DataRAM_13_we0;
output  [31:0] DataRAM_13_d0;
output  [7:0] DataRAM_14_address0;
output   DataRAM_14_ce0;
output   DataRAM_14_we0;
output  [31:0] DataRAM_14_d0;
output  [7:0] DataRAM_15_address0;
output   DataRAM_15_ce0;
output   DataRAM_15_we0;
output  [31:0] DataRAM_15_d0;
output  [7:0] DataRAM_16_address0;
output   DataRAM_16_ce0;
output   DataRAM_16_we0;
output  [31:0] DataRAM_16_d0;
output  [7:0] DataRAM_17_address0;
output   DataRAM_17_ce0;
output   DataRAM_17_we0;
output  [31:0] DataRAM_17_d0;
output  [7:0] DataRAM_18_address0;
output   DataRAM_18_ce0;
output   DataRAM_18_we0;
output  [31:0] DataRAM_18_d0;
output  [7:0] DataRAM_19_address0;
output   DataRAM_19_ce0;
output   DataRAM_19_we0;
output  [31:0] DataRAM_19_d0;
output  [7:0] DataRAM_20_address0;
output   DataRAM_20_ce0;
output   DataRAM_20_we0;
output  [31:0] DataRAM_20_d0;
output  [7:0] DataRAM_21_address0;
output   DataRAM_21_ce0;
output   DataRAM_21_we0;
output  [31:0] DataRAM_21_d0;
output  [7:0] DataRAM_22_address0;
output   DataRAM_22_ce0;
output   DataRAM_22_we0;
output  [31:0] DataRAM_22_d0;
output  [7:0] DataRAM_23_address0;
output   DataRAM_23_ce0;
output   DataRAM_23_we0;
output  [31:0] DataRAM_23_d0;
output  [7:0] DataRAM_24_address0;
output   DataRAM_24_ce0;
output   DataRAM_24_we0;
output  [31:0] DataRAM_24_d0;
output  [7:0] DataRAM_25_address0;
output   DataRAM_25_ce0;
output   DataRAM_25_we0;
output  [31:0] DataRAM_25_d0;
output  [7:0] DataRAM_26_address0;
output   DataRAM_26_ce0;
output   DataRAM_26_we0;
output  [31:0] DataRAM_26_d0;
output  [7:0] DataRAM_27_address0;
output   DataRAM_27_ce0;
output   DataRAM_27_we0;
output  [31:0] DataRAM_27_d0;
output  [7:0] DataRAM_28_address0;
output   DataRAM_28_ce0;
output   DataRAM_28_we0;
output  [31:0] DataRAM_28_d0;
output  [7:0] DataRAM_29_address0;
output   DataRAM_29_ce0;
output   DataRAM_29_we0;
output  [31:0] DataRAM_29_d0;
output  [7:0] DataRAM_30_address0;
output   DataRAM_30_ce0;
output   DataRAM_30_we0;
output  [31:0] DataRAM_30_d0;
output  [7:0] DataRAM_31_address0;
output   DataRAM_31_ce0;
output   DataRAM_31_we0;
output  [31:0] DataRAM_31_d0;
input  [0:0] RAMSel_cast;

reg ap_idle;
reg BitReverseData_ce0;
reg BitReverseData_1_ce0;
reg BitReverseData_2_ce0;
reg BitReverseData_3_ce0;
reg BitReverseData_4_ce0;
reg BitReverseData_5_ce0;
reg BitReverseData_6_ce0;
reg BitReverseData_7_ce0;
reg BitReverseData_8_ce0;
reg BitReverseData_9_ce0;
reg BitReverseData_10_ce0;
reg BitReverseData_11_ce0;
reg BitReverseData_12_ce0;
reg BitReverseData_13_ce0;
reg BitReverseData_14_ce0;
reg BitReverseData_15_ce0;
reg DataRAM_ce0;
reg DataRAM_we0;
reg DataRAM_1_ce0;
reg DataRAM_1_we0;
reg DataRAM_2_ce0;
reg DataRAM_2_we0;
reg DataRAM_3_ce0;
reg DataRAM_3_we0;
reg DataRAM_4_ce0;
reg DataRAM_4_we0;
reg DataRAM_5_ce0;
reg DataRAM_5_we0;
reg DataRAM_6_ce0;
reg DataRAM_6_we0;
reg DataRAM_7_ce0;
reg DataRAM_7_we0;
reg DataRAM_8_ce0;
reg DataRAM_8_we0;
reg DataRAM_9_ce0;
reg DataRAM_9_we0;
reg DataRAM_10_ce0;
reg DataRAM_10_we0;
reg DataRAM_11_ce0;
reg DataRAM_11_we0;
reg DataRAM_12_ce0;
reg DataRAM_12_we0;
reg DataRAM_13_ce0;
reg DataRAM_13_we0;
reg DataRAM_14_ce0;
reg DataRAM_14_we0;
reg DataRAM_15_ce0;
reg DataRAM_15_we0;
reg DataRAM_16_ce0;
reg DataRAM_16_we0;
reg DataRAM_17_ce0;
reg DataRAM_17_we0;
reg DataRAM_18_ce0;
reg DataRAM_18_we0;
reg DataRAM_19_ce0;
reg DataRAM_19_we0;
reg DataRAM_20_ce0;
reg DataRAM_20_we0;
reg DataRAM_21_ce0;
reg DataRAM_21_we0;
reg DataRAM_22_ce0;
reg DataRAM_22_we0;
reg DataRAM_23_ce0;
reg DataRAM_23_we0;
reg DataRAM_24_ce0;
reg DataRAM_24_we0;
reg DataRAM_25_ce0;
reg DataRAM_25_we0;
reg DataRAM_26_ce0;
reg DataRAM_26_we0;
reg DataRAM_27_ce0;
reg DataRAM_27_we0;
reg DataRAM_28_ce0;
reg DataRAM_28_we0;
reg DataRAM_29_ce0;
reg DataRAM_29_we0;
reg DataRAM_30_ce0;
reg DataRAM_30_we0;
reg DataRAM_31_ce0;
reg DataRAM_31_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln143_fu_806_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] RAMSel_cast_read_reg_885;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] empty_fu_818_p1;
reg   [3:0] empty_reg_893;
reg   [3:0] empty_reg_893_pp0_iter1_reg;
reg   [3:0] empty_reg_893_pp0_iter2_reg;
wire   [63:0] zext_ln143_fu_832_p1;
reg   [63:0] zext_ln143_reg_898;
reg   [63:0] zext_ln143_reg_898_pp0_iter1_reg;
reg   [63:0] zext_ln143_reg_898_pp0_iter2_reg;
reg   [31:0] BitReverseData_load_reg_1014;
reg   [31:0] BitReverseData_1_load_reg_1019;
reg   [31:0] BitReverseData_2_load_reg_1024;
reg   [31:0] BitReverseData_3_load_reg_1029;
reg   [31:0] BitReverseData_4_load_reg_1034;
reg   [31:0] BitReverseData_5_load_reg_1039;
reg   [31:0] BitReverseData_6_load_reg_1044;
reg   [31:0] BitReverseData_7_load_reg_1049;
reg   [31:0] BitReverseData_8_load_reg_1054;
reg   [31:0] BitReverseData_9_load_reg_1059;
reg   [31:0] BitReverseData_10_load_reg_1064;
reg   [31:0] BitReverseData_11_load_reg_1069;
reg   [31:0] BitReverseData_12_load_reg_1074;
reg   [31:0] BitReverseData_13_load_reg_1079;
reg   [31:0] BitReverseData_14_load_reg_1084;
reg   [31:0] BitReverseData_15_load_reg_1089;
wire   [31:0] tmp_s_fu_857_p18;
reg   [31:0] tmp_s_reg_1094;
wire    ap_block_pp0_stage0;
reg   [12:0] i_fu_164;
wire   [12:0] add_ln143_fu_812_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_i_8;
wire   [7:0] lshr_ln8_fu_822_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Crypto_mux_16_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_16_4_32_1_1_U55(
    .din0(BitReverseData_load_reg_1014),
    .din1(BitReverseData_1_load_reg_1019),
    .din2(BitReverseData_2_load_reg_1024),
    .din3(BitReverseData_3_load_reg_1029),
    .din4(BitReverseData_4_load_reg_1034),
    .din5(BitReverseData_5_load_reg_1039),
    .din6(BitReverseData_6_load_reg_1044),
    .din7(BitReverseData_7_load_reg_1049),
    .din8(BitReverseData_8_load_reg_1054),
    .din9(BitReverseData_9_load_reg_1059),
    .din10(BitReverseData_10_load_reg_1064),
    .din11(BitReverseData_11_load_reg_1069),
    .din12(BitReverseData_12_load_reg_1074),
    .din13(BitReverseData_13_load_reg_1079),
    .din14(BitReverseData_14_load_reg_1084),
    .din15(BitReverseData_15_load_reg_1089),
    .din16(empty_reg_893_pp0_iter1_reg),
    .dout(tmp_s_fu_857_p18)
);

Crypto_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln143_fu_806_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_164 <= add_ln143_fu_812_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_164 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_10_load_reg_1064 <= BitReverseData_10_q0;
        BitReverseData_11_load_reg_1069 <= BitReverseData_11_q0;
        BitReverseData_12_load_reg_1074 <= BitReverseData_12_q0;
        BitReverseData_13_load_reg_1079 <= BitReverseData_13_q0;
        BitReverseData_14_load_reg_1084 <= BitReverseData_14_q0;
        BitReverseData_15_load_reg_1089 <= BitReverseData_15_q0;
        BitReverseData_1_load_reg_1019 <= BitReverseData_1_q0;
        BitReverseData_2_load_reg_1024 <= BitReverseData_2_q0;
        BitReverseData_3_load_reg_1029 <= BitReverseData_3_q0;
        BitReverseData_4_load_reg_1034 <= BitReverseData_4_q0;
        BitReverseData_5_load_reg_1039 <= BitReverseData_5_q0;
        BitReverseData_6_load_reg_1044 <= BitReverseData_6_q0;
        BitReverseData_7_load_reg_1049 <= BitReverseData_7_q0;
        BitReverseData_8_load_reg_1054 <= BitReverseData_8_q0;
        BitReverseData_9_load_reg_1059 <= BitReverseData_9_q0;
        BitReverseData_load_reg_1014 <= BitReverseData_q0;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_reg_893_pp0_iter1_reg <= empty_reg_893;
        zext_ln143_reg_898_pp0_iter1_reg[7 : 0] <= zext_ln143_reg_898[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln143_fu_806_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_reg_893 <= empty_fu_818_p1;
        zext_ln143_reg_898[7 : 0] <= zext_ln143_fu_832_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        empty_reg_893_pp0_iter2_reg <= empty_reg_893_pp0_iter1_reg;
        tmp_s_reg_1094 <= tmp_s_fu_857_p18;
        zext_ln143_reg_898_pp0_iter2_reg[7 : 0] <= zext_ln143_reg_898_pp0_iter1_reg[7 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_10_ce0 = 1'b1;
    end else begin
        BitReverseData_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_11_ce0 = 1'b1;
    end else begin
        BitReverseData_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_12_ce0 = 1'b1;
    end else begin
        BitReverseData_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_13_ce0 = 1'b1;
    end else begin
        BitReverseData_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_14_ce0 = 1'b1;
    end else begin
        BitReverseData_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_15_ce0 = 1'b1;
    end else begin
        BitReverseData_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_1_ce0 = 1'b1;
    end else begin
        BitReverseData_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_2_ce0 = 1'b1;
    end else begin
        BitReverseData_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_3_ce0 = 1'b1;
    end else begin
        BitReverseData_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_4_ce0 = 1'b1;
    end else begin
        BitReverseData_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_5_ce0 = 1'b1;
    end else begin
        BitReverseData_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_6_ce0 = 1'b1;
    end else begin
        BitReverseData_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_7_ce0 = 1'b1;
    end else begin
        BitReverseData_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_8_ce0 = 1'b1;
    end else begin
        BitReverseData_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_9_ce0 = 1'b1;
    end else begin
        BitReverseData_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BitReverseData_ce0 = 1'b1;
    end else begin
        BitReverseData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_10_ce0 = 1'b1;
    end else begin
        DataRAM_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd10) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_10_we0 = 1'b1;
    end else begin
        DataRAM_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_11_ce0 = 1'b1;
    end else begin
        DataRAM_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd11) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_11_we0 = 1'b1;
    end else begin
        DataRAM_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_12_ce0 = 1'b1;
    end else begin
        DataRAM_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd12) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_12_we0 = 1'b1;
    end else begin
        DataRAM_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_13_ce0 = 1'b1;
    end else begin
        DataRAM_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd13) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_13_we0 = 1'b1;
    end else begin
        DataRAM_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_14_ce0 = 1'b1;
    end else begin
        DataRAM_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd14) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_14_we0 = 1'b1;
    end else begin
        DataRAM_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_15_ce0 = 1'b1;
    end else begin
        DataRAM_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd15) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_15_we0 = 1'b1;
    end else begin
        DataRAM_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_16_ce0 = 1'b1;
    end else begin
        DataRAM_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_16_we0 = 1'b1;
    end else begin
        DataRAM_16_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_17_ce0 = 1'b1;
    end else begin
        DataRAM_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_17_we0 = 1'b1;
    end else begin
        DataRAM_17_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_18_ce0 = 1'b1;
    end else begin
        DataRAM_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_18_we0 = 1'b1;
    end else begin
        DataRAM_18_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_19_ce0 = 1'b1;
    end else begin
        DataRAM_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd3) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_19_we0 = 1'b1;
    end else begin
        DataRAM_19_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_1_ce0 = 1'b1;
    end else begin
        DataRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd1) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_1_we0 = 1'b1;
    end else begin
        DataRAM_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_20_ce0 = 1'b1;
    end else begin
        DataRAM_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd4) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_20_we0 = 1'b1;
    end else begin
        DataRAM_20_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_21_ce0 = 1'b1;
    end else begin
        DataRAM_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd5) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_21_we0 = 1'b1;
    end else begin
        DataRAM_21_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_22_ce0 = 1'b1;
    end else begin
        DataRAM_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd6) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_22_we0 = 1'b1;
    end else begin
        DataRAM_22_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_23_ce0 = 1'b1;
    end else begin
        DataRAM_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd7) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_23_we0 = 1'b1;
    end else begin
        DataRAM_23_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_24_ce0 = 1'b1;
    end else begin
        DataRAM_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd8) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_24_we0 = 1'b1;
    end else begin
        DataRAM_24_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_25_ce0 = 1'b1;
    end else begin
        DataRAM_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd9) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_25_we0 = 1'b1;
    end else begin
        DataRAM_25_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_26_ce0 = 1'b1;
    end else begin
        DataRAM_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd10) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_26_we0 = 1'b1;
    end else begin
        DataRAM_26_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_27_ce0 = 1'b1;
    end else begin
        DataRAM_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd11) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_27_we0 = 1'b1;
    end else begin
        DataRAM_27_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_28_ce0 = 1'b1;
    end else begin
        DataRAM_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd12) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_28_we0 = 1'b1;
    end else begin
        DataRAM_28_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_29_ce0 = 1'b1;
    end else begin
        DataRAM_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd13) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_29_we0 = 1'b1;
    end else begin
        DataRAM_29_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_2_ce0 = 1'b1;
    end else begin
        DataRAM_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd2) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_2_we0 = 1'b1;
    end else begin
        DataRAM_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_30_ce0 = 1'b1;
    end else begin
        DataRAM_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd14) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_30_we0 = 1'b1;
    end else begin
        DataRAM_30_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_31_ce0 = 1'b1;
    end else begin
        DataRAM_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == RAMSel_cast_read_reg_885) & (1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd15) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_31_we0 = 1'b1;
    end else begin
        DataRAM_31_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_3_ce0 = 1'b1;
    end else begin
        DataRAM_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd3) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_3_we0 = 1'b1;
    end else begin
        DataRAM_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_4_ce0 = 1'b1;
    end else begin
        DataRAM_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd4) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_4_we0 = 1'b1;
    end else begin
        DataRAM_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_5_ce0 = 1'b1;
    end else begin
        DataRAM_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd5) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_5_we0 = 1'b1;
    end else begin
        DataRAM_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_6_ce0 = 1'b1;
    end else begin
        DataRAM_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd6) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_6_we0 = 1'b1;
    end else begin
        DataRAM_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_7_ce0 = 1'b1;
    end else begin
        DataRAM_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd7) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_7_we0 = 1'b1;
    end else begin
        DataRAM_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_8_ce0 = 1'b1;
    end else begin
        DataRAM_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd8) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_8_we0 = 1'b1;
    end else begin
        DataRAM_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_9_ce0 = 1'b1;
    end else begin
        DataRAM_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd9) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_9_we0 = 1'b1;
    end else begin
        DataRAM_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_ce0 = 1'b1;
    end else begin
        DataRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_reg_893_pp0_iter2_reg == 4'd0) & (1'd0 == RAMSel_cast_read_reg_885) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        DataRAM_we0 = 1'b1;
    end else begin
        DataRAM_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln143_fu_806_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_8 = 13'd0;
    end else begin
        ap_sig_allocacmp_i_8 = i_fu_164;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BitReverseData_10_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_11_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_12_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_13_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_14_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_15_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_1_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_2_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_3_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_4_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_5_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_6_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_7_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_8_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_9_address0 = zext_ln143_fu_832_p1;

assign BitReverseData_address0 = zext_ln143_fu_832_p1;

assign DataRAM_10_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_10_d0 = tmp_s_reg_1094;

assign DataRAM_11_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_11_d0 = tmp_s_reg_1094;

assign DataRAM_12_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_12_d0 = tmp_s_reg_1094;

assign DataRAM_13_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_13_d0 = tmp_s_reg_1094;

assign DataRAM_14_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_14_d0 = tmp_s_reg_1094;

assign DataRAM_15_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_15_d0 = tmp_s_reg_1094;

assign DataRAM_16_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_16_d0 = tmp_s_reg_1094;

assign DataRAM_17_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_17_d0 = tmp_s_reg_1094;

assign DataRAM_18_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_18_d0 = tmp_s_reg_1094;

assign DataRAM_19_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_19_d0 = tmp_s_reg_1094;

assign DataRAM_1_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_1_d0 = tmp_s_reg_1094;

assign DataRAM_20_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_20_d0 = tmp_s_reg_1094;

assign DataRAM_21_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_21_d0 = tmp_s_reg_1094;

assign DataRAM_22_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_22_d0 = tmp_s_reg_1094;

assign DataRAM_23_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_23_d0 = tmp_s_reg_1094;

assign DataRAM_24_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_24_d0 = tmp_s_reg_1094;

assign DataRAM_25_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_25_d0 = tmp_s_reg_1094;

assign DataRAM_26_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_26_d0 = tmp_s_reg_1094;

assign DataRAM_27_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_27_d0 = tmp_s_reg_1094;

assign DataRAM_28_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_28_d0 = tmp_s_reg_1094;

assign DataRAM_29_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_29_d0 = tmp_s_reg_1094;

assign DataRAM_2_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_2_d0 = tmp_s_reg_1094;

assign DataRAM_30_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_30_d0 = tmp_s_reg_1094;

assign DataRAM_31_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_31_d0 = tmp_s_reg_1094;

assign DataRAM_3_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_3_d0 = tmp_s_reg_1094;

assign DataRAM_4_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_4_d0 = tmp_s_reg_1094;

assign DataRAM_5_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_5_d0 = tmp_s_reg_1094;

assign DataRAM_6_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_6_d0 = tmp_s_reg_1094;

assign DataRAM_7_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_7_d0 = tmp_s_reg_1094;

assign DataRAM_8_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_8_d0 = tmp_s_reg_1094;

assign DataRAM_9_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_9_d0 = tmp_s_reg_1094;

assign DataRAM_address0 = zext_ln143_reg_898_pp0_iter2_reg;

assign DataRAM_d0 = tmp_s_reg_1094;

assign RAMSel_cast_read_reg_885 = RAMSel_cast;

assign add_ln143_fu_812_p2 = (ap_sig_allocacmp_i_8 + 13'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_818_p1 = ap_sig_allocacmp_i_8[3:0];

assign icmp_ln143_fu_806_p2 = ((ap_sig_allocacmp_i_8 == 13'd4096) ? 1'b1 : 1'b0);

assign lshr_ln8_fu_822_p4 = {{ap_sig_allocacmp_i_8[11:4]}};

assign zext_ln143_fu_832_p1 = lshr_ln8_fu_822_p4;

always @ (posedge ap_clk) begin
    zext_ln143_reg_898[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln143_reg_898_pp0_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln143_reg_898_pp0_iter2_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //Crypto_Crypto_Pipeline_INTT_PERMUTE_LOOP
