-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto_Crypto_Pipeline_MUL_INV_LOOP21 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    DataRAM_10_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    DataRAM_10_ce0 : OUT STD_LOGIC;
    DataRAM_10_we0 : OUT STD_LOGIC;
    DataRAM_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_10_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    DataRAM_10_ce1 : OUT STD_LOGIC;
    DataRAM_10_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    DataRAM_7_ce0 : OUT STD_LOGIC;
    DataRAM_7_we0 : OUT STD_LOGIC;
    DataRAM_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_7_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    DataRAM_7_ce1 : OUT STD_LOGIC;
    DataRAM_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    DataRAM_4_ce0 : OUT STD_LOGIC;
    DataRAM_4_we0 : OUT STD_LOGIC;
    DataRAM_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_4_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    DataRAM_4_ce1 : OUT STD_LOGIC;
    DataRAM_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    DataRAM_1_ce0 : OUT STD_LOGIC;
    DataRAM_1_we0 : OUT STD_LOGIC;
    DataRAM_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    DataRAM_1_ce1 : OUT STD_LOGIC;
    DataRAM_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    RAMSel_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    grp_MUL_MOD_fu_1763_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_MUL_MOD_fu_1763_p_din2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_MUL_MOD_fu_1763_p_din3 : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_MUL_MOD_fu_1763_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_MUL_MOD_fu_1763_p_ce : OUT STD_LOGIC );
end;


architecture behav of Crypto_Crypto_Pipeline_MUL_INV_LOOP21 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3FFD1FEF : STD_LOGIC_VECTOR (31 downto 0) := "00111111111111010001111111101111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln253_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal RAMSel_cast_read_reg_190 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln253_reg_195 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_195_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_195_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_195_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_195_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_195_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_195_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_195_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_195_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_195_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_195_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_195_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_195_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_195_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_195_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal DataRAM_1_addr_reg_199 : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter12_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter13_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter14_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_1_addr_reg_199_pp0_iter15_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205 : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter12_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter13_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter14_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_4_addr_reg_205_pp0_iter15_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211 : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter12_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter13_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter14_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_7_addr_reg_211_pp0_iter15_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217 : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter12_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter13_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter14_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal DataRAM_10_addr_reg_217_pp0_iter15_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal MulInvInput_fu_170_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal MulInvInput_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal MulInvRes_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MUL_MOD_fu_128_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call13 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call13 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call13 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call13 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call13 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call13 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call13 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call13 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call13 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call13 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call13 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call13 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call13 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13_ignore_call13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14_ignore_call13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15_ignore_call13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16_ignore_call13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp45 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln253_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_50 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln253_fu_151_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_19 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Crypto_MUL_MOD IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        input1_val : IN STD_LOGIC_VECTOR (31 downto 0);
        input2_val : IN STD_LOGIC_VECTOR (31 downto 0);
        MOD_INDEX : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component Crypto_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Crypto_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_4_2_32_1_1_U99 : component Crypto_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => DataRAM_1_q1,
        din1 => DataRAM_4_q1,
        din2 => DataRAM_7_q1,
        din3 => DataRAM_10_q1,
        din4 => RAMSel_cast,
        dout => MulInvInput_fu_170_p6);

    flow_control_loop_pipe_sequential_init_U : component Crypto_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln253_fu_145_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_50 <= add_ln253_fu_151_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_50 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln253_fu_145_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                DataRAM_10_addr_reg_217 <= zext_ln253_fu_157_p1(12 - 1 downto 0);
                DataRAM_1_addr_reg_199 <= zext_ln253_fu_157_p1(12 - 1 downto 0);
                DataRAM_4_addr_reg_205 <= zext_ln253_fu_157_p1(12 - 1 downto 0);
                DataRAM_7_addr_reg_211 <= zext_ln253_fu_157_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                DataRAM_10_addr_reg_217_pp0_iter10_reg <= DataRAM_10_addr_reg_217_pp0_iter9_reg;
                DataRAM_10_addr_reg_217_pp0_iter11_reg <= DataRAM_10_addr_reg_217_pp0_iter10_reg;
                DataRAM_10_addr_reg_217_pp0_iter12_reg <= DataRAM_10_addr_reg_217_pp0_iter11_reg;
                DataRAM_10_addr_reg_217_pp0_iter13_reg <= DataRAM_10_addr_reg_217_pp0_iter12_reg;
                DataRAM_10_addr_reg_217_pp0_iter14_reg <= DataRAM_10_addr_reg_217_pp0_iter13_reg;
                DataRAM_10_addr_reg_217_pp0_iter15_reg <= DataRAM_10_addr_reg_217_pp0_iter14_reg;
                DataRAM_10_addr_reg_217_pp0_iter2_reg <= DataRAM_10_addr_reg_217_pp0_iter1_reg;
                DataRAM_10_addr_reg_217_pp0_iter3_reg <= DataRAM_10_addr_reg_217_pp0_iter2_reg;
                DataRAM_10_addr_reg_217_pp0_iter4_reg <= DataRAM_10_addr_reg_217_pp0_iter3_reg;
                DataRAM_10_addr_reg_217_pp0_iter5_reg <= DataRAM_10_addr_reg_217_pp0_iter4_reg;
                DataRAM_10_addr_reg_217_pp0_iter6_reg <= DataRAM_10_addr_reg_217_pp0_iter5_reg;
                DataRAM_10_addr_reg_217_pp0_iter7_reg <= DataRAM_10_addr_reg_217_pp0_iter6_reg;
                DataRAM_10_addr_reg_217_pp0_iter8_reg <= DataRAM_10_addr_reg_217_pp0_iter7_reg;
                DataRAM_10_addr_reg_217_pp0_iter9_reg <= DataRAM_10_addr_reg_217_pp0_iter8_reg;
                DataRAM_1_addr_reg_199_pp0_iter10_reg <= DataRAM_1_addr_reg_199_pp0_iter9_reg;
                DataRAM_1_addr_reg_199_pp0_iter11_reg <= DataRAM_1_addr_reg_199_pp0_iter10_reg;
                DataRAM_1_addr_reg_199_pp0_iter12_reg <= DataRAM_1_addr_reg_199_pp0_iter11_reg;
                DataRAM_1_addr_reg_199_pp0_iter13_reg <= DataRAM_1_addr_reg_199_pp0_iter12_reg;
                DataRAM_1_addr_reg_199_pp0_iter14_reg <= DataRAM_1_addr_reg_199_pp0_iter13_reg;
                DataRAM_1_addr_reg_199_pp0_iter15_reg <= DataRAM_1_addr_reg_199_pp0_iter14_reg;
                DataRAM_1_addr_reg_199_pp0_iter2_reg <= DataRAM_1_addr_reg_199_pp0_iter1_reg;
                DataRAM_1_addr_reg_199_pp0_iter3_reg <= DataRAM_1_addr_reg_199_pp0_iter2_reg;
                DataRAM_1_addr_reg_199_pp0_iter4_reg <= DataRAM_1_addr_reg_199_pp0_iter3_reg;
                DataRAM_1_addr_reg_199_pp0_iter5_reg <= DataRAM_1_addr_reg_199_pp0_iter4_reg;
                DataRAM_1_addr_reg_199_pp0_iter6_reg <= DataRAM_1_addr_reg_199_pp0_iter5_reg;
                DataRAM_1_addr_reg_199_pp0_iter7_reg <= DataRAM_1_addr_reg_199_pp0_iter6_reg;
                DataRAM_1_addr_reg_199_pp0_iter8_reg <= DataRAM_1_addr_reg_199_pp0_iter7_reg;
                DataRAM_1_addr_reg_199_pp0_iter9_reg <= DataRAM_1_addr_reg_199_pp0_iter8_reg;
                DataRAM_4_addr_reg_205_pp0_iter10_reg <= DataRAM_4_addr_reg_205_pp0_iter9_reg;
                DataRAM_4_addr_reg_205_pp0_iter11_reg <= DataRAM_4_addr_reg_205_pp0_iter10_reg;
                DataRAM_4_addr_reg_205_pp0_iter12_reg <= DataRAM_4_addr_reg_205_pp0_iter11_reg;
                DataRAM_4_addr_reg_205_pp0_iter13_reg <= DataRAM_4_addr_reg_205_pp0_iter12_reg;
                DataRAM_4_addr_reg_205_pp0_iter14_reg <= DataRAM_4_addr_reg_205_pp0_iter13_reg;
                DataRAM_4_addr_reg_205_pp0_iter15_reg <= DataRAM_4_addr_reg_205_pp0_iter14_reg;
                DataRAM_4_addr_reg_205_pp0_iter2_reg <= DataRAM_4_addr_reg_205_pp0_iter1_reg;
                DataRAM_4_addr_reg_205_pp0_iter3_reg <= DataRAM_4_addr_reg_205_pp0_iter2_reg;
                DataRAM_4_addr_reg_205_pp0_iter4_reg <= DataRAM_4_addr_reg_205_pp0_iter3_reg;
                DataRAM_4_addr_reg_205_pp0_iter5_reg <= DataRAM_4_addr_reg_205_pp0_iter4_reg;
                DataRAM_4_addr_reg_205_pp0_iter6_reg <= DataRAM_4_addr_reg_205_pp0_iter5_reg;
                DataRAM_4_addr_reg_205_pp0_iter7_reg <= DataRAM_4_addr_reg_205_pp0_iter6_reg;
                DataRAM_4_addr_reg_205_pp0_iter8_reg <= DataRAM_4_addr_reg_205_pp0_iter7_reg;
                DataRAM_4_addr_reg_205_pp0_iter9_reg <= DataRAM_4_addr_reg_205_pp0_iter8_reg;
                DataRAM_7_addr_reg_211_pp0_iter10_reg <= DataRAM_7_addr_reg_211_pp0_iter9_reg;
                DataRAM_7_addr_reg_211_pp0_iter11_reg <= DataRAM_7_addr_reg_211_pp0_iter10_reg;
                DataRAM_7_addr_reg_211_pp0_iter12_reg <= DataRAM_7_addr_reg_211_pp0_iter11_reg;
                DataRAM_7_addr_reg_211_pp0_iter13_reg <= DataRAM_7_addr_reg_211_pp0_iter12_reg;
                DataRAM_7_addr_reg_211_pp0_iter14_reg <= DataRAM_7_addr_reg_211_pp0_iter13_reg;
                DataRAM_7_addr_reg_211_pp0_iter15_reg <= DataRAM_7_addr_reg_211_pp0_iter14_reg;
                DataRAM_7_addr_reg_211_pp0_iter2_reg <= DataRAM_7_addr_reg_211_pp0_iter1_reg;
                DataRAM_7_addr_reg_211_pp0_iter3_reg <= DataRAM_7_addr_reg_211_pp0_iter2_reg;
                DataRAM_7_addr_reg_211_pp0_iter4_reg <= DataRAM_7_addr_reg_211_pp0_iter3_reg;
                DataRAM_7_addr_reg_211_pp0_iter5_reg <= DataRAM_7_addr_reg_211_pp0_iter4_reg;
                DataRAM_7_addr_reg_211_pp0_iter6_reg <= DataRAM_7_addr_reg_211_pp0_iter5_reg;
                DataRAM_7_addr_reg_211_pp0_iter7_reg <= DataRAM_7_addr_reg_211_pp0_iter6_reg;
                DataRAM_7_addr_reg_211_pp0_iter8_reg <= DataRAM_7_addr_reg_211_pp0_iter7_reg;
                DataRAM_7_addr_reg_211_pp0_iter9_reg <= DataRAM_7_addr_reg_211_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln253_reg_195_pp0_iter10_reg <= icmp_ln253_reg_195_pp0_iter9_reg;
                icmp_ln253_reg_195_pp0_iter11_reg <= icmp_ln253_reg_195_pp0_iter10_reg;
                icmp_ln253_reg_195_pp0_iter12_reg <= icmp_ln253_reg_195_pp0_iter11_reg;
                icmp_ln253_reg_195_pp0_iter13_reg <= icmp_ln253_reg_195_pp0_iter12_reg;
                icmp_ln253_reg_195_pp0_iter14_reg <= icmp_ln253_reg_195_pp0_iter13_reg;
                icmp_ln253_reg_195_pp0_iter2_reg <= icmp_ln253_reg_195_pp0_iter1_reg;
                icmp_ln253_reg_195_pp0_iter3_reg <= icmp_ln253_reg_195_pp0_iter2_reg;
                icmp_ln253_reg_195_pp0_iter4_reg <= icmp_ln253_reg_195_pp0_iter3_reg;
                icmp_ln253_reg_195_pp0_iter5_reg <= icmp_ln253_reg_195_pp0_iter4_reg;
                icmp_ln253_reg_195_pp0_iter6_reg <= icmp_ln253_reg_195_pp0_iter5_reg;
                icmp_ln253_reg_195_pp0_iter7_reg <= icmp_ln253_reg_195_pp0_iter6_reg;
                icmp_ln253_reg_195_pp0_iter8_reg <= icmp_ln253_reg_195_pp0_iter7_reg;
                icmp_ln253_reg_195_pp0_iter9_reg <= icmp_ln253_reg_195_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                DataRAM_10_addr_reg_217_pp0_iter1_reg <= DataRAM_10_addr_reg_217;
                DataRAM_1_addr_reg_199_pp0_iter1_reg <= DataRAM_1_addr_reg_199;
                DataRAM_4_addr_reg_205_pp0_iter1_reg <= DataRAM_4_addr_reg_205;
                DataRAM_7_addr_reg_211_pp0_iter1_reg <= DataRAM_7_addr_reg_211;
                MulInvInput_reg_223 <= MulInvInput_fu_170_p6;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln253_reg_195 <= icmp_ln253_fu_145_p2;
                icmp_ln253_reg_195_pp0_iter1_reg <= icmp_ln253_reg_195;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln253_reg_195_pp0_iter14_reg = ap_const_lv1_0))) then
                MulInvRes_reg_228 <= grp_MUL_MOD_fu_1763_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    DataRAM_10_address0 <= DataRAM_10_addr_reg_217_pp0_iter15_reg;
    DataRAM_10_address1 <= zext_ln253_fu_157_p1(12 - 1 downto 0);

    DataRAM_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            DataRAM_10_ce0 <= ap_const_logic_1;
        else 
            DataRAM_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DataRAM_10_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_10_ce1 <= ap_const_logic_1;
        else 
            DataRAM_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_10_d0 <= MulInvRes_reg_228;

    DataRAM_10_we0_assign_proc : process(ap_enable_reg_pp0_iter16, RAMSel_cast_read_reg_190, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_lv2_3 = RAMSel_cast_read_reg_190))) then 
            DataRAM_10_we0 <= ap_const_logic_1;
        else 
            DataRAM_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_1_address0 <= DataRAM_1_addr_reg_199_pp0_iter15_reg;
    DataRAM_1_address1 <= zext_ln253_fu_157_p1(12 - 1 downto 0);

    DataRAM_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            DataRAM_1_ce0 <= ap_const_logic_1;
        else 
            DataRAM_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DataRAM_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_1_ce1 <= ap_const_logic_1;
        else 
            DataRAM_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_1_d0 <= MulInvRes_reg_228;

    DataRAM_1_we0_assign_proc : process(ap_enable_reg_pp0_iter16, RAMSel_cast_read_reg_190, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_lv2_0 = RAMSel_cast_read_reg_190))) then 
            DataRAM_1_we0 <= ap_const_logic_1;
        else 
            DataRAM_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_4_address0 <= DataRAM_4_addr_reg_205_pp0_iter15_reg;
    DataRAM_4_address1 <= zext_ln253_fu_157_p1(12 - 1 downto 0);

    DataRAM_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            DataRAM_4_ce0 <= ap_const_logic_1;
        else 
            DataRAM_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DataRAM_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_4_ce1 <= ap_const_logic_1;
        else 
            DataRAM_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_4_d0 <= MulInvRes_reg_228;

    DataRAM_4_we0_assign_proc : process(ap_enable_reg_pp0_iter16, RAMSel_cast_read_reg_190, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_lv2_1 = RAMSel_cast_read_reg_190))) then 
            DataRAM_4_we0 <= ap_const_logic_1;
        else 
            DataRAM_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_7_address0 <= DataRAM_7_addr_reg_211_pp0_iter15_reg;
    DataRAM_7_address1 <= zext_ln253_fu_157_p1(12 - 1 downto 0);

    DataRAM_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            DataRAM_7_ce0 <= ap_const_logic_1;
        else 
            DataRAM_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DataRAM_7_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataRAM_7_ce1 <= ap_const_logic_1;
        else 
            DataRAM_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_7_d0 <= MulInvRes_reg_228;

    DataRAM_7_we0_assign_proc : process(ap_enable_reg_pp0_iter16, RAMSel_cast_read_reg_190, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_lv2_2 = RAMSel_cast_read_reg_190))) then 
            DataRAM_7_we0 <= ap_const_logic_1;
        else 
            DataRAM_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    RAMSel_cast_read_reg_190 <= RAMSel_cast;
    add_ln253_fu_151_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_19) + unsigned(ap_const_lv13_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln253_fu_145_p2)
    begin
        if (((icmp_ln253_fu_145_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_19_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_50, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_19 <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_j_19 <= j_fu_50;
        end if; 
    end process;


    grp_MUL_MOD_fu_128_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp45)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp45) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_MUL_MOD_fu_128_ap_ce <= ap_const_logic_1;
        else 
            grp_MUL_MOD_fu_128_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_MUL_MOD_fu_1763_p_ce <= grp_MUL_MOD_fu_128_ap_ce;
    grp_MUL_MOD_fu_1763_p_din1 <= MulInvInput_reg_223;
    grp_MUL_MOD_fu_1763_p_din2 <= ap_const_lv32_3FFD1FEF;
    grp_MUL_MOD_fu_1763_p_din3 <= ap_const_lv2_1;
    icmp_ln253_fu_145_p2 <= "1" when (ap_sig_allocacmp_j_19 = ap_const_lv13_1000) else "0";
    zext_ln253_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_19),64));
end behav;
