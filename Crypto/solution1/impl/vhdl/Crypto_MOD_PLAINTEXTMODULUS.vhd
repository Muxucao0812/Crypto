-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto_MOD_PLAINTEXTMODULUS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input_val : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of Crypto_MOD_PLAINTEXTMODULUS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv49_1FFFFFFFEFFFF : STD_LOGIC_VECTOR (48 downto 0) := "1111111111111111111111111111111101111111111111111";
    constant ap_const_lv49_1FFFFFFFDFFFE : STD_LOGIC_VECTOR (48 downto 0) := "1111111111111111111111111111111011111111111111110";
    constant ap_const_lv32_FFFEFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101111111111111111";
    constant ap_const_lv32_FFFDFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111011111111111111110";

attribute shreg_extract : string;
    signal input_val_read_reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal res_mult_shift_part_reg_320 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln7_reg_326 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln30_fu_235_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_reg_332 : STD_LOGIC_VECTOR (16 downto 0);
    signal res_shift_fu_241_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal res_shift_reg_337 : STD_LOGIC_VECTOR (47 downto 0);
    signal sub_ln78_fu_261_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal sub_ln78_reg_342 : STD_LOGIC_VECTOR (48 downto 0);
    signal trunc_ln80_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln80_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln80_reg_348_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_354 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln81_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln81_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_fu_68_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_mult_high_fu_78_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln22_1_fu_98_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln_fu_90_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln22_fu_108_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln22_1_fu_112_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln71_fu_86_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal temp1_fu_116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_fu_128_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal temp2_fu_122_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum2_fu_140_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln28_fu_148_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln32_fu_160_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln28_7_fu_152_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln28_fu_136_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal trunc_ln_fu_164_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln32_fu_156_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln72_fu_178_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal res_mult_shift_fu_172_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal res_mult_fu_204_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln17_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_5_fu_218_p3 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln30_fu_229_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln30_11_fu_232_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln69_fu_211_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln28_8_fu_225_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sum2_5_fu_247_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln78_fu_258_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln28_9_fu_254_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal add_ln79_fu_271_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal add_ln80_fu_276_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_5_fu_289_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln81_fu_297_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln81_1_fu_310_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal input_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (31 downto 0);


begin




    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                add_ln30_reg_332 <= add_ln30_fu_235_p2;
                add_ln81_reg_359 <= add_ln81_fu_305_p2;
                input_val_read_reg_315 <= input_val_int_reg;
                res_mult_shift_part_reg_320 <= add_ln72_fu_178_p2(33 downto 18);
                res_shift_reg_337 <= res_shift_fu_241_p2;
                sub_ln78_reg_342 <= sub_ln78_fu_261_p2;
                tmp_reg_354 <= add_ln79_fu_271_p2(48 downto 48);
                trunc_ln7_reg_326 <= res_mult_shift_fu_172_p2(48 downto 34);
                trunc_ln80_reg_348 <= trunc_ln80_fu_267_p1;
                trunc_ln80_reg_348_pp0_iter3_reg <= trunc_ln80_reg_348;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln81_1_fu_310_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                input_val_int_reg <= input_val;
            end if;
        end if;
    end process;
    add_ln30_fu_235_p2 <= std_logic_vector(unsigned(zext_ln30_fu_229_p1) + unsigned(zext_ln30_11_fu_232_p1));
    add_ln72_fu_178_p2 <= std_logic_vector(unsigned(trunc_ln_fu_164_p3) + unsigned(zext_ln32_fu_156_p1));
    add_ln79_fu_271_p2 <= std_logic_vector(unsigned(sub_ln78_reg_342) + unsigned(ap_const_lv49_1FFFFFFFEFFFF));
    add_ln80_fu_276_p2 <= std_logic_vector(unsigned(sub_ln78_reg_342) + unsigned(ap_const_lv49_1FFFFFFFDFFFE));
    add_ln81_fu_305_p2 <= std_logic_vector(unsigned(trunc_ln80_reg_348) + unsigned(select_ln81_fu_297_p3));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln81_1_fu_310_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln81_1_fu_310_p3;
        else 
            ap_return <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    res_mult_fu_204_p3 <= (ap_const_lv1_0 & input_val_read_reg_315);
    res_mult_high_fu_78_p3 <= (ap_const_lv1_0 & tmp_1_fu_68_p4);
    res_mult_shift_fu_172_p2 <= std_logic_vector(unsigned(zext_ln28_7_fu_152_p1) + unsigned(zext_ln28_fu_136_p1));
    res_shift_fu_241_p2 <= std_logic_vector(unsigned(zext_ln69_fu_211_p1) - unsigned(zext_ln28_8_fu_225_p1));
    select_ln81_1_fu_310_p3 <= 
        trunc_ln80_reg_348_pp0_iter3_reg when (tmp_reg_354(0) = '1') else 
        add_ln81_reg_359;
    select_ln81_fu_297_p3 <= 
        ap_const_lv32_FFFEFFFF when (tmp_5_fu_289_p3(0) = '1') else 
        ap_const_lv32_FFFDFFFE;
        sext_ln28_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_fu_140_p3),48));

        sext_ln78_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(res_shift_reg_337),49));

    shl_ln22_1_fu_98_p4 <= ((ap_const_lv1_0 & tmp_1_fu_68_p4) & ap_const_lv2_0);
    shl_ln_fu_90_p3 <= (tmp_1_fu_68_p4 & ap_const_lv16_0);
    sub_ln78_fu_261_p2 <= std_logic_vector(signed(sext_ln78_fu_258_p1) - signed(zext_ln28_9_fu_254_p1));
    sum1_5_fu_218_p3 <= (trunc_ln7_reg_326 & zext_ln17_fu_215_p1);
    sum1_fu_128_p3 <= (ap_const_lv1_0 & temp1_fu_116_p2);
    sum2_5_fu_247_p3 <= (add_ln30_reg_332 & ap_const_lv16_0);
    sum2_fu_140_p3 <= (temp2_fu_122_p2 & ap_const_lv16_0);
    temp1_fu_116_p2 <= std_logic_vector(unsigned(shl_ln_fu_90_p3) - unsigned(zext_ln22_fu_108_p1));
    temp2_fu_122_p2 <= std_logic_vector(unsigned(zext_ln22_1_fu_112_p1) - unsigned(zext_ln71_fu_86_p1));
    tmp_1_fu_68_p4 <= input_val_int_reg(31 downto 16);
    tmp_5_fu_289_p3 <= add_ln80_fu_276_p2(48 downto 48);
    trunc_ln32_fu_160_p1 <= temp2_fu_122_p2(18 - 1 downto 0);
    trunc_ln80_fu_267_p1 <= sub_ln78_fu_261_p2(32 - 1 downto 0);
    trunc_ln_fu_164_p3 <= (trunc_ln32_fu_160_p1 & ap_const_lv16_0);
    zext_ln17_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_shift_part_reg_320),32));
    zext_ln22_1_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln22_1_fu_98_p4),20));
    zext_ln22_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln22_1_fu_98_p4),32));
    zext_ln28_7_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln28_fu_148_p1),49));
    zext_ln28_8_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_5_fu_218_p3),48));
    zext_ln28_9_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_5_fu_247_p3),49));
    zext_ln28_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_128_p3),49));
    zext_ln30_11_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln7_reg_326),17));
    zext_ln30_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_shift_part_reg_320),17));
    zext_ln32_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_128_p3),34));
    zext_ln69_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_fu_204_p3),48));
    zext_ln71_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_high_fu_78_p3),20));
end behav;
