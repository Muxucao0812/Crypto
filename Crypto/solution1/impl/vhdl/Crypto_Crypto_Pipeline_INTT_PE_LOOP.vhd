-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto_Crypto_Pipeline_INTT_PE_LOOP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    hf_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln158_2 : IN STD_LOGIC_VECTOR (11 downto 0);
    DataTemp_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    DataTemp_ce0 : OUT STD_LOGIC;
    DataTemp_we0 : OUT STD_LOGIC;
    DataTemp_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataTemp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataTemp_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    DataTemp_ce1 : OUT STD_LOGIC;
    DataTemp_we1 : OUT STD_LOGIC;
    DataTemp_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataTemp_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln158_1 : IN STD_LOGIC_VECTOR (11 downto 0);
    trunc_ln10 : IN STD_LOGIC_VECTOR (12 downto 0);
    m_1 : IN STD_LOGIC_VECTOR (19 downto 0);
    zext_ln19_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    mod_1 : IN STD_LOGIC_VECTOR (30 downto 0);
    zext_ln19_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    zext_ln89_1 : IN STD_LOGIC_VECTOR (30 downto 0);
    zext_ln64_1 : IN STD_LOGIC_VECTOR (30 downto 0);
    twiddle_ram_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    twiddle_ram_ce0 : OUT STD_LOGIC;
    twiddle_ram_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Crypto_Crypto_Pipeline_INTT_PE_LOOP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln160_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln64_1_cast_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln64_1_cast_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln89_1_cast_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln89_1_cast_reg_839 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_9_cast_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_9_cast_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_8_cast_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_8_cast_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_reg_859 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal res_2_reg_864 : STD_LOGIC_VECTOR (11 downto 0);
    signal input2_high_7_reg_874 : STD_LOGIC_VECTOR (3 downto 0);
    signal u_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal v_fu_710_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln162_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln163_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln164_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul4_fu_116 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln164_1_fu_293_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_1_fu_120 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln160_fu_260_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln160_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln160_fu_269_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln162_fu_273_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln163_fu_283_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln164_fu_298_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal input1_low_fu_328_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_fu_340_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_fu_332_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_fu_358_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp1_fu_372_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln19_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_fu_372_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln17_fu_336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_fu_378_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln20_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_fu_378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_fu_384_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_fu_384_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln18_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_fu_384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_769_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum2_fu_402_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln28_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_fu_390_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_fu_413_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal input1_low_7_fu_419_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_4_fu_433_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln20_fu_447_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp1_7_fu_454_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln17_11_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_7_fu_454_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp2_7_fu_459_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp2_7_fu_459_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln20_7_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_7_fu_465_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln18_5_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_7_fu_465_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_7_fu_470_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_7_fu_470_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_7_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_7_fu_454_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_7_fu_459_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_7_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln30_17_fu_488_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln30_18_fu_492_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln30_8_fu_502_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum2_7_fu_508_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal trunc_ln29_fu_476_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln30_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_11_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_7_fu_480_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_1_fu_528_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_3_fu_520_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln74_fu_542_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal res_mult_shift_part_fu_548_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_8_fu_566_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp1_8_fu_579_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp1_8_fu_579_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_mult_shift_fu_536_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln24_4_fu_584_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp3_8_fu_602_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp3_8_fu_602_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_8_fu_607_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln20_8_fu_575_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal temp4_8_fu_607_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_8_fu_607_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal temp1_8_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_8_fu_613_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal temp3_8_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_778_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum2_8_fu_629_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln28_12_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_shift_fu_640_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_13_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln85_fu_646_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln90_1_fu_657_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln90_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln89_fu_652_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln90_fu_668_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_682_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln92_7_fu_694_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln92_8_fu_698_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln92_fu_690_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln92_fu_702_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_fu_718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln43_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln44_fu_729_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln53_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_747_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln56_fu_755_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_769_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_769_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_769_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_778_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_778_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_778_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_769_p20 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_778_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_778_p20 : STD_LOGIC_VECTOR (32 downto 0);
    signal temp1_8_fu_579_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_8_fu_602_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_8_fu_607_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Crypto_mul_16ns_16ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Crypto_mul_15ns_16ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Crypto_mac_muladd_16ns_16ns_32ns_33_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Crypto_mac_muladd_16ns_15ns_32ns_33_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Crypto_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16ns_16ns_32_1_1_U8 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp1_fu_372_p0,
        din1 => temp1_fu_372_p1,
        dout => temp1_fu_372_p2);

    mul_16ns_16ns_32_1_1_U9 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp2_fu_378_p0,
        din1 => temp2_fu_378_p1,
        dout => temp2_fu_378_p2);

    mul_16ns_16ns_32_1_1_U10 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp4_fu_384_p0,
        din1 => temp4_fu_384_p1,
        dout => temp4_fu_384_p2);

    mul_16ns_16ns_32_1_1_U11 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp1_7_fu_454_p0,
        din1 => temp1_7_fu_454_p1,
        dout => temp1_7_fu_454_p2);

    mul_16ns_16ns_32_1_1_U12 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp2_7_fu_459_p0,
        din1 => temp2_7_fu_459_p1,
        dout => temp2_7_fu_459_p2);

    mul_16ns_16ns_32_1_1_U13 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp3_7_fu_465_p0,
        din1 => temp3_7_fu_465_p1,
        dout => temp3_7_fu_465_p2);

    mul_16ns_16ns_32_1_1_U14 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp4_7_fu_470_p0,
        din1 => temp4_7_fu_470_p1,
        dout => temp4_7_fu_470_p2);

    mul_16ns_16ns_32_1_1_U15 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp1_8_fu_579_p0,
        din1 => temp1_8_fu_579_p1,
        dout => temp1_8_fu_579_p2);

    mul_16ns_16ns_32_1_1_U16 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp3_8_fu_602_p0,
        din1 => temp3_8_fu_602_p1,
        dout => temp3_8_fu_602_p2);

    mul_15ns_16ns_31_1_1_U17 : component Crypto_mul_15ns_16ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => temp4_8_fu_607_p0,
        din1 => temp4_8_fu_607_p1,
        dout => temp4_8_fu_607_p2);

    mac_muladd_16ns_16ns_32ns_33_1_1_U18 : component Crypto_mac_muladd_16ns_16ns_32ns_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        din0 => grp_fu_769_p0,
        din1 => grp_fu_769_p1,
        din2 => grp_fu_769_p2,
        dout => grp_fu_769_p3);

    mac_muladd_16ns_15ns_32ns_33_1_1_U19 : component Crypto_mac_muladd_16ns_15ns_32ns_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        din0 => grp_fu_778_p0,
        din1 => grp_fu_778_p1,
        din2 => grp_fu_778_p2,
        dout => grp_fu_778_p3);

    flow_control_loop_pipe_sequential_init_U : component Crypto_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    j_1_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                j_1_fu_120 <= ap_const_lv31_0;
            elsif (((icmp_ln160_fu_255_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                j_1_fu_120 <= add_ln160_fu_260_p2;
            end if; 
        end if;
    end process;

    phi_mul4_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                phi_mul4_fu_116 <= ap_const_lv13_0;
            elsif (((icmp_ln160_fu_255_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                phi_mul4_fu_116 <= add_ln164_1_fu_293_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln160_fu_255_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                input2_high_7_reg_874 <= m_1(19 downto 16);
                res_2_reg_864 <= zext_ln163_fu_288_p1(12 - 1 downto 0);
                res_reg_859 <= zext_ln162_fu_278_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                u_reg_879 <= DataTemp_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                v_reg_884 <= v_fu_710_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln19_8_cast_reg_850(15 downto 0) <= zext_ln19_8_cast_fu_234_p1(15 downto 0);
                    zext_ln19_9_cast_reg_844(15 downto 0) <= zext_ln19_9_cast_fu_230_p1(15 downto 0);
                    zext_ln64_1_cast_reg_832(30 downto 0) <= zext_ln64_1_cast_fu_222_p1(30 downto 0);
                    zext_ln89_1_cast_reg_839(30 downto 0) <= zext_ln89_1_cast_fu_226_p1(30 downto 0);
            end if;
        end if;
    end process;
    zext_ln64_1_cast_reg_832(31) <= '0';
    zext_ln89_1_cast_reg_839(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln19_9_cast_reg_844(31 downto 16) <= "0000000000000000";
    zext_ln19_8_cast_reg_850(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    DataTemp_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, res_2_reg_864, ap_block_pp0_stage1, zext_ln163_fu_288_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataTemp_address0 <= res_2_reg_864;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            DataTemp_address0 <= zext_ln163_fu_288_p1(12 - 1 downto 0);
        else 
            DataTemp_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    DataTemp_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, res_reg_859, zext_ln162_fu_278_p1, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                DataTemp_address1 <= res_reg_859;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                DataTemp_address1 <= zext_ln162_fu_278_p1(12 - 1 downto 0);
            else 
                DataTemp_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            DataTemp_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    DataTemp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            DataTemp_ce0 <= ap_const_logic_1;
        else 
            DataTemp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DataTemp_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            DataTemp_ce1 <= ap_const_logic_1;
        else 
            DataTemp_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    DataTemp_d0 <= 
        add_ln56_fu_755_p2 when (tmp_9_fu_747_p3(0) = '1') else 
        sub_ln53_fu_743_p2;
    DataTemp_d1 <= 
        add_ln40_fu_718_p2 when (icmp_ln43_fu_724_p2(0) = '1') else 
        sub_ln44_fu_729_p2;

    DataTemp_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataTemp_we0 <= ap_const_logic_1;
        else 
            DataTemp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DataTemp_we1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            DataTemp_we1 <= ap_const_logic_1;
        else 
            DataTemp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln160_fu_260_p2 <= std_logic_vector(unsigned(j_1_fu_120) + unsigned(ap_const_lv31_1));
    add_ln162_fu_273_p2 <= std_logic_vector(unsigned(trunc_ln160_fu_269_p1) + unsigned(trunc_ln158_2));
    add_ln163_fu_283_p2 <= std_logic_vector(unsigned(add_ln162_fu_273_p2) + unsigned(trunc_ln158_1));
    add_ln164_1_fu_293_p2 <= std_logic_vector(unsigned(phi_mul4_fu_116) + unsigned(trunc_ln10));
    add_ln30_8_fu_502_p2 <= std_logic_vector(unsigned(zext_ln30_17_fu_488_p1) + unsigned(zext_ln30_18_fu_492_p1));
    add_ln30_fu_496_p2 <= std_logic_vector(unsigned(temp2_7_fu_459_p2) + unsigned(temp3_7_fu_465_p2));
    add_ln40_fu_718_p2 <= std_logic_vector(unsigned(DataTemp_q1) + unsigned(v_fu_710_p3));
    add_ln56_fu_755_p2 <= std_logic_vector(unsigned(sub_ln53_fu_743_p2) + unsigned(zext_ln64_1_cast_reg_832));
    add_ln74_fu_542_p2 <= std_logic_vector(unsigned(trunc_ln32_1_fu_528_p3) + unsigned(tmp_3_fu_520_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln160_fu_255_p2)
    begin
        if (((icmp_ln160_fu_255_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_769_p0 <= zext_ln19_fu_354_p1(16 - 1 downto 0);
    grp_fu_769_p1 <= zext_ln18_fu_350_p1(16 - 1 downto 0);
    grp_fu_769_p2 <= grp_fu_769_p20(32 - 1 downto 0);
    grp_fu_769_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp2_fu_378_p2),33));
    grp_fu_778_p0 <= grp_fu_778_p00(16 - 1 downto 0);
    grp_fu_778_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_shift_part_fu_548_p4),31));
    grp_fu_778_p1 <= zext_ln20_8_fu_575_p1(15 - 1 downto 0);
    grp_fu_778_p2 <= grp_fu_778_p20(32 - 1 downto 0);
    grp_fu_778_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp3_8_fu_602_p2),33));
    icmp_ln160_fu_255_p2 <= "1" when (signed(zext_ln160_fu_251_p1) < signed(hf_1)) else "0";
    icmp_ln43_fu_724_p2 <= "1" when (signed(add_ln40_fu_718_p2) < signed(zext_ln64_1_cast_reg_832)) else "0";
    input1_high_4_fu_433_p4 <= res_mult_fu_413_p2(61 downto 46);
    input1_high_fu_340_p4 <= DataTemp_q0(31 downto 16);
    input1_low_7_fu_419_p4 <= res_mult_fu_413_p2(45 downto 30);
    input1_low_fu_328_p1 <= DataTemp_q0(16 - 1 downto 0);
    input2_high_8_fu_566_p4 <= mod_1(30 downto 16);
    input2_high_fu_358_p4 <= twiddle_ram_q0(31 downto 16);
    input2_low_fu_332_p1 <= twiddle_ram_q0(16 - 1 downto 0);
    res_mult_fu_413_p2 <= std_logic_vector(unsigned(zext_ln28_fu_409_p1) + unsigned(sum1_fu_390_p3));
    res_mult_shift_fu_536_p2 <= std_logic_vector(unsigned(zext_ln28_11_fu_516_p1) + unsigned(sum1_7_fu_480_p3));
    res_mult_shift_part_fu_548_p4 <= add_ln74_fu_542_p2(47 downto 32);
    res_shift_fu_640_p2 <= std_logic_vector(unsigned(res_mult_fu_413_p2) - unsigned(zext_ln28_12_fu_621_p1));
    select_ln92_fu_702_p3 <= 
        trunc_ln92_7_fu_694_p1 when (tmp_8_fu_682_p3(0) = '1') else 
        trunc_ln92_8_fu_698_p1;
        sext_ln20_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input2_high_7_reg_874),16));

    shl_ln90_1_fu_657_p3 <= (mod_1 & ap_const_lv1_0);
    sub_ln44_fu_729_p2 <= std_logic_vector(unsigned(add_ln40_fu_718_p2) - unsigned(zext_ln64_1_cast_reg_832));
    sub_ln53_fu_743_p2 <= std_logic_vector(unsigned(u_reg_879) - unsigned(v_reg_884));
    sub_ln85_fu_646_p2 <= std_logic_vector(unsigned(res_shift_fu_640_p2) - unsigned(zext_ln28_13_fu_636_p1));
    sub_ln89_fu_652_p2 <= std_logic_vector(unsigned(sub_ln85_fu_646_p2) - unsigned(zext_ln89_1_cast_reg_839));
    sub_ln90_fu_668_p2 <= std_logic_vector(unsigned(sub_ln85_fu_646_p2) - unsigned(zext_ln90_fu_664_p1));
    sum1_7_fu_480_p3 <= (temp4_7_fu_470_p2 & temp1_7_fu_454_p2);
    sum1_8_fu_613_p3 <= (temp4_8_fu_607_p2 & temp1_8_fu_579_p2);
    sum1_fu_390_p3 <= (temp4_fu_384_p2 & temp1_fu_372_p2);
    sum2_7_fu_508_p3 <= (add_ln30_8_fu_502_p2 & ap_const_lv16_0);
    sum2_8_fu_629_p3 <= (grp_fu_778_p3 & ap_const_lv16_0);
    sum2_fu_402_p3 <= (grp_fu_769_p3 & ap_const_lv16_0);
    temp1_7_fu_454_p0 <= zext_ln17_11_fu_429_p1(16 - 1 downto 0);
    temp1_7_fu_454_p1 <= zext_ln19_8_cast_reg_850(16 - 1 downto 0);
    temp1_8_fu_579_p0 <= temp1_8_fu_579_p00(16 - 1 downto 0);
    temp1_8_fu_579_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_shift_part_fu_548_p4),32));
    temp1_8_fu_579_p1 <= zext_ln19_9_cast_reg_844(16 - 1 downto 0);
    temp1_fu_372_p0 <= zext_ln19_fu_354_p1(16 - 1 downto 0);
    temp1_fu_372_p1 <= zext_ln17_fu_336_p1(16 - 1 downto 0);
    temp2_7_fu_459_p0 <= zext_ln17_11_fu_429_p1(16 - 1 downto 0);
    temp2_7_fu_459_p1 <= zext_ln20_7_fu_450_p1(16 - 1 downto 0);
    temp2_fu_378_p0 <= zext_ln20_fu_368_p1(16 - 1 downto 0);
    temp2_fu_378_p1 <= zext_ln17_fu_336_p1(16 - 1 downto 0);
    temp3_7_fu_465_p0 <= zext_ln18_5_fu_443_p1(16 - 1 downto 0);
    temp3_7_fu_465_p1 <= zext_ln19_8_cast_reg_850(16 - 1 downto 0);
    temp3_8_fu_602_p0 <= zext_ln19_9_cast_reg_844(16 - 1 downto 0);
    temp3_8_fu_602_p1 <= temp3_8_fu_602_p10(16 - 1 downto 0);
    temp3_8_fu_602_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln24_4_fu_584_p4),32));
    temp4_7_fu_470_p0 <= zext_ln18_5_fu_443_p1(16 - 1 downto 0);
    temp4_7_fu_470_p1 <= zext_ln20_7_fu_450_p1(16 - 1 downto 0);
    temp4_8_fu_607_p0 <= zext_ln20_8_fu_575_p1(15 - 1 downto 0);
    temp4_8_fu_607_p1 <= temp4_8_fu_607_p10(16 - 1 downto 0);
    temp4_8_fu_607_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln24_4_fu_584_p4),31));
    temp4_fu_384_p0 <= zext_ln20_fu_368_p1(16 - 1 downto 0);
    temp4_fu_384_p1 <= zext_ln18_fu_350_p1(16 - 1 downto 0);
    tmp_3_fu_520_p3 <= (trunc_ln29_fu_476_p1 & temp1_7_fu_454_p2);
    tmp_8_fu_682_p3 <= sub_ln90_fu_668_p2(63 downto 63);
    tmp_9_fu_747_p3 <= sub_ln53_fu_743_p2(31 downto 31);
    tmp_fu_674_p3 <= sub_ln89_fu_652_p2(63 downto 63);
    trunc_ln160_fu_269_p1 <= j_1_fu_120(12 - 1 downto 0);
    trunc_ln24_4_fu_584_p4 <= res_mult_shift_fu_536_p2(63 downto 48);
    trunc_ln29_fu_476_p1 <= temp4_7_fu_470_p2(16 - 1 downto 0);
    trunc_ln32_1_fu_528_p3 <= (add_ln30_fu_496_p2 & ap_const_lv16_0);
    trunc_ln92_7_fu_694_p1 <= sub_ln89_fu_652_p2(32 - 1 downto 0);
    trunc_ln92_8_fu_698_p1 <= sub_ln90_fu_668_p2(32 - 1 downto 0);
    trunc_ln92_fu_690_p1 <= sub_ln85_fu_646_p2(32 - 1 downto 0);
    twiddle_ram_address0 <= zext_ln164_fu_304_p1(13 - 1 downto 0);

    twiddle_ram_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            twiddle_ram_ce0 <= ap_const_logic_1;
        else 
            twiddle_ram_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v_fu_710_p3 <= 
        trunc_ln92_fu_690_p1 when (tmp_fu_674_p3(0) = '1') else 
        select_ln92_fu_702_p3;
    xor_ln164_fu_298_p2 <= (phi_mul4_fu_116 xor ap_const_lv13_1000);
    zext_ln160_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_fu_120),32));
    zext_ln162_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln162_fu_273_p2),64));
    zext_ln163_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln163_fu_283_p2),64));
    zext_ln164_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln164_fu_298_p2),64));
    zext_ln17_11_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_7_fu_419_p4),32));
    zext_ln17_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_fu_328_p1),32));
    zext_ln18_5_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_4_fu_433_p4),32));
    zext_ln18_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_fu_340_p4),32));
    zext_ln19_8_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_8),32));
    zext_ln19_9_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_9),32));
    zext_ln19_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_fu_332_p1),32));
    zext_ln20_7_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln20_fu_447_p1),32));
    zext_ln20_8_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_8_fu_566_p4),31));
    zext_ln20_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_fu_358_p4),32));
    zext_ln28_11_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_7_fu_508_p3),64));
    zext_ln28_12_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_8_fu_613_p3),64));
    zext_ln28_13_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_8_fu_629_p3),64));
    zext_ln28_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_402_p3),64));
    zext_ln30_17_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp2_7_fu_459_p2),33));
    zext_ln30_18_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp3_7_fu_465_p2),33));
    zext_ln64_1_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln64_1),32));
    zext_ln89_1_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln89_1),64));
    zext_ln90_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln90_1_fu_657_p3),64));
end behav;
