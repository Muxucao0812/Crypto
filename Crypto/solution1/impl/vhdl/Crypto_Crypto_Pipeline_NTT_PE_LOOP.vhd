-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto_Crypto_Pipeline_NTT_PE_LOOP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    hf : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln108_2 : IN STD_LOGIC_VECTOR (11 downto 0);
    DataTemp_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    DataTemp_ce0 : OUT STD_LOGIC;
    DataTemp_we0 : OUT STD_LOGIC;
    DataTemp_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataTemp_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataTemp_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    DataTemp_ce1 : OUT STD_LOGIC;
    DataTemp_we1 : OUT STD_LOGIC;
    DataTemp_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataTemp_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln108_1 : IN STD_LOGIC_VECTOR (11 downto 0);
    trunc_ln8 : IN STD_LOGIC_VECTOR (12 downto 0);
    m : IN STD_LOGIC_VECTOR (19 downto 0);
    zext_ln19_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    mod_r : IN STD_LOGIC_VECTOR (30 downto 0);
    zext_ln19_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    zext_ln89 : IN STD_LOGIC_VECTOR (30 downto 0);
    zext_ln64 : IN STD_LOGIC_VECTOR (30 downto 0);
    twiddle_ram_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    twiddle_ram_ce0 : OUT STD_LOGIC;
    twiddle_ram_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Crypto_Crypto_Pipeline_NTT_PE_LOOP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln110_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln64_cast_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln64_cast_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln89_cast_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln89_cast_reg_831 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_6_cast_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_6_cast_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_5_cast_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_5_cast_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_reg_851 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal res_1_reg_856 : STD_LOGIC_VECTOR (11 downto 0);
    signal input2_high_5_reg_866 : STD_LOGIC_VECTOR (3 downto 0);
    signal u_reg_871 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal v_fu_702_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_reg_876 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln112_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln113_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul_fu_114 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln114_fu_291_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_118 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln110_fu_258_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln110_fu_249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln110_fu_267_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln112_fu_271_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln113_fu_281_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal input1_low_fu_320_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_fu_332_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_fu_324_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_fu_350_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp1_fu_364_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln19_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_fu_364_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln17_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_fu_370_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln20_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_fu_370_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_fu_376_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_fu_376_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln18_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_761_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum2_fu_394_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln28_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_fu_382_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_fu_405_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal input1_low_5_fu_411_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_3_fu_425_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln20_fu_439_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp1_5_fu_446_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln17_8_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_5_fu_446_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp2_5_fu_451_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp2_5_fu_451_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln20_5_fu_442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_5_fu_457_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln18_4_fu_435_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_5_fu_457_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_5_fu_462_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_5_fu_462_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_5_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_5_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_5_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_5_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln30_12_fu_480_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln30_13_fu_484_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln30_5_fu_494_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum2_5_fu_500_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal trunc_ln29_fu_468_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln30_7_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_8_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_5_fu_472_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_520_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_fu_512_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln74_fu_534_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal res_mult_shift_part_fu_540_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_6_fu_558_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp1_6_fu_571_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp1_6_fu_571_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_mult_shift_fu_528_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_576_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp3_6_fu_594_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp3_6_fu_594_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_6_fu_599_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln20_6_fu_567_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal temp4_6_fu_599_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_6_fu_599_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal temp1_6_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_6_fu_605_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal temp3_6_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_770_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum2_6_fu_621_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln28_9_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_shift_fu_632_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_10_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln85_fu_638_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_649_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln90_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln89_fu_644_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln90_fu_660_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln92_5_fu_686_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln92_6_fu_690_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_666_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln92_fu_682_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln92_fu_694_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_fu_710_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln43_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln44_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln53_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_739_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln56_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_761_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_761_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_761_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_770_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_770_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_761_p20 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_770_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_770_p20 : STD_LOGIC_VECTOR (32 downto 0);
    signal temp1_6_fu_571_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_6_fu_594_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_6_fu_599_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Crypto_mul_16ns_16ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Crypto_mul_15ns_16ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Crypto_mac_muladd_16ns_16ns_32ns_33_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Crypto_mac_muladd_16ns_15ns_32ns_33_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Crypto_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16ns_16ns_32_1_1_U71 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp1_fu_364_p0,
        din1 => temp1_fu_364_p1,
        dout => temp1_fu_364_p2);

    mul_16ns_16ns_32_1_1_U72 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp2_fu_370_p0,
        din1 => temp2_fu_370_p1,
        dout => temp2_fu_370_p2);

    mul_16ns_16ns_32_1_1_U73 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp4_fu_376_p0,
        din1 => temp4_fu_376_p1,
        dout => temp4_fu_376_p2);

    mul_16ns_16ns_32_1_1_U74 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp1_5_fu_446_p0,
        din1 => temp1_5_fu_446_p1,
        dout => temp1_5_fu_446_p2);

    mul_16ns_16ns_32_1_1_U75 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp2_5_fu_451_p0,
        din1 => temp2_5_fu_451_p1,
        dout => temp2_5_fu_451_p2);

    mul_16ns_16ns_32_1_1_U76 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp3_5_fu_457_p0,
        din1 => temp3_5_fu_457_p1,
        dout => temp3_5_fu_457_p2);

    mul_16ns_16ns_32_1_1_U77 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp4_5_fu_462_p0,
        din1 => temp4_5_fu_462_p1,
        dout => temp4_5_fu_462_p2);

    mul_16ns_16ns_32_1_1_U78 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp1_6_fu_571_p0,
        din1 => temp1_6_fu_571_p1,
        dout => temp1_6_fu_571_p2);

    mul_16ns_16ns_32_1_1_U79 : component Crypto_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp3_6_fu_594_p0,
        din1 => temp3_6_fu_594_p1,
        dout => temp3_6_fu_594_p2);

    mul_15ns_16ns_31_1_1_U80 : component Crypto_mul_15ns_16ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => temp4_6_fu_599_p0,
        din1 => temp4_6_fu_599_p1,
        dout => temp4_6_fu_599_p2);

    mac_muladd_16ns_16ns_32ns_33_1_1_U81 : component Crypto_mac_muladd_16ns_16ns_32ns_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        din0 => grp_fu_761_p0,
        din1 => grp_fu_761_p1,
        din2 => grp_fu_761_p2,
        dout => grp_fu_761_p3);

    mac_muladd_16ns_15ns_32ns_33_1_1_U82 : component Crypto_mac_muladd_16ns_15ns_32ns_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        din0 => grp_fu_770_p0,
        din1 => grp_fu_770_p1,
        din2 => grp_fu_770_p2,
        dout => grp_fu_770_p3);

    flow_control_loop_pipe_sequential_init_U : component Crypto_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    j_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                j_fu_118 <= ap_const_lv31_0;
            elsif (((icmp_ln110_fu_253_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                j_fu_118 <= add_ln110_fu_258_p2;
            end if; 
        end if;
    end process;

    phi_mul_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                phi_mul_fu_114 <= ap_const_lv13_0;
            elsif (((icmp_ln110_fu_253_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                phi_mul_fu_114 <= add_ln114_fu_291_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln110_fu_253_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                input2_high_5_reg_866 <= m(19 downto 16);
                res_1_reg_856 <= zext_ln113_fu_286_p1(12 - 1 downto 0);
                res_reg_851 <= zext_ln112_fu_276_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                u_reg_871 <= DataTemp_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                v_reg_876 <= v_fu_702_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln19_5_cast_reg_842(15 downto 0) <= zext_ln19_5_cast_fu_232_p1(15 downto 0);
                    zext_ln19_6_cast_reg_836(15 downto 0) <= zext_ln19_6_cast_fu_228_p1(15 downto 0);
                    zext_ln64_cast_reg_824(30 downto 0) <= zext_ln64_cast_fu_220_p1(30 downto 0);
                    zext_ln89_cast_reg_831(30 downto 0) <= zext_ln89_cast_fu_224_p1(30 downto 0);
            end if;
        end if;
    end process;
    zext_ln64_cast_reg_824(31) <= '0';
    zext_ln89_cast_reg_831(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln19_6_cast_reg_836(31 downto 16) <= "0000000000000000";
    zext_ln19_5_cast_reg_842(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    DataTemp_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, res_1_reg_856, ap_block_pp0_stage1, zext_ln113_fu_286_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataTemp_address0 <= res_1_reg_856;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            DataTemp_address0 <= zext_ln113_fu_286_p1(12 - 1 downto 0);
        else 
            DataTemp_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    DataTemp_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, res_reg_851, zext_ln112_fu_276_p1, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                DataTemp_address1 <= res_reg_851;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                DataTemp_address1 <= zext_ln112_fu_276_p1(12 - 1 downto 0);
            else 
                DataTemp_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            DataTemp_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    DataTemp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            DataTemp_ce0 <= ap_const_logic_1;
        else 
            DataTemp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DataTemp_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            DataTemp_ce1 <= ap_const_logic_1;
        else 
            DataTemp_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    DataTemp_d0 <= 
        add_ln56_fu_747_p2 when (tmp_7_fu_739_p3(0) = '1') else 
        sub_ln53_fu_735_p2;
    DataTemp_d1 <= 
        add_ln40_fu_710_p2 when (icmp_ln43_fu_716_p2(0) = '1') else 
        sub_ln44_fu_721_p2;

    DataTemp_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataTemp_we0 <= ap_const_logic_1;
        else 
            DataTemp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DataTemp_we1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            DataTemp_we1 <= ap_const_logic_1;
        else 
            DataTemp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln110_fu_258_p2 <= std_logic_vector(unsigned(j_fu_118) + unsigned(ap_const_lv31_1));
    add_ln112_fu_271_p2 <= std_logic_vector(unsigned(trunc_ln110_fu_267_p1) + unsigned(trunc_ln108_2));
    add_ln113_fu_281_p2 <= std_logic_vector(unsigned(add_ln112_fu_271_p2) + unsigned(trunc_ln108_1));
    add_ln114_fu_291_p2 <= std_logic_vector(unsigned(phi_mul_fu_114) + unsigned(trunc_ln8));
    add_ln30_5_fu_494_p2 <= std_logic_vector(unsigned(zext_ln30_12_fu_480_p1) + unsigned(zext_ln30_13_fu_484_p1));
    add_ln30_7_fu_488_p2 <= std_logic_vector(unsigned(temp2_5_fu_451_p2) + unsigned(temp3_5_fu_457_p2));
    add_ln40_fu_710_p2 <= std_logic_vector(unsigned(DataTemp_q1) + unsigned(v_fu_702_p3));
    add_ln56_fu_747_p2 <= std_logic_vector(unsigned(sub_ln53_fu_735_p2) + unsigned(zext_ln64_cast_reg_824));
    add_ln74_fu_534_p2 <= std_logic_vector(unsigned(trunc_ln_fu_520_p3) + unsigned(tmp_fu_512_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln110_fu_253_p2)
    begin
        if (((icmp_ln110_fu_253_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_761_p0 <= zext_ln19_fu_346_p1(16 - 1 downto 0);
    grp_fu_761_p1 <= zext_ln18_fu_342_p1(16 - 1 downto 0);
    grp_fu_761_p2 <= grp_fu_761_p20(32 - 1 downto 0);
    grp_fu_761_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp2_fu_370_p2),33));
    grp_fu_770_p0 <= grp_fu_770_p00(16 - 1 downto 0);
    grp_fu_770_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_shift_part_fu_540_p4),31));
    grp_fu_770_p1 <= zext_ln20_6_fu_567_p1(15 - 1 downto 0);
    grp_fu_770_p2 <= grp_fu_770_p20(32 - 1 downto 0);
    grp_fu_770_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp3_6_fu_594_p2),33));
    icmp_ln110_fu_253_p2 <= "1" when (signed(zext_ln110_fu_249_p1) < signed(hf)) else "0";
    icmp_ln43_fu_716_p2 <= "1" when (signed(add_ln40_fu_710_p2) < signed(zext_ln64_cast_reg_824)) else "0";
    input1_high_3_fu_425_p4 <= res_mult_fu_405_p2(61 downto 46);
    input1_high_fu_332_p4 <= DataTemp_q0(31 downto 16);
    input1_low_5_fu_411_p4 <= res_mult_fu_405_p2(45 downto 30);
    input1_low_fu_320_p1 <= DataTemp_q0(16 - 1 downto 0);
    input2_high_6_fu_558_p4 <= mod_r(30 downto 16);
    input2_high_fu_350_p4 <= twiddle_ram_q0(31 downto 16);
    input2_low_fu_324_p1 <= twiddle_ram_q0(16 - 1 downto 0);
    res_mult_fu_405_p2 <= std_logic_vector(unsigned(zext_ln28_fu_401_p1) + unsigned(sum1_fu_382_p3));
    res_mult_shift_fu_528_p2 <= std_logic_vector(unsigned(zext_ln28_8_fu_508_p1) + unsigned(sum1_5_fu_472_p3));
    res_mult_shift_part_fu_540_p4 <= add_ln74_fu_534_p2(47 downto 32);
    res_shift_fu_632_p2 <= std_logic_vector(unsigned(res_mult_fu_405_p2) - unsigned(zext_ln28_9_fu_613_p1));
    select_ln92_fu_694_p3 <= 
        trunc_ln92_5_fu_686_p1 when (tmp_6_fu_674_p3(0) = '1') else 
        trunc_ln92_6_fu_690_p1;
        sext_ln20_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input2_high_5_reg_866),16));

    shl_ln_fu_649_p3 <= (mod_r & ap_const_lv1_0);
    sub_ln44_fu_721_p2 <= std_logic_vector(unsigned(add_ln40_fu_710_p2) - unsigned(zext_ln64_cast_reg_824));
    sub_ln53_fu_735_p2 <= std_logic_vector(unsigned(u_reg_871) - unsigned(v_reg_876));
    sub_ln85_fu_638_p2 <= std_logic_vector(unsigned(res_shift_fu_632_p2) - unsigned(zext_ln28_10_fu_628_p1));
    sub_ln89_fu_644_p2 <= std_logic_vector(unsigned(sub_ln85_fu_638_p2) - unsigned(zext_ln89_cast_reg_831));
    sub_ln90_fu_660_p2 <= std_logic_vector(unsigned(sub_ln85_fu_638_p2) - unsigned(zext_ln90_fu_656_p1));
    sum1_5_fu_472_p3 <= (temp4_5_fu_462_p2 & temp1_5_fu_446_p2);
    sum1_6_fu_605_p3 <= (temp4_6_fu_599_p2 & temp1_6_fu_571_p2);
    sum1_fu_382_p3 <= (temp4_fu_376_p2 & temp1_fu_364_p2);
    sum2_5_fu_500_p3 <= (add_ln30_5_fu_494_p2 & ap_const_lv16_0);
    sum2_6_fu_621_p3 <= (grp_fu_770_p3 & ap_const_lv16_0);
    sum2_fu_394_p3 <= (grp_fu_761_p3 & ap_const_lv16_0);
    temp1_5_fu_446_p0 <= zext_ln17_8_fu_421_p1(16 - 1 downto 0);
    temp1_5_fu_446_p1 <= zext_ln19_5_cast_reg_842(16 - 1 downto 0);
    temp1_6_fu_571_p0 <= temp1_6_fu_571_p00(16 - 1 downto 0);
    temp1_6_fu_571_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_shift_part_fu_540_p4),32));
    temp1_6_fu_571_p1 <= zext_ln19_6_cast_reg_836(16 - 1 downto 0);
    temp1_fu_364_p0 <= zext_ln19_fu_346_p1(16 - 1 downto 0);
    temp1_fu_364_p1 <= zext_ln17_fu_328_p1(16 - 1 downto 0);
    temp2_5_fu_451_p0 <= zext_ln17_8_fu_421_p1(16 - 1 downto 0);
    temp2_5_fu_451_p1 <= zext_ln20_5_fu_442_p1(16 - 1 downto 0);
    temp2_fu_370_p0 <= zext_ln20_fu_360_p1(16 - 1 downto 0);
    temp2_fu_370_p1 <= zext_ln17_fu_328_p1(16 - 1 downto 0);
    temp3_5_fu_457_p0 <= zext_ln18_4_fu_435_p1(16 - 1 downto 0);
    temp3_5_fu_457_p1 <= zext_ln19_5_cast_reg_842(16 - 1 downto 0);
    temp3_6_fu_594_p0 <= zext_ln19_6_cast_reg_836(16 - 1 downto 0);
    temp3_6_fu_594_p1 <= temp3_6_fu_594_p10(16 - 1 downto 0);
    temp3_6_fu_594_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_fu_576_p4),32));
    temp4_5_fu_462_p0 <= zext_ln18_4_fu_435_p1(16 - 1 downto 0);
    temp4_5_fu_462_p1 <= zext_ln20_5_fu_442_p1(16 - 1 downto 0);
    temp4_6_fu_599_p0 <= zext_ln20_6_fu_567_p1(15 - 1 downto 0);
    temp4_6_fu_599_p1 <= temp4_6_fu_599_p10(16 - 1 downto 0);
    temp4_6_fu_599_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_fu_576_p4),31));
    temp4_fu_376_p0 <= zext_ln20_fu_360_p1(16 - 1 downto 0);
    temp4_fu_376_p1 <= zext_ln18_fu_342_p1(16 - 1 downto 0);
    tmp_5_fu_666_p3 <= sub_ln89_fu_644_p2(63 downto 63);
    tmp_6_fu_674_p3 <= sub_ln90_fu_660_p2(63 downto 63);
    tmp_7_fu_739_p3 <= sub_ln53_fu_735_p2(31 downto 31);
    tmp_fu_512_p3 <= (trunc_ln29_fu_468_p1 & temp1_5_fu_446_p2);
    trunc_ln110_fu_267_p1 <= j_fu_118(12 - 1 downto 0);
    trunc_ln1_fu_576_p4 <= res_mult_shift_fu_528_p2(63 downto 48);
    trunc_ln29_fu_468_p1 <= temp4_5_fu_462_p2(16 - 1 downto 0);
    trunc_ln92_5_fu_686_p1 <= sub_ln89_fu_644_p2(32 - 1 downto 0);
    trunc_ln92_6_fu_690_p1 <= sub_ln90_fu_660_p2(32 - 1 downto 0);
    trunc_ln92_fu_682_p1 <= sub_ln85_fu_638_p2(32 - 1 downto 0);
    trunc_ln_fu_520_p3 <= (add_ln30_7_fu_488_p2 & ap_const_lv16_0);
    twiddle_ram_address0 <= zext_ln114_fu_296_p1(13 - 1 downto 0);

    twiddle_ram_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            twiddle_ram_ce0 <= ap_const_logic_1;
        else 
            twiddle_ram_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v_fu_702_p3 <= 
        trunc_ln92_fu_682_p1 when (tmp_5_fu_666_p3(0) = '1') else 
        select_ln92_fu_694_p3;
    zext_ln110_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_118),32));
    zext_ln112_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln112_fu_271_p2),64));
    zext_ln113_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln113_fu_281_p2),64));
    zext_ln114_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_fu_114),64));
    zext_ln17_8_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_5_fu_411_p4),32));
    zext_ln17_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_fu_320_p1),32));
    zext_ln18_4_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_3_fu_425_p4),32));
    zext_ln18_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_fu_332_p4),32));
    zext_ln19_5_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_5),32));
    zext_ln19_6_cast_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_6),32));
    zext_ln19_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_fu_324_p1),32));
    zext_ln20_5_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln20_fu_439_p1),32));
    zext_ln20_6_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_6_fu_558_p4),31));
    zext_ln20_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_fu_350_p4),32));
    zext_ln28_10_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_6_fu_621_p3),64));
    zext_ln28_8_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_5_fu_500_p3),64));
    zext_ln28_9_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_6_fu_605_p3),64));
    zext_ln28_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_394_p3),64));
    zext_ln30_12_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp2_5_fu_451_p2),33));
    zext_ln30_13_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp3_5_fu_457_p2),33));
    zext_ln64_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln64),32));
    zext_ln89_cast_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln89),64));
    zext_ln90_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_649_p3),64));
end behav;
