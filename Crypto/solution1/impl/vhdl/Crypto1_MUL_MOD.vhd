-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto1_MUL_MOD is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input1_val : IN STD_LOGIC_VECTOR (31 downto 0);
    input2_val : IN STD_LOGIC_VECTOR (31 downto 0);
    MOD_INDEX : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of Crypto1_MUL_MOD is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv20_F7FFC : STD_LOGIC_VECTOR (19 downto 0) := "11110111111111111100";
    constant ap_const_lv20_B8010 : STD_LOGIC_VECTOR (19 downto 0) := "10111000000000010000";
    constant ap_const_lv20_8003B : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000111011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv31_40002001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000010000000000001";
    constant ap_const_lv31_40012001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000010010000000000001";
    constant ap_const_lv31_40020001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000100000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal MOD_INDEX_read_reg_621 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal MOD_INDEX_read_reg_621_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_621_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_621_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_621_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_621_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_621_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_621_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_621_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_621_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal input2_low_fu_102_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_reg_627 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_low_fu_106_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_low_reg_632 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_fu_114_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_reg_637 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_fu_132_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_reg_642 : STD_LOGIC_VECTOR (15 downto 0);
    signal ac_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_reg_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_reg_652_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_reg_652_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_fu_174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_reg_658_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_reg_658_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_590_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal sub_ln63_reg_669 : STD_LOGIC_VECTOR (34 downto 0);
    signal res_mult_fu_213_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_674 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_674_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_674_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_674_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_674_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_674_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_674_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_674_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_674_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_674_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal input1_low_3_reg_679 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_low_3_reg_679_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_2_reg_685 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_2_reg_685_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_3_fu_250_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_3_reg_691 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln47_fu_274_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln47_reg_696 : STD_LOGIC_VECTOR (15 downto 0);
    signal ac_3_fu_304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_3_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_3_reg_706_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_3_reg_706_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_3_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_3_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_3_reg_712_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_3_reg_712_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln62_fu_316_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln62_reg_719 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln62_reg_719_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_600_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal sub_ln63_3_reg_729 : STD_LOGIC_VECTOR (34 downto 0);
    signal res_mult_shift_part_reg_734 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_mult_shift_part_reg_734_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal res_mult_shift_part_reg_734_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln45_5_reg_740 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln45_5_reg_740_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal mod_fu_402_p5 : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_746 : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_746_pp0_iter11_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_746_pp0_iter12_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_746_pp0_iter13_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_746_pp0_iter14_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal input2_low_4_fu_413_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_4_reg_752 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_4_fu_427_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal input2_high_4_reg_757 : STD_LOGIC_VECTOR (14 downto 0);
    signal ac_4_fu_463_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ac_4_reg_767 : STD_LOGIC_VECTOR (30 downto 0);
    signal ac_4_reg_767_pp0_iter12_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal ac_4_reg_767_pp0_iter13_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal bd_4_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_4_reg_773 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_4_reg_773_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_4_reg_773_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_611_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal sub_ln63_4_reg_784 : STD_LOGIC_VECTOR (34 downto 0);
    signal sub_ln142_fu_517_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln142_reg_789 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln45_fu_124_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln44_6_fu_110_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal a_plus_b_fu_146_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ac_fu_168_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ac_fu_168_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bd_fu_174_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bd_fu_174_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln63_20_fu_180_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln63_21_fu_183_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln63_fu_186_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum2_fu_202_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal sum1_fu_196_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln63_fu_209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_239_p5 : STD_LOGIC_VECTOR (19 downto 0);
    signal input2_high_3_fu_264_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln47_9_fu_278_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln46_8_fu_260_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal c_plus_d_3_fu_282_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ac_3_fu_304_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ac_3_fu_304_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bd_3_fu_310_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bd_3_fu_310_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln63_26_fu_320_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln63_27_fu_323_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln63_3_fu_326_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln65_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_345_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_fu_336_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln131_fu_353_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sum2_3_fu_375_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal sext_ln63_3_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_3_fu_369_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_shift_fu_386_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_6_fu_437_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln46_10_fu_423_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal c_plus_d_4_fu_441_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ac_4_fu_463_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal ac_4_fu_463_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bd_4_fu_469_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bd_4_fu_469_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln63_32_fu_475_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln63_33_fu_478_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln63_4_fu_481_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum1_4_fu_491_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sum2_4_fu_501_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal zext_ln62_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_shift_fu_512_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln63_4_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln146_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln147_cast_fu_531_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln147_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln146_fu_526_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln147_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_555_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln149_3_fu_566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln149_4_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_547_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln149_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln149_fu_574_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_590_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_590_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_590_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_590_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_600_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_600_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_600_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_600_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_611_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_611_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_611_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_611_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln149_2_fu_582_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_590_ce : STD_LOGIC;
    signal grp_fu_600_ce : STD_LOGIC;
    signal grp_fu_611_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal input1_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal MOD_INDEX_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_3_fu_304_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_3_fu_304_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_4_fu_463_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal ac_4_fu_463_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal ac_fu_168_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_fu_168_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_3_fu_310_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_3_fu_310_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_4_fu_469_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_4_fu_469_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_fu_174_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_fu_174_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_590_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_590_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_590_p20 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_590_p30 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_600_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_600_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_600_p20 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_600_p30 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_611_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_611_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_611_p20 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_611_p30 : STD_LOGIC_VECTOR (34 downto 0);

    component Crypto1_mul_16ns_16ns_32_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Crypto1_mux_3_2_20_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component Crypto1_mux_3_2_31_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Crypto1_mul_15ns_16ns_31_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Crypto1_ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        din3 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;



begin
    mul_16ns_16ns_32_1_0_U39 : component Crypto1_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => ac_fu_168_p0,
        din1 => ac_fu_168_p1,
        dout => ac_fu_168_p2);

    mul_16ns_16ns_32_1_0_U40 : component Crypto1_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bd_fu_174_p0,
        din1 => bd_fu_174_p1,
        dout => bd_fu_174_p2);

    mux_3_2_20_1_0_U41 : component Crypto1_mux_3_2_20_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => ap_const_lv20_F7FFC,
        din1 => ap_const_lv20_B8010,
        din2 => ap_const_lv20_8003B,
        din3 => MOD_INDEX_read_reg_621_pp0_iter4_reg,
        dout => m_fu_239_p5);

    mul_16ns_16ns_32_1_0_U42 : component Crypto1_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => ac_3_fu_304_p0,
        din1 => ac_3_fu_304_p1,
        dout => ac_3_fu_304_p2);

    mul_16ns_16ns_32_1_0_U43 : component Crypto1_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bd_3_fu_310_p0,
        din1 => bd_3_fu_310_p1,
        dout => bd_3_fu_310_p2);

    mux_3_2_31_1_0_U44 : component Crypto1_mux_3_2_31_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 2,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_40002001,
        din1 => ap_const_lv31_40012001,
        din2 => ap_const_lv31_40020001,
        din3 => MOD_INDEX_read_reg_621_pp0_iter9_reg,
        dout => mod_fu_402_p5);

    mul_15ns_16ns_31_1_0_U45 : component Crypto1_mul_15ns_16ns_31_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => ac_4_fu_463_p0,
        din1 => ac_4_fu_463_p1,
        dout => ac_4_fu_463_p2);

    mul_16ns_16ns_32_1_0_U46 : component Crypto1_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bd_4_fu_469_p0,
        din1 => bd_4_fu_469_p1,
        dout => bd_4_fu_469_p2);

    ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_0_U47 : component Crypto1_ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 17,
        din3_WIDTH => 33,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_590_p0,
        din1 => grp_fu_590_p1,
        din2 => grp_fu_590_p2,
        din3 => grp_fu_590_p3,
        ce => grp_fu_590_ce,
        dout => grp_fu_590_p4);

    ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_0_U48 : component Crypto1_ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 17,
        din3_WIDTH => 33,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_600_p0,
        din1 => grp_fu_600_p1,
        din2 => grp_fu_600_p2,
        din3 => grp_fu_600_p3,
        ce => grp_fu_600_ce,
        dout => grp_fu_600_p4);

    ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_0_U49 : component Crypto1_ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 17,
        din3_WIDTH => 33,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_611_p0,
        din1 => grp_fu_611_p1,
        din2 => grp_fu_611_p2,
        din3 => grp_fu_611_p3,
        ce => grp_fu_611_ce,
        dout => grp_fu_611_p4);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                MOD_INDEX_int_reg <= MOD_INDEX;
                input1_val_int_reg <= input1_val;
                input2_val_int_reg <= input2_val;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                MOD_INDEX_read_reg_621 <= MOD_INDEX_int_reg;
                MOD_INDEX_read_reg_621_pp0_iter1_reg <= MOD_INDEX_read_reg_621;
                MOD_INDEX_read_reg_621_pp0_iter2_reg <= MOD_INDEX_read_reg_621_pp0_iter1_reg;
                MOD_INDEX_read_reg_621_pp0_iter3_reg <= MOD_INDEX_read_reg_621_pp0_iter2_reg;
                MOD_INDEX_read_reg_621_pp0_iter4_reg <= MOD_INDEX_read_reg_621_pp0_iter3_reg;
                MOD_INDEX_read_reg_621_pp0_iter5_reg <= MOD_INDEX_read_reg_621_pp0_iter4_reg;
                MOD_INDEX_read_reg_621_pp0_iter6_reg <= MOD_INDEX_read_reg_621_pp0_iter5_reg;
                MOD_INDEX_read_reg_621_pp0_iter7_reg <= MOD_INDEX_read_reg_621_pp0_iter6_reg;
                MOD_INDEX_read_reg_621_pp0_iter8_reg <= MOD_INDEX_read_reg_621_pp0_iter7_reg;
                MOD_INDEX_read_reg_621_pp0_iter9_reg <= MOD_INDEX_read_reg_621_pp0_iter8_reg;
                ac_3_reg_706 <= ac_3_fu_304_p2;
                ac_3_reg_706_pp0_iter7_reg <= ac_3_reg_706;
                ac_3_reg_706_pp0_iter8_reg <= ac_3_reg_706_pp0_iter7_reg;
                ac_4_reg_767 <= ac_4_fu_463_p2;
                ac_4_reg_767_pp0_iter12_reg <= ac_4_reg_767;
                ac_4_reg_767_pp0_iter13_reg <= ac_4_reg_767_pp0_iter12_reg;
                ac_reg_652 <= ac_fu_168_p2;
                ac_reg_652_pp0_iter2_reg <= ac_reg_652;
                ac_reg_652_pp0_iter3_reg <= ac_reg_652_pp0_iter2_reg;
                bd_3_reg_712 <= bd_3_fu_310_p2;
                bd_3_reg_712_pp0_iter7_reg <= bd_3_reg_712;
                bd_3_reg_712_pp0_iter8_reg <= bd_3_reg_712_pp0_iter7_reg;
                bd_4_reg_773 <= bd_4_fu_469_p2;
                bd_4_reg_773_pp0_iter12_reg <= bd_4_reg_773;
                bd_4_reg_773_pp0_iter13_reg <= bd_4_reg_773_pp0_iter12_reg;
                bd_reg_658 <= bd_fu_174_p2;
                bd_reg_658_pp0_iter2_reg <= bd_reg_658;
                bd_reg_658_pp0_iter3_reg <= bd_reg_658_pp0_iter2_reg;
                input1_high_2_reg_685 <= res_mult_fu_213_p2(61 downto 46);
                input1_high_2_reg_685_pp0_iter5_reg <= input1_high_2_reg_685;
                input1_high_reg_637 <= input1_val_int_reg(31 downto 16);
                input1_low_3_reg_679 <= res_mult_fu_213_p2(45 downto 30);
                input1_low_3_reg_679_pp0_iter5_reg <= input1_low_3_reg_679;
                input1_low_reg_632 <= input1_low_fu_106_p1;
                input2_high_4_reg_757 <= mod_fu_402_p5(30 downto 16);
                input2_high_reg_642 <= input2_val_int_reg(31 downto 16);
                input2_low_3_reg_691 <= input2_low_3_fu_250_p1;
                input2_low_4_reg_752 <= input2_low_4_fu_413_p1;
                input2_low_reg_627 <= input2_low_fu_102_p1;
                mod_reg_746 <= mod_fu_402_p5;
                mod_reg_746_pp0_iter11_reg <= mod_reg_746;
                mod_reg_746_pp0_iter12_reg <= mod_reg_746_pp0_iter11_reg;
                mod_reg_746_pp0_iter13_reg <= mod_reg_746_pp0_iter12_reg;
                mod_reg_746_pp0_iter14_reg <= mod_reg_746_pp0_iter13_reg;
                res_mult_reg_674 <= res_mult_fu_213_p2;
                res_mult_reg_674_pp0_iter10_reg <= res_mult_reg_674_pp0_iter9_reg;
                res_mult_reg_674_pp0_iter11_reg <= res_mult_reg_674_pp0_iter10_reg;
                res_mult_reg_674_pp0_iter12_reg <= res_mult_reg_674_pp0_iter11_reg;
                res_mult_reg_674_pp0_iter13_reg <= res_mult_reg_674_pp0_iter12_reg;
                res_mult_reg_674_pp0_iter5_reg <= res_mult_reg_674;
                res_mult_reg_674_pp0_iter6_reg <= res_mult_reg_674_pp0_iter5_reg;
                res_mult_reg_674_pp0_iter7_reg <= res_mult_reg_674_pp0_iter6_reg;
                res_mult_reg_674_pp0_iter8_reg <= res_mult_reg_674_pp0_iter7_reg;
                res_mult_reg_674_pp0_iter9_reg <= res_mult_reg_674_pp0_iter8_reg;
                res_mult_shift_part_reg_734 <= add_ln131_fu_353_p2(47 downto 32);
                res_mult_shift_part_reg_734_pp0_iter10_reg <= res_mult_shift_part_reg_734_pp0_iter9_reg;
                res_mult_shift_part_reg_734_pp0_iter9_reg <= res_mult_shift_part_reg_734;
                sext_ln47_reg_696 <= sext_ln47_fu_274_p1;
                sub_ln142_reg_789 <= sub_ln142_fu_517_p2;
                sub_ln63_3_reg_729 <= grp_fu_600_p4;
                sub_ln63_4_reg_784 <= grp_fu_611_p4;
                sub_ln63_reg_669 <= grp_fu_590_p4;
                trunc_ln45_5_reg_740 <= res_mult_shift_fu_386_p2(63 downto 48);
                trunc_ln45_5_reg_740_pp0_iter10_reg <= trunc_ln45_5_reg_740;
                trunc_ln62_reg_719 <= trunc_ln62_fu_316_p1;
                trunc_ln62_reg_719_pp0_iter7_reg <= trunc_ln62_reg_719;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln149_2_fu_582_p3;
            end if;
        end if;
    end process;
    a_plus_b_fu_146_p2 <= std_logic_vector(unsigned(zext_ln45_fu_124_p1) + unsigned(zext_ln44_6_fu_110_p1));
    ac_3_fu_304_p0 <= ac_3_fu_304_p00(16 - 1 downto 0);
    ac_3_fu_304_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_2_reg_685_pp0_iter5_reg),32));
    ac_3_fu_304_p1 <= ac_3_fu_304_p10(16 - 1 downto 0);
    ac_3_fu_304_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln47_reg_696),32));
    ac_4_fu_463_p0 <= ac_4_fu_463_p00(15 - 1 downto 0);
    ac_4_fu_463_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_4_reg_757),31));
    ac_4_fu_463_p1 <= ac_4_fu_463_p10(16 - 1 downto 0);
    ac_4_fu_463_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln45_5_reg_740_pp0_iter10_reg),31));
    ac_fu_168_p0 <= ac_fu_168_p00(16 - 1 downto 0);
    ac_fu_168_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_reg_642),32));
    ac_fu_168_p1 <= ac_fu_168_p10(16 - 1 downto 0);
    ac_fu_168_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_reg_637),32));
    add_ln131_fu_353_p2 <= std_logic_vector(unsigned(trunc_ln_fu_345_p3) + unsigned(tmp_fu_336_p3));
    add_ln63_3_fu_326_p2 <= std_logic_vector(unsigned(zext_ln63_26_fu_320_p1) + unsigned(zext_ln63_27_fu_323_p1));
    add_ln63_4_fu_481_p2 <= std_logic_vector(unsigned(zext_ln63_32_fu_475_p1) + unsigned(zext_ln63_33_fu_478_p1));
    add_ln63_fu_186_p2 <= std_logic_vector(unsigned(zext_ln63_20_fu_180_p1) + unsigned(zext_ln63_21_fu_183_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln149_2_fu_582_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln149_2_fu_582_p3;
        else 
            ap_return <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    bd_3_fu_310_p0 <= bd_3_fu_310_p00(16 - 1 downto 0);
    bd_3_fu_310_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_3_reg_679_pp0_iter5_reg),32));
    bd_3_fu_310_p1 <= bd_3_fu_310_p10(16 - 1 downto 0);
    bd_3_fu_310_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_3_reg_691),32));
    bd_4_fu_469_p0 <= bd_4_fu_469_p00(16 - 1 downto 0);
    bd_4_fu_469_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_shift_part_reg_734_pp0_iter10_reg),32));
    bd_4_fu_469_p1 <= bd_4_fu_469_p10(16 - 1 downto 0);
    bd_4_fu_469_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_4_reg_752),32));
    bd_fu_174_p0 <= bd_fu_174_p00(16 - 1 downto 0);
    bd_fu_174_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_reg_627),32));
    bd_fu_174_p1 <= bd_fu_174_p10(16 - 1 downto 0);
    bd_fu_174_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_reg_632),32));
    c_plus_d_3_fu_282_p2 <= std_logic_vector(unsigned(zext_ln47_9_fu_278_p1) + unsigned(zext_ln46_8_fu_260_p1));
    c_plus_d_4_fu_441_p2 <= std_logic_vector(unsigned(zext_ln47_6_fu_437_p1) + unsigned(zext_ln46_10_fu_423_p1));

    grp_fu_590_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_590_ce <= ap_const_logic_1;
        else 
            grp_fu_590_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_590_p0 <= grp_fu_590_p00(16 - 1 downto 0);
    grp_fu_590_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_fu_132_p4),17));
    grp_fu_590_p1 <= grp_fu_590_p10(16 - 1 downto 0);
    grp_fu_590_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_fu_102_p1),17));
    grp_fu_590_p2 <= grp_fu_590_p20(17 - 1 downto 0);
    grp_fu_590_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_plus_b_fu_146_p2),34));
    grp_fu_590_p3 <= grp_fu_590_p30(33 - 1 downto 0);
    grp_fu_590_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_fu_186_p2),35));

    grp_fu_600_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_600_ce <= ap_const_logic_1;
        else 
            grp_fu_600_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_600_p0 <= grp_fu_600_p00(16 - 1 downto 0);
    grp_fu_600_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_2_reg_685),17));
    grp_fu_600_p1 <= grp_fu_600_p10(16 - 1 downto 0);
    grp_fu_600_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_3_reg_679),17));
    grp_fu_600_p2 <= grp_fu_600_p20(17 - 1 downto 0);
    grp_fu_600_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_plus_d_3_fu_282_p2),34));
    grp_fu_600_p3 <= grp_fu_600_p30(33 - 1 downto 0);
    grp_fu_600_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_3_fu_326_p2),35));

    grp_fu_611_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_611_ce <= ap_const_logic_1;
        else 
            grp_fu_611_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_611_p0 <= grp_fu_611_p00(16 - 1 downto 0);
    grp_fu_611_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_shift_part_reg_734_pp0_iter9_reg),17));
    grp_fu_611_p1 <= grp_fu_611_p10(16 - 1 downto 0);
    grp_fu_611_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln45_5_reg_740),17));
    grp_fu_611_p2 <= grp_fu_611_p20(17 - 1 downto 0);
    grp_fu_611_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_plus_d_4_fu_441_p2),34));
    grp_fu_611_p3 <= grp_fu_611_p30(33 - 1 downto 0);
    grp_fu_611_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_4_fu_481_p2),35));
    input1_high_fu_114_p4 <= input1_val_int_reg(31 downto 16);
    input1_low_fu_106_p1 <= input1_val_int_reg(16 - 1 downto 0);
    input2_high_3_fu_264_p4 <= m_fu_239_p5(19 downto 16);
    input2_high_4_fu_427_p4 <= mod_fu_402_p5(30 downto 16);
    input2_high_fu_132_p4 <= input2_val_int_reg(31 downto 16);
    input2_low_3_fu_250_p1 <= m_fu_239_p5(16 - 1 downto 0);
    input2_low_4_fu_413_p1 <= mod_fu_402_p5(16 - 1 downto 0);
    input2_low_fu_102_p1 <= input2_val_int_reg(16 - 1 downto 0);
    res_mult_fu_213_p2 <= std_logic_vector(unsigned(sum1_fu_196_p3) + unsigned(sext_ln63_fu_209_p1));
    res_mult_shift_fu_386_p2 <= std_logic_vector(signed(sext_ln63_3_fu_382_p1) + signed(sum1_3_fu_369_p3));
    res_shift_fu_512_p2 <= std_logic_vector(unsigned(res_mult_reg_674_pp0_iter13_reg) - unsigned(zext_ln62_fu_497_p1));
    select_ln149_2_fu_582_p3 <= 
        trunc_ln149_fu_563_p1 when (tmp_45_fu_547_p3(0) = '1') else 
        select_ln149_fu_574_p3;
    select_ln149_fu_574_p3 <= 
        trunc_ln149_3_fu_566_p1 when (tmp_46_fu_555_p3(0) = '1') else 
        trunc_ln149_4_fu_570_p1;
        sext_ln47_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input2_high_3_fu_264_p4),16));

        sext_ln63_3_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_3_fu_375_p3),64));

        sext_ln63_4_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_4_fu_501_p3),64));

        sext_ln63_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_fu_202_p3),64));

    sub_ln142_fu_517_p2 <= std_logic_vector(unsigned(res_shift_fu_512_p2) - unsigned(sext_ln63_4_fu_508_p1));
    sub_ln146_fu_526_p2 <= std_logic_vector(unsigned(sub_ln142_reg_789) - unsigned(zext_ln146_fu_523_p1));
    sub_ln147_fu_542_p2 <= std_logic_vector(unsigned(sub_ln142_reg_789) - unsigned(zext_ln147_fu_538_p1));
    sum1_3_fu_369_p3 <= (ac_3_reg_706_pp0_iter8_reg & bd_3_reg_712_pp0_iter8_reg);
    sum1_4_fu_491_p3 <= (ac_4_reg_767_pp0_iter13_reg & bd_4_reg_773_pp0_iter13_reg);
    sum1_fu_196_p3 <= (ac_reg_652_pp0_iter3_reg & bd_reg_658_pp0_iter3_reg);
    sum2_3_fu_375_p3 <= (sub_ln63_3_reg_729 & ap_const_lv16_0);
    sum2_4_fu_501_p3 <= (sub_ln63_4_reg_784 & ap_const_lv16_0);
    sum2_fu_202_p3 <= (sub_ln63_reg_669 & ap_const_lv16_0);
    tmp_45_fu_547_p3 <= sub_ln146_fu_526_p2(63 downto 63);
    tmp_46_fu_555_p3 <= sub_ln147_fu_542_p2(63 downto 63);
    tmp_fu_336_p3 <= (trunc_ln62_reg_719_pp0_iter7_reg & bd_3_reg_712_pp0_iter7_reg);
    trunc_ln149_3_fu_566_p1 <= sub_ln146_fu_526_p2(32 - 1 downto 0);
    trunc_ln149_4_fu_570_p1 <= sub_ln147_fu_542_p2(32 - 1 downto 0);
    trunc_ln149_fu_563_p1 <= sub_ln142_reg_789(32 - 1 downto 0);
    trunc_ln62_fu_316_p1 <= ac_3_fu_304_p2(16 - 1 downto 0);
    trunc_ln65_fu_342_p1 <= grp_fu_600_p4(32 - 1 downto 0);
    trunc_ln_fu_345_p3 <= (trunc_ln65_fu_342_p1 & ap_const_lv16_0);
    zext_ln146_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mod_reg_746_pp0_iter14_reg),64));
    zext_ln147_cast_fu_531_p3 <= (mod_reg_746_pp0_iter14_reg & ap_const_lv1_0);
    zext_ln147_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln147_cast_fu_531_p3),64));
    zext_ln44_6_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_fu_106_p1),17));
    zext_ln45_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_fu_114_p4),17));
    zext_ln46_10_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_4_fu_413_p1),17));
    zext_ln46_8_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_3_fu_250_p1),17));
    zext_ln47_6_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_4_fu_427_p4),17));
    zext_ln47_9_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln47_fu_274_p1),17));
    zext_ln62_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_4_fu_491_p3),64));
    zext_ln63_20_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ac_reg_652),33));
    zext_ln63_21_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bd_reg_658),33));
    zext_ln63_26_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ac_3_reg_706),33));
    zext_ln63_27_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bd_3_reg_712),33));
    zext_ln63_32_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ac_4_reg_767),33));
    zext_ln63_33_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bd_4_reg_773),33));
end behav;
