-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto1_MUL_MOD_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input1_val : IN STD_LOGIC_VECTOR (31 downto 0);
    input2_val : IN STD_LOGIC_VECTOR (31 downto 0);
    MOD_INDEX : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of Crypto1_MUL_MOD_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv20_F7FFC : STD_LOGIC_VECTOR (19 downto 0) := "11110111111111111100";
    constant ap_const_lv20_B8010 : STD_LOGIC_VECTOR (19 downto 0) := "10111000000000010000";
    constant ap_const_lv20_8003B : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000111011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv31_40002001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000010000000000001";
    constant ap_const_lv31_40012001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000010010000000000001";
    constant ap_const_lv31_40020001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000100000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal MOD_INDEX_read_reg_616 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal MOD_INDEX_read_reg_616_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_616_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_616_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_616_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_616_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_616_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_616_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal input2_low_fu_106_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_reg_622 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_low_fu_110_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_low_reg_627 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_fu_118_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_reg_632 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_fu_136_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_reg_637 : STD_LOGIC_VECTOR (15 downto 0);
    signal ac_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_reg_647_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_reg_653_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal res_mult_fu_217_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_664 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_664_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_664_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_664_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_664_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_664_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_664_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_664_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal input1_low_1_reg_669 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_low_1_reg_669_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_1_reg_675 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_1_reg_675_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_1_fu_262_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_1_reg_681 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln47_fu_286_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln47_reg_686 : STD_LOGIC_VECTOR (15 downto 0);
    signal ac_1_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_1_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_1_reg_696_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_1_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_1_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_1_reg_702_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal res_mult_shift_part_reg_713 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_mult_shift_part_reg_713_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_719 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_719_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal mod_fu_387_p9 : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_725 : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_725_pp0_iter9_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_725_pp0_iter10_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_725_pp0_iter11_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal input2_low_2_fu_406_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_2_reg_731 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_2_fu_420_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal input2_high_2_reg_736 : STD_LOGIC_VECTOR (14 downto 0);
    signal ac_2_fu_456_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ac_2_reg_746 : STD_LOGIC_VECTOR (30 downto 0);
    signal ac_2_reg_746_pp0_iter10_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal bd_2_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_2_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_2_reg_752_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln142_fu_510_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln142_reg_763 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln45_1_fu_128_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln44_1_fu_114_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal a_plus_b_fu_150_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ac_fu_172_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ac_fu_172_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bd_fu_178_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bd_fu_178_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln63_4_fu_187_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln63_3_fu_184_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln63_fu_190_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_583_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal sum2_fu_206_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal sum1_fu_200_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln63_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_243_p7 : STD_LOGIC_VECTOR (19 downto 0);
    signal m_fu_243_p9 : STD_LOGIC_VECTOR (19 downto 0);
    signal input2_high_1_fu_276_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln47_4_fu_290_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln46_3_fu_272_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal c_plus_d_1_fu_294_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ac_1_fu_316_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ac_1_fu_316_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bd_1_fu_322_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bd_1_fu_322_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln63_10_fu_331_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln63_9_fu_328_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln63_1_fu_334_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_594_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal sum2_1_fu_350_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal sext_ln63_1_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_1_fu_344_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_shift_fu_361_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mod_fu_387_p7 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln47_3_fu_430_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln46_5_fu_416_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal c_plus_d_2_fu_434_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ac_2_fu_456_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ac_2_fu_456_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal bd_2_fu_462_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bd_2_fu_462_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln63_16_fu_471_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln63_15_fu_468_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln63_2_fu_474_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum1_2_fu_484_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_605_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal sum2_2_fu_494_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal zext_ln62_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_shift_fu_505_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln63_2_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln146_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln147_cast_fu_524_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln147_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln146_fu_519_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln147_fu_535_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_548_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln149_1_fu_559_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln149_2_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_540_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln149_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln149_fu_567_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_583_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_583_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_583_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_583_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_594_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_594_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_594_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_594_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_605_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_605_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_605_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_605_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_583_ce : STD_LOGIC;
    signal grp_fu_594_ce : STD_LOGIC;
    signal grp_fu_605_ce : STD_LOGIC;
    signal input1_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal MOD_INDEX_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ac_1_fu_316_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_1_fu_316_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_2_fu_456_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal ac_2_fu_456_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal ac_fu_172_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_fu_172_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_1_fu_322_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_1_fu_322_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_2_fu_462_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_2_fu_462_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_fu_178_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_fu_178_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_583_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_583_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_583_p20 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_583_p30 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_594_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_594_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_594_p20 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_594_p30 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_605_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_605_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_605_p20 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_605_p30 : STD_LOGIC_VECTOR (34 downto 0);
    signal m_fu_243_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_fu_243_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_fu_243_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal mod_fu_387_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mod_fu_387_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal mod_fu_387_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Crypto1_mul_16ns_16ns_32_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Crypto1_sparsemux_7_2_20_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        def : IN STD_LOGIC_VECTOR (19 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component Crypto1_sparsemux_7_2_31_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        def : IN STD_LOGIC_VECTOR (30 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Crypto1_mul_16ns_15ns_31_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Crypto1_ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        din3 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;



begin
    mul_16ns_16ns_32_1_0_U2248 : component Crypto1_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => ac_fu_172_p0,
        din1 => ac_fu_172_p1,
        dout => ac_fu_172_p2);

    mul_16ns_16ns_32_1_0_U2249 : component Crypto1_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bd_fu_178_p0,
        din1 => bd_fu_178_p1,
        dout => bd_fu_178_p2);

    sparsemux_7_2_20_1_0_U2250 : component Crypto1_sparsemux_7_2_20_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 20,
        CASE1 => "01",
        din1_WIDTH => 20,
        CASE2 => "10",
        din2_WIDTH => 20,
        def_WIDTH => 20,
        sel_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => ap_const_lv20_F7FFC,
        din1 => ap_const_lv20_B8010,
        din2 => ap_const_lv20_8003B,
        def => m_fu_243_p7,
        sel => MOD_INDEX_read_reg_616_pp0_iter3_reg,
        dout => m_fu_243_p9);

    mul_16ns_16ns_32_1_0_U2251 : component Crypto1_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => ac_1_fu_316_p0,
        din1 => ac_1_fu_316_p1,
        dout => ac_1_fu_316_p2);

    mul_16ns_16ns_32_1_0_U2252 : component Crypto1_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bd_1_fu_322_p0,
        din1 => bd_1_fu_322_p1,
        dout => bd_1_fu_322_p2);

    sparsemux_7_2_31_1_0_U2253 : component Crypto1_sparsemux_7_2_31_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 31,
        CASE1 => "01",
        din1_WIDTH => 31,
        CASE2 => "10",
        din2_WIDTH => 31,
        def_WIDTH => 31,
        sel_WIDTH => 2,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_40002001,
        din1 => ap_const_lv31_40012001,
        din2 => ap_const_lv31_40020001,
        def => mod_fu_387_p7,
        sel => MOD_INDEX_read_reg_616_pp0_iter7_reg,
        dout => mod_fu_387_p9);

    mul_16ns_15ns_31_1_0_U2254 : component Crypto1_mul_16ns_15ns_31_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        din0 => ac_2_fu_456_p0,
        din1 => ac_2_fu_456_p1,
        dout => ac_2_fu_456_p2);

    mul_16ns_16ns_32_1_0_U2255 : component Crypto1_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bd_2_fu_462_p0,
        din1 => bd_2_fu_462_p1,
        dout => bd_2_fu_462_p2);

    ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_0_U2256 : component Crypto1_ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 17,
        din3_WIDTH => 33,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_583_p0,
        din1 => grp_fu_583_p1,
        din2 => grp_fu_583_p2,
        din3 => grp_fu_583_p3,
        ce => grp_fu_583_ce,
        dout => grp_fu_583_p4);

    ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_0_U2257 : component Crypto1_ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 17,
        din3_WIDTH => 33,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_594_p0,
        din1 => grp_fu_594_p1,
        din2 => grp_fu_594_p2,
        din3 => grp_fu_594_p3,
        ce => grp_fu_594_ce,
        dout => grp_fu_594_p4);

    ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_0_U2258 : component Crypto1_ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 17,
        din3_WIDTH => 33,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_605_p0,
        din1 => grp_fu_605_p1,
        din2 => grp_fu_605_p2,
        din3 => grp_fu_605_p3,
        ce => grp_fu_605_ce,
        dout => grp_fu_605_p4);




    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                MOD_INDEX_int_reg <= MOD_INDEX;
                input1_val_int_reg <= input1_val;
                input2_val_int_reg <= input2_val;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                MOD_INDEX_read_reg_616 <= MOD_INDEX_int_reg;
                MOD_INDEX_read_reg_616_pp0_iter1_reg <= MOD_INDEX_read_reg_616;
                MOD_INDEX_read_reg_616_pp0_iter2_reg <= MOD_INDEX_read_reg_616_pp0_iter1_reg;
                MOD_INDEX_read_reg_616_pp0_iter3_reg <= MOD_INDEX_read_reg_616_pp0_iter2_reg;
                MOD_INDEX_read_reg_616_pp0_iter4_reg <= MOD_INDEX_read_reg_616_pp0_iter3_reg;
                MOD_INDEX_read_reg_616_pp0_iter5_reg <= MOD_INDEX_read_reg_616_pp0_iter4_reg;
                MOD_INDEX_read_reg_616_pp0_iter6_reg <= MOD_INDEX_read_reg_616_pp0_iter5_reg;
                MOD_INDEX_read_reg_616_pp0_iter7_reg <= MOD_INDEX_read_reg_616_pp0_iter6_reg;
                ac_1_reg_696 <= ac_1_fu_316_p2;
                ac_1_reg_696_pp0_iter6_reg <= ac_1_reg_696;
                ac_2_reg_746 <= ac_2_fu_456_p2;
                ac_2_reg_746_pp0_iter10_reg <= ac_2_reg_746;
                ac_reg_647 <= ac_fu_172_p2;
                ac_reg_647_pp0_iter2_reg <= ac_reg_647;
                bd_1_reg_702 <= bd_1_fu_322_p2;
                bd_1_reg_702_pp0_iter6_reg <= bd_1_reg_702;
                bd_2_reg_752 <= bd_2_fu_462_p2;
                bd_2_reg_752_pp0_iter10_reg <= bd_2_reg_752;
                bd_reg_653 <= bd_fu_178_p2;
                bd_reg_653_pp0_iter2_reg <= bd_reg_653;
                input1_high_1_reg_675 <= res_mult_fu_217_p2(61 downto 46);
                input1_high_1_reg_675_pp0_iter4_reg <= input1_high_1_reg_675;
                input1_high_reg_632 <= input1_val_int_reg(31 downto 16);
                input1_low_1_reg_669 <= res_mult_fu_217_p2(45 downto 30);
                input1_low_1_reg_669_pp0_iter4_reg <= input1_low_1_reg_669;
                input1_low_reg_627 <= input1_low_fu_110_p1;
                input2_high_2_reg_736 <= mod_fu_387_p9(30 downto 16);
                input2_high_reg_637 <= input2_val_int_reg(31 downto 16);
                input2_low_1_reg_681 <= input2_low_1_fu_262_p1;
                input2_low_2_reg_731 <= input2_low_2_fu_406_p1;
                input2_low_reg_622 <= input2_low_fu_106_p1;
                mod_reg_725 <= mod_fu_387_p9;
                mod_reg_725_pp0_iter10_reg <= mod_reg_725_pp0_iter9_reg;
                mod_reg_725_pp0_iter11_reg <= mod_reg_725_pp0_iter10_reg;
                mod_reg_725_pp0_iter9_reg <= mod_reg_725;
                res_mult_reg_664 <= res_mult_fu_217_p2;
                res_mult_reg_664_pp0_iter10_reg <= res_mult_reg_664_pp0_iter9_reg;
                res_mult_reg_664_pp0_iter4_reg <= res_mult_reg_664;
                res_mult_reg_664_pp0_iter5_reg <= res_mult_reg_664_pp0_iter4_reg;
                res_mult_reg_664_pp0_iter6_reg <= res_mult_reg_664_pp0_iter5_reg;
                res_mult_reg_664_pp0_iter7_reg <= res_mult_reg_664_pp0_iter6_reg;
                res_mult_reg_664_pp0_iter8_reg <= res_mult_reg_664_pp0_iter7_reg;
                res_mult_reg_664_pp0_iter9_reg <= res_mult_reg_664_pp0_iter8_reg;
                res_mult_shift_part_reg_713 <= res_mult_shift_fu_361_p2(47 downto 32);
                res_mult_shift_part_reg_713_pp0_iter8_reg <= res_mult_shift_part_reg_713;
                sext_ln47_reg_686 <= sext_ln47_fu_286_p1;
                sub_ln142_reg_763 <= sub_ln142_fu_510_p2;
                tmp_s_reg_719 <= res_mult_shift_fu_361_p2(63 downto 48);
                tmp_s_reg_719_pp0_iter8_reg <= tmp_s_reg_719;
            end if;
        end if;
    end process;
    a_plus_b_fu_150_p2 <= std_logic_vector(unsigned(zext_ln45_1_fu_128_p1) + unsigned(zext_ln44_1_fu_114_p1));
    ac_1_fu_316_p0 <= ac_1_fu_316_p00(16 - 1 downto 0);
    ac_1_fu_316_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_1_reg_675_pp0_iter4_reg),32));
    ac_1_fu_316_p1 <= ac_1_fu_316_p10(16 - 1 downto 0);
    ac_1_fu_316_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln47_reg_686),32));
    ac_2_fu_456_p0 <= ac_2_fu_456_p00(16 - 1 downto 0);
    ac_2_fu_456_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_719_pp0_iter8_reg),31));
    ac_2_fu_456_p1 <= ac_2_fu_456_p10(15 - 1 downto 0);
    ac_2_fu_456_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_2_reg_736),31));
    ac_fu_172_p0 <= ac_fu_172_p00(16 - 1 downto 0);
    ac_fu_172_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_reg_637),32));
    ac_fu_172_p1 <= ac_fu_172_p10(16 - 1 downto 0);
    ac_fu_172_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_reg_632),32));
    add_ln63_1_fu_334_p2 <= std_logic_vector(unsigned(zext_ln63_10_fu_331_p1) + unsigned(zext_ln63_9_fu_328_p1));
    add_ln63_2_fu_474_p2 <= std_logic_vector(unsigned(zext_ln63_16_fu_471_p1) + unsigned(zext_ln63_15_fu_468_p1));
    add_ln63_fu_190_p2 <= std_logic_vector(unsigned(zext_ln63_4_fu_187_p1) + unsigned(zext_ln63_3_fu_184_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_return <= 
        trunc_ln149_fu_556_p1 when (tmp_fu_540_p3(0) = '1') else 
        select_ln149_fu_567_p3;
    bd_1_fu_322_p0 <= bd_1_fu_322_p00(16 - 1 downto 0);
    bd_1_fu_322_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_1_reg_669_pp0_iter4_reg),32));
    bd_1_fu_322_p1 <= bd_1_fu_322_p10(16 - 1 downto 0);
    bd_1_fu_322_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_1_reg_681),32));
    bd_2_fu_462_p0 <= bd_2_fu_462_p00(16 - 1 downto 0);
    bd_2_fu_462_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_shift_part_reg_713_pp0_iter8_reg),32));
    bd_2_fu_462_p1 <= bd_2_fu_462_p10(16 - 1 downto 0);
    bd_2_fu_462_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_2_reg_731),32));
    bd_fu_178_p0 <= bd_fu_178_p00(16 - 1 downto 0);
    bd_fu_178_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_reg_622),32));
    bd_fu_178_p1 <= bd_fu_178_p10(16 - 1 downto 0);
    bd_fu_178_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_reg_627),32));
    c_plus_d_1_fu_294_p2 <= std_logic_vector(unsigned(zext_ln47_4_fu_290_p1) + unsigned(zext_ln46_3_fu_272_p1));
    c_plus_d_2_fu_434_p2 <= std_logic_vector(unsigned(zext_ln47_3_fu_430_p1) + unsigned(zext_ln46_5_fu_416_p1));

    grp_fu_583_ce_assign_proc : process(ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_583_ce <= ap_const_logic_1;
        else 
            grp_fu_583_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_583_p0 <= grp_fu_583_p00(16 - 1 downto 0);
    grp_fu_583_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_fu_136_p4),17));
    grp_fu_583_p1 <= grp_fu_583_p10(16 - 1 downto 0);
    grp_fu_583_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_fu_106_p1),17));
    grp_fu_583_p2 <= grp_fu_583_p20(17 - 1 downto 0);
    grp_fu_583_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_plus_b_fu_150_p2),34));
    grp_fu_583_p3 <= grp_fu_583_p30(33 - 1 downto 0);
    grp_fu_583_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_fu_190_p2),35));

    grp_fu_594_ce_assign_proc : process(ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_594_ce <= ap_const_logic_1;
        else 
            grp_fu_594_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_594_p0 <= grp_fu_594_p00(16 - 1 downto 0);
    grp_fu_594_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_1_reg_675),17));
    grp_fu_594_p1 <= grp_fu_594_p10(16 - 1 downto 0);
    grp_fu_594_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_1_reg_669),17));
    grp_fu_594_p2 <= grp_fu_594_p20(17 - 1 downto 0);
    grp_fu_594_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_plus_d_1_fu_294_p2),34));
    grp_fu_594_p3 <= grp_fu_594_p30(33 - 1 downto 0);
    grp_fu_594_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_1_fu_334_p2),35));

    grp_fu_605_ce_assign_proc : process(ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_605_ce <= ap_const_logic_1;
        else 
            grp_fu_605_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_605_p0 <= grp_fu_605_p00(16 - 1 downto 0);
    grp_fu_605_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_shift_part_reg_713),17));
    grp_fu_605_p1 <= grp_fu_605_p10(16 - 1 downto 0);
    grp_fu_605_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_719),17));
    grp_fu_605_p2 <= grp_fu_605_p20(17 - 1 downto 0);
    grp_fu_605_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_plus_d_2_fu_434_p2),34));
    grp_fu_605_p3 <= grp_fu_605_p30(33 - 1 downto 0);
    grp_fu_605_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_2_fu_474_p2),35));
    input1_high_fu_118_p4 <= input1_val_int_reg(31 downto 16);
    input1_low_fu_110_p1 <= input1_val_int_reg(16 - 1 downto 0);
    input2_high_1_fu_276_p4 <= m_fu_243_p9(19 downto 16);
    input2_high_2_fu_420_p4 <= mod_fu_387_p9(30 downto 16);
    input2_high_fu_136_p4 <= input2_val_int_reg(31 downto 16);
    input2_low_1_fu_262_p1 <= m_fu_243_p9(16 - 1 downto 0);
    input2_low_2_fu_406_p1 <= mod_fu_387_p9(16 - 1 downto 0);
    input2_low_fu_106_p1 <= input2_val_int_reg(16 - 1 downto 0);
    m_fu_243_p7 <= "XXXXXXXXXXXXXXXXXXXX";
    mod_fu_387_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    res_mult_fu_217_p2 <= std_logic_vector(unsigned(sum1_fu_200_p3) + unsigned(sext_ln63_fu_213_p1));
    res_mult_shift_fu_361_p2 <= std_logic_vector(signed(sext_ln63_1_fu_357_p1) + signed(sum1_1_fu_344_p3));
    res_shift_fu_505_p2 <= std_logic_vector(unsigned(res_mult_reg_664_pp0_iter10_reg) - unsigned(zext_ln62_fu_490_p1));
    select_ln149_fu_567_p3 <= 
        trunc_ln149_1_fu_559_p1 when (tmp_43_fu_548_p3(0) = '1') else 
        trunc_ln149_2_fu_563_p1;
        sext_ln47_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input2_high_1_fu_276_p4),16));

        sext_ln63_1_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_1_fu_350_p3),64));

        sext_ln63_2_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_2_fu_494_p3),64));

        sext_ln63_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_fu_206_p3),64));

    sub_ln142_fu_510_p2 <= std_logic_vector(unsigned(res_shift_fu_505_p2) - unsigned(sext_ln63_2_fu_501_p1));
    sub_ln146_fu_519_p2 <= std_logic_vector(unsigned(sub_ln142_reg_763) - unsigned(zext_ln146_fu_516_p1));
    sub_ln147_fu_535_p2 <= std_logic_vector(unsigned(sub_ln142_reg_763) - unsigned(zext_ln147_fu_531_p1));
    sum1_1_fu_344_p3 <= (ac_1_reg_696_pp0_iter6_reg & bd_1_reg_702_pp0_iter6_reg);
    sum1_2_fu_484_p3 <= (ac_2_reg_746_pp0_iter10_reg & bd_2_reg_752_pp0_iter10_reg);
    sum1_fu_200_p3 <= (ac_reg_647_pp0_iter2_reg & bd_reg_653_pp0_iter2_reg);
    sum2_1_fu_350_p3 <= (grp_fu_594_p4 & ap_const_lv16_0);
    sum2_2_fu_494_p3 <= (grp_fu_605_p4 & ap_const_lv16_0);
    sum2_fu_206_p3 <= (grp_fu_583_p4 & ap_const_lv16_0);
    tmp_43_fu_548_p3 <= sub_ln147_fu_535_p2(63 downto 63);
    tmp_fu_540_p3 <= sub_ln146_fu_519_p2(63 downto 63);
    trunc_ln149_1_fu_559_p1 <= sub_ln146_fu_519_p2(32 - 1 downto 0);
    trunc_ln149_2_fu_563_p1 <= sub_ln147_fu_535_p2(32 - 1 downto 0);
    trunc_ln149_fu_556_p1 <= sub_ln142_reg_763(32 - 1 downto 0);
    zext_ln146_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mod_reg_725_pp0_iter11_reg),64));
    zext_ln147_cast_fu_524_p3 <= (mod_reg_725_pp0_iter11_reg & ap_const_lv1_0);
    zext_ln147_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln147_cast_fu_524_p3),64));
    zext_ln44_1_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_fu_110_p1),17));
    zext_ln45_1_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_fu_118_p4),17));
    zext_ln46_3_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_1_fu_262_p1),17));
    zext_ln46_5_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_2_fu_406_p1),17));
    zext_ln47_3_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_2_fu_420_p4),17));
    zext_ln47_4_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln47_fu_286_p1),17));
    zext_ln62_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_2_fu_484_p3),64));
    zext_ln63_10_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bd_1_reg_702),33));
    zext_ln63_15_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ac_2_reg_746),33));
    zext_ln63_16_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bd_2_reg_752),33));
    zext_ln63_3_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ac_reg_647),33));
    zext_ln63_4_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bd_reg_653),33));
    zext_ln63_9_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ac_1_reg_696),33));
end behav;
