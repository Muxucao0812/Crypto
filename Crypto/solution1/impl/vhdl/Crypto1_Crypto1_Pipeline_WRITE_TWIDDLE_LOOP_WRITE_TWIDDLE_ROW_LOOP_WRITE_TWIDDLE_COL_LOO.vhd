-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto1_Crypto1_Pipeline_WRITE_TWIDDLE_LOOP_WRITE_TWIDDLE_ROW_LOOP_WRITE_TWIDDLE_COL_LOO is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    NTTTWiddleRAM_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    NTTTWiddleRAM_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    NTTTWiddleRAM_1_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_1_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_2_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    NTTTWiddleRAM_2_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_2_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_3_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    NTTTWiddleRAM_3_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_3_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    INTTTWiddleRAM_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    INTTTWiddleRAM_1_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_1_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_2_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    INTTTWiddleRAM_2_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_2_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_3_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    INTTTWiddleRAM_3_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_3_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTwiddleIn_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    NTTTwiddleIn_ce0 : OUT STD_LOGIC;
    NTTTwiddleIn_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    INTTTwiddleIn_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    INTTTwiddleIn_ce0 : OUT STD_LOGIC;
    INTTTwiddleIn_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Crypto1_Crypto1_Pipeline_WRITE_TWIDDLE_LOOP_WRITE_TWIDDLE_ROW_LOOP_WRITE_TWIDDLE_COL_LOO is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv19_60000 : STD_LOGIC_VECTOR (18 downto 0) := "1100000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv19_20000 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln115_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln117_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_524 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln119_1_fu_408_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln119_1_reg_532 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln119_5_fu_418_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln119_5_reg_537 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln_reg_541 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln120_1_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln120_2_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_92 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln119_fu_446_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_96 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln117_fu_388_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten13_fu_100 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    signal select_ln117_1_fu_305_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_fu_104 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal select_ln115_1_fu_362_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten26_fu_108 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    signal add_ln115_1_fu_287_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal NTTTwiddleIn_ce0_local : STD_LOGIC;
    signal INTTTwiddleIn_ce0_local : STD_LOGIC;
    signal NTTTWiddleRAM_2_we0_local : STD_LOGIC;
    signal NTTTWiddleRAM_2_ce0_local : STD_LOGIC;
    signal INTTTWiddleRAM_2_we0_local : STD_LOGIC;
    signal INTTTWiddleRAM_2_ce0_local : STD_LOGIC;
    signal NTTTWiddleRAM_1_we0_local : STD_LOGIC;
    signal NTTTWiddleRAM_1_ce0_local : STD_LOGIC;
    signal INTTTWiddleRAM_1_we0_local : STD_LOGIC;
    signal INTTTWiddleRAM_1_ce0_local : STD_LOGIC;
    signal NTTTWiddleRAM_we0_local : STD_LOGIC;
    signal NTTTWiddleRAM_ce0_local : STD_LOGIC;
    signal INTTTWiddleRAM_we0_local : STD_LOGIC;
    signal INTTTWiddleRAM_ce0_local : STD_LOGIC;
    signal NTTTWiddleRAM_3_we0_local : STD_LOGIC;
    signal NTTTWiddleRAM_3_ce0_local : STD_LOGIC;
    signal INTTTWiddleRAM_3_we0_local : STD_LOGIC;
    signal INTTTWiddleRAM_3_ce0_local : STD_LOGIC;
    signal add_ln117_1_fu_299_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln119_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln115_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln115_fu_332_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln115_fu_338_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln115_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln117_fu_369_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_396_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln120_fu_404_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_6_mid2_fu_380_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln119_fu_414_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_52_fu_432_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_51_fu_467_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Crypto1_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Crypto1_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    i_fu_104 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i_fu_104 <= select_ln115_1_fu_362_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_100 <= ap_const_lv19_0;
                elsif (((icmp_ln115_fu_281_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_100 <= select_ln117_1_fu_305_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten26_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten26_fu_108 <= ap_const_lv19_0;
                elsif (((icmp_ln115_fu_281_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten26_fu_108 <= add_ln115_1_fu_287_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    j_fu_96 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    j_fu_96 <= select_ln117_fu_388_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    k_fu_92 <= ap_const_lv13_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    k_fu_92 <= add_ln119_fu_446_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln119_1_reg_532 <= add_ln119_1_fu_408_p2;
                lshr_ln_reg_541 <= k_6_mid2_fu_380_p3(11 downto 2);
                trunc_ln119_5_reg_537 <= trunc_ln119_5_fu_418_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln117_reg_524 <= icmp_ln117_fu_293_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    INTTTWiddleRAM_1_address0 <= zext_ln120_2_fu_473_p1(17 - 1 downto 0);
    INTTTWiddleRAM_1_ce0 <= INTTTWiddleRAM_1_ce0_local;

    INTTTWiddleRAM_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            INTTTWiddleRAM_1_ce0_local <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_1_d0 <= INTTTwiddleIn_q0;
    INTTTWiddleRAM_1_we0 <= INTTTWiddleRAM_1_we0_local;

    INTTTWiddleRAM_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln119_5_reg_537)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln119_5_reg_537 = ap_const_lv2_1))) then 
            INTTTWiddleRAM_1_we0_local <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_2_address0 <= zext_ln120_2_fu_473_p1(17 - 1 downto 0);
    INTTTWiddleRAM_2_ce0 <= INTTTWiddleRAM_2_ce0_local;

    INTTTWiddleRAM_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            INTTTWiddleRAM_2_ce0_local <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_2_d0 <= INTTTwiddleIn_q0;
    INTTTWiddleRAM_2_we0 <= INTTTWiddleRAM_2_we0_local;

    INTTTWiddleRAM_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln119_5_reg_537)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln119_5_reg_537 = ap_const_lv2_2))) then 
            INTTTWiddleRAM_2_we0_local <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_3_address0 <= zext_ln120_2_fu_473_p1(17 - 1 downto 0);
    INTTTWiddleRAM_3_ce0 <= INTTTWiddleRAM_3_ce0_local;

    INTTTWiddleRAM_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            INTTTWiddleRAM_3_ce0_local <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_3_d0 <= INTTTwiddleIn_q0;
    INTTTWiddleRAM_3_we0 <= INTTTWiddleRAM_3_we0_local;

    INTTTWiddleRAM_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln119_5_reg_537)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln119_5_reg_537 = ap_const_lv2_3))) then 
            INTTTWiddleRAM_3_we0_local <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_address0 <= zext_ln120_2_fu_473_p1(17 - 1 downto 0);
    INTTTWiddleRAM_ce0 <= INTTTWiddleRAM_ce0_local;

    INTTTWiddleRAM_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            INTTTWiddleRAM_ce0_local <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_d0 <= INTTTwiddleIn_q0;
    INTTTWiddleRAM_we0 <= INTTTWiddleRAM_we0_local;

    INTTTWiddleRAM_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln119_5_reg_537)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln119_5_reg_537 = ap_const_lv2_0))) then 
            INTTTWiddleRAM_we0_local <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    INTTTwiddleIn_address0 <= zext_ln120_1_fu_440_p1(14 - 1 downto 0);
    INTTTwiddleIn_ce0 <= INTTTwiddleIn_ce0_local;

    INTTTwiddleIn_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            INTTTwiddleIn_ce0_local <= ap_const_logic_1;
        else 
            INTTTwiddleIn_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_1_address0 <= zext_ln120_2_fu_473_p1(17 - 1 downto 0);
    NTTTWiddleRAM_1_ce0 <= NTTTWiddleRAM_1_ce0_local;

    NTTTWiddleRAM_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            NTTTWiddleRAM_1_ce0_local <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_1_d0 <= NTTTwiddleIn_q0;
    NTTTWiddleRAM_1_we0 <= NTTTWiddleRAM_1_we0_local;

    NTTTWiddleRAM_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln119_5_reg_537)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln119_5_reg_537 = ap_const_lv2_1))) then 
            NTTTWiddleRAM_1_we0_local <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_2_address0 <= zext_ln120_2_fu_473_p1(17 - 1 downto 0);
    NTTTWiddleRAM_2_ce0 <= NTTTWiddleRAM_2_ce0_local;

    NTTTWiddleRAM_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            NTTTWiddleRAM_2_ce0_local <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_2_d0 <= NTTTwiddleIn_q0;
    NTTTWiddleRAM_2_we0 <= NTTTWiddleRAM_2_we0_local;

    NTTTWiddleRAM_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln119_5_reg_537)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln119_5_reg_537 = ap_const_lv2_2))) then 
            NTTTWiddleRAM_2_we0_local <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_3_address0 <= zext_ln120_2_fu_473_p1(17 - 1 downto 0);
    NTTTWiddleRAM_3_ce0 <= NTTTWiddleRAM_3_ce0_local;

    NTTTWiddleRAM_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            NTTTWiddleRAM_3_ce0_local <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_3_d0 <= NTTTwiddleIn_q0;
    NTTTWiddleRAM_3_we0 <= NTTTWiddleRAM_3_we0_local;

    NTTTWiddleRAM_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln119_5_reg_537)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln119_5_reg_537 = ap_const_lv2_3))) then 
            NTTTWiddleRAM_3_we0_local <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_address0 <= zext_ln120_2_fu_473_p1(17 - 1 downto 0);
    NTTTWiddleRAM_ce0 <= NTTTWiddleRAM_ce0_local;

    NTTTWiddleRAM_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            NTTTWiddleRAM_ce0_local <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_d0 <= NTTTwiddleIn_q0;
    NTTTWiddleRAM_we0 <= NTTTWiddleRAM_we0_local;

    NTTTWiddleRAM_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln119_5_reg_537)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (trunc_ln119_5_reg_537 = ap_const_lv2_0))) then 
            NTTTWiddleRAM_we0_local <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    NTTTwiddleIn_address0 <= zext_ln120_1_fu_440_p1(14 - 1 downto 0);
    NTTTwiddleIn_ce0 <= NTTTwiddleIn_ce0_local;

    NTTTwiddleIn_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            NTTTwiddleIn_ce0_local <= ap_const_logic_1;
        else 
            NTTTwiddleIn_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln115_1_fu_287_p2 <= std_logic_vector(unsigned(indvar_flatten26_fu_108) + unsigned(ap_const_lv19_1));
    add_ln115_fu_332_p2 <= std_logic_vector(unsigned(i_fu_104) + unsigned(ap_const_lv2_1));
    add_ln117_1_fu_299_p2 <= std_logic_vector(unsigned(indvar_flatten13_fu_100) + unsigned(ap_const_lv19_1));
    add_ln117_fu_369_p2 <= std_logic_vector(unsigned(select_ln115_fu_338_p3) + unsigned(ap_const_lv6_1));
    add_ln119_1_fu_408_p2 <= std_logic_vector(unsigned(tmp_s_fu_396_p3) + unsigned(zext_ln120_fu_404_p1));
    add_ln119_fu_446_p2 <= std_logic_vector(unsigned(k_6_mid2_fu_380_p3) + unsigned(ap_const_lv13_1));
    and_ln115_fu_356_p2 <= (xor_ln115_fu_345_p2 and icmp_ln119_fu_350_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln115_fu_281_p2)
    begin
        if (((icmp_ln115_fu_281_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_375_p2 <= (icmp_ln117_reg_524 or and_ln115_fu_356_p2);
    icmp_ln115_fu_281_p2 <= "1" when (indvar_flatten26_fu_108 = ap_const_lv19_60000) else "0";
    icmp_ln117_fu_293_p2 <= "1" when (indvar_flatten13_fu_100 = ap_const_lv19_20000) else "0";
    icmp_ln119_fu_350_p2 <= "1" when (k_fu_92 = ap_const_lv13_1000) else "0";
    k_6_mid2_fu_380_p3 <= 
        ap_const_lv13_0 when (empty_fu_375_p2(0) = '1') else 
        k_fu_92;
    select_ln115_1_fu_362_p3 <= 
        add_ln115_fu_332_p2 when (icmp_ln117_reg_524(0) = '1') else 
        i_fu_104;
    select_ln115_fu_338_p3 <= 
        ap_const_lv6_0 when (icmp_ln117_reg_524(0) = '1') else 
        j_fu_96;
    select_ln117_1_fu_305_p3 <= 
        ap_const_lv19_1 when (icmp_ln117_fu_293_p2(0) = '1') else 
        add_ln117_1_fu_299_p2;
    select_ln117_fu_388_p3 <= 
        add_ln117_fu_369_p2 when (and_ln115_fu_356_p2(0) = '1') else 
        select_ln115_fu_338_p3;
    tmp_51_fu_467_p3 <= (add_ln119_1_reg_532 & lshr_ln_reg_541);
    tmp_52_fu_432_p3 <= (select_ln115_1_fu_362_p3 & trunc_ln119_fu_414_p1);
    tmp_s_fu_396_p3 <= (select_ln115_1_fu_362_p3 & ap_const_lv5_0);
    trunc_ln119_5_fu_418_p1 <= k_6_mid2_fu_380_p3(2 - 1 downto 0);
    trunc_ln119_fu_414_p1 <= k_6_mid2_fu_380_p3(12 - 1 downto 0);
    xor_ln115_fu_345_p2 <= (icmp_ln117_reg_524 xor ap_const_lv1_1);
    zext_ln120_1_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_432_p3),64));
    zext_ln120_2_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_467_p3),64));
    zext_ln120_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln117_fu_388_p3),7));
end behav;
