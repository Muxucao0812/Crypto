// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Crypto_Crypto_Pipeline_VITIS_LOOP_83_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        INTTTWiddleRAM_address0,
        INTTTWiddleRAM_ce0,
        INTTTWiddleRAM_we0,
        INTTTWiddleRAM_d0,
        NTTTWiddleRAM_address0,
        NTTTWiddleRAM_ce0,
        NTTTWiddleRAM_we0,
        NTTTWiddleRAM_d0,
        NTTTwiddleIn_address0,
        NTTTwiddleIn_ce0,
        NTTTwiddleIn_q0,
        INTTTwiddleIn_address0,
        INTTTwiddleIn_ce0,
        INTTTwiddleIn_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] INTTTWiddleRAM_address0;
output   INTTTWiddleRAM_ce0;
output   INTTTWiddleRAM_we0;
output  [31:0] INTTTWiddleRAM_d0;
output  [10:0] NTTTWiddleRAM_address0;
output   NTTTWiddleRAM_ce0;
output   NTTTWiddleRAM_we0;
output  [31:0] NTTTWiddleRAM_d0;
output  [12:0] NTTTwiddleIn_address0;
output   NTTTwiddleIn_ce0;
input  [31:0] NTTTwiddleIn_q0;
output  [12:0] INTTTwiddleIn_address0;
output   INTTTwiddleIn_ce0;
input  [31:0] INTTTwiddleIn_q0;

reg ap_idle;
reg INTTTWiddleRAM_ce0;
reg INTTTWiddleRAM_we0;
reg NTTTWiddleRAM_ce0;
reg NTTTWiddleRAM_we0;
reg NTTTwiddleIn_ce0;
reg INTTTwiddleIn_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln83_fu_110_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [11:0] j_reg_149;
wire    ap_block_pp0_stage0_11001;
reg   [11:0] j_reg_149_pp0_iter1_reg;
reg   [31:0] NTTTwiddleIn_load_reg_168;
reg   [31:0] INTTTwiddleIn_load_reg_173;
wire   [63:0] zext_ln85_fu_126_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln83_fu_137_p1;
reg   [11:0] j_2_fu_46;
wire   [11:0] add_ln83_fu_116_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_j;
wire   [10:0] trunc_ln83_fu_122_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Crypto_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln83_fu_110_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_2_fu_46 <= add_ln83_fu_116_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_2_fu_46 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        INTTTwiddleIn_load_reg_173 <= INTTTwiddleIn_q0;
        NTTTwiddleIn_load_reg_168 <= NTTTwiddleIn_q0;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        j_reg_149 <= ap_sig_allocacmp_j;
        j_reg_149_pp0_iter1_reg <= j_reg_149;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTWiddleRAM_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        INTTTwiddleIn_ce0 = 1'b1;
    end else begin
        INTTTwiddleIn_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTWiddleRAM_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        NTTTwiddleIn_ce0 = 1'b1;
    end else begin
        NTTTwiddleIn_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln83_fu_110_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j = 12'd0;
    end else begin
        ap_sig_allocacmp_j = j_2_fu_46;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INTTTWiddleRAM_address0 = zext_ln83_fu_137_p1;

assign INTTTWiddleRAM_d0 = INTTTwiddleIn_load_reg_173;

assign INTTTwiddleIn_address0 = zext_ln85_fu_126_p1;

assign NTTTWiddleRAM_address0 = zext_ln83_fu_137_p1;

assign NTTTWiddleRAM_d0 = NTTTwiddleIn_load_reg_168;

assign NTTTwiddleIn_address0 = zext_ln85_fu_126_p1;

assign add_ln83_fu_116_p2 = (ap_sig_allocacmp_j + 12'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln83_fu_110_p2 = ((ap_sig_allocacmp_j == 12'd2048) ? 1'b1 : 1'b0);

assign trunc_ln83_fu_122_p1 = ap_sig_allocacmp_j[10:0];

assign zext_ln83_fu_137_p1 = j_reg_149_pp0_iter1_reg;

assign zext_ln85_fu_126_p1 = trunc_ln83_fu_122_p1;

endmodule //Crypto_Crypto_Pipeline_VITIS_LOOP_83_3
