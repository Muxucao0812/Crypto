// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="STEPMUL_STEPMUL,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.580000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=168,HLS_SYN_LUT=178,HLS_VERSION=2023_1}" *)

module STEPMUL (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input1,
        input2,
        res,
        res_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] input1;
input  [31:0] input2;
output  [63:0] res;
output   res_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] input1_low_fu_57_p1;
reg   [15:0] input1_low_reg_185;
wire   [15:0] input2_low_fu_61_p1;
reg   [15:0] input2_low_reg_190;
wire   [15:0] input1_high_fu_69_p4;
reg   [15:0] input1_high_reg_195;
wire   [15:0] input2_high_fu_87_p4;
reg   [15:0] input2_high_reg_200;
wire   [31:0] ac_fu_123_p2;
reg   [31:0] ac_reg_210;
wire    ap_CS_fsm_state2;
wire   [31:0] bd_fu_129_p2;
reg   [31:0] bd_reg_216;
wire    ap_CS_fsm_state3;
wire   [34:0] grp_fu_175_p4;
reg   [34:0] sub_ln63_reg_227;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [16:0] zext_ln45_fu_79_p1;
wire   [16:0] zext_ln44_1_fu_65_p1;
wire   [16:0] a_plus_b_fu_101_p2;
wire   [15:0] ac_fu_123_p0;
wire   [15:0] ac_fu_123_p1;
wire   [15:0] bd_fu_129_p0;
wire   [15:0] bd_fu_129_p1;
wire   [32:0] zext_ln63_3_fu_135_p1;
wire   [32:0] zext_ln63_4_fu_138_p1;
wire   [32:0] add_ln63_fu_141_p2;
wire   [50:0] sum2_fu_157_p3;
wire  signed [63:0] sext_ln63_fu_164_p1;
wire   [63:0] sum1_fu_151_p3;
wire   [15:0] grp_fu_175_p0;
wire   [15:0] grp_fu_175_p1;
wire   [16:0] grp_fu_175_p2;
wire   [32:0] grp_fu_175_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire   [31:0] ac_fu_123_p00;
wire   [31:0] ac_fu_123_p10;
wire   [31:0] bd_fu_129_p00;
wire   [31:0] bd_fu_129_p10;
wire   [16:0] grp_fu_175_p00;
wire   [16:0] grp_fu_175_p10;
wire   [33:0] grp_fu_175_p20;
wire   [34:0] grp_fu_175_p30;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

STEPMUL_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U1(
    .din0(ac_fu_123_p0),
    .din1(ac_fu_123_p1),
    .dout(ac_fu_123_p2)
);

STEPMUL_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U2(
    .din0(bd_fu_129_p0),
    .din1(bd_fu_129_p1),
    .dout(bd_fu_129_p2)
);

STEPMUL_ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 17 ),
    .din3_WIDTH( 33 ),
    .dout_WIDTH( 35 ))
ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_175_p0),
    .din1(grp_fu_175_p1),
    .din2(grp_fu_175_p2),
    .din3(grp_fu_175_p3),
    .ce(1'b1),
    .dout(grp_fu_175_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ac_reg_210 <= ac_fu_123_p2;
        bd_reg_216 <= bd_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        input1_high_reg_195 <= {{input1[31:16]}};
        input1_low_reg_185 <= input1_low_fu_57_p1;
        input2_high_reg_200 <= {{input2[31:16]}};
        input2_low_reg_190 <= input2_low_fu_61_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sub_ln63_reg_227 <= grp_fu_175_p4;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        res_ap_vld = 1'b1;
    end else begin
        res_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_plus_b_fu_101_p2 = (zext_ln45_fu_79_p1 + zext_ln44_1_fu_65_p1);

assign ac_fu_123_p0 = ac_fu_123_p00;

assign ac_fu_123_p00 = input2_high_reg_200;

assign ac_fu_123_p1 = ac_fu_123_p10;

assign ac_fu_123_p10 = input1_high_reg_195;

assign add_ln63_fu_141_p2 = (zext_ln63_3_fu_135_p1 + zext_ln63_4_fu_138_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign bd_fu_129_p0 = bd_fu_129_p00;

assign bd_fu_129_p00 = input2_low_reg_190;

assign bd_fu_129_p1 = bd_fu_129_p10;

assign bd_fu_129_p10 = input1_low_reg_185;

assign grp_fu_175_p0 = grp_fu_175_p00;

assign grp_fu_175_p00 = input2_high_fu_87_p4;

assign grp_fu_175_p1 = grp_fu_175_p10;

assign grp_fu_175_p10 = input2_low_fu_61_p1;

assign grp_fu_175_p2 = grp_fu_175_p20;

assign grp_fu_175_p20 = a_plus_b_fu_101_p2;

assign grp_fu_175_p3 = grp_fu_175_p30;

assign grp_fu_175_p30 = add_ln63_fu_141_p2;

assign input1_high_fu_69_p4 = {{input1[31:16]}};

assign input1_low_fu_57_p1 = input1[15:0];

assign input2_high_fu_87_p4 = {{input2[31:16]}};

assign input2_low_fu_61_p1 = input2[15:0];

assign res = ($signed(sext_ln63_fu_164_p1) + $signed(sum1_fu_151_p3));

assign sext_ln63_fu_164_p1 = $signed(sum2_fu_157_p3);

assign sum1_fu_151_p3 = {{ac_reg_210}, {bd_reg_216}};

assign sum2_fu_157_p3 = {{sub_ln63_reg_227}, {16'd0}};

assign zext_ln44_1_fu_65_p1 = input1_low_fu_57_p1;

assign zext_ln45_fu_79_p1 = input1_high_fu_69_p4;

assign zext_ln63_3_fu_135_p1 = ac_reg_210;

assign zext_ln63_4_fu_138_p1 = bd_reg_216;

endmodule //STEPMUL
