// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Crypto_Crypto_Pipeline_INTT_PE_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        hf_1,
        trunc_ln158_2,
        DataTemp_address0,
        DataTemp_ce0,
        DataTemp_we0,
        DataTemp_d0,
        DataTemp_q0,
        DataTemp_address1,
        DataTemp_ce1,
        DataTemp_we1,
        DataTemp_d1,
        DataTemp_q1,
        trunc_ln158_1,
        trunc_ln10,
        m_1,
        zext_ln19_8,
        mod_1,
        zext_ln19_9,
        zext_ln89_1,
        zext_ln64_1,
        twiddle_ram_address0,
        twiddle_ram_ce0,
        twiddle_ram_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] hf_1;
input  [11:0] trunc_ln158_2;
output  [11:0] DataTemp_address0;
output   DataTemp_ce0;
output   DataTemp_we0;
output  [31:0] DataTemp_d0;
input  [31:0] DataTemp_q0;
output  [11:0] DataTemp_address1;
output   DataTemp_ce1;
output   DataTemp_we1;
output  [31:0] DataTemp_d1;
input  [31:0] DataTemp_q1;
input  [11:0] trunc_ln158_1;
input  [12:0] trunc_ln10;
input  [19:0] m_1;
input  [15:0] zext_ln19_8;
input  [30:0] mod_1;
input  [15:0] zext_ln19_9;
input  [30:0] zext_ln89_1;
input  [30:0] zext_ln64_1;
output  [12:0] twiddle_ram_address0;
output   twiddle_ram_ce0;
input  [31:0] twiddle_ram_q0;

reg ap_idle;
reg[11:0] DataTemp_address0;
reg DataTemp_ce0;
reg DataTemp_we0;
reg[11:0] DataTemp_address1;
reg DataTemp_ce1;
reg DataTemp_we1;
reg twiddle_ram_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln160_fu_255_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln64_1_cast_fu_222_p1;
reg   [31:0] zext_ln64_1_cast_reg_832;
wire   [63:0] zext_ln89_1_cast_fu_226_p1;
reg   [63:0] zext_ln89_1_cast_reg_839;
wire   [31:0] zext_ln19_9_cast_fu_230_p1;
reg   [31:0] zext_ln19_9_cast_reg_844;
wire   [31:0] zext_ln19_8_cast_fu_234_p1;
reg   [31:0] zext_ln19_8_cast_reg_850;
reg   [11:0] res_reg_859;
wire    ap_block_pp0_stage1_11001;
reg   [11:0] res_2_reg_864;
reg   [3:0] input2_high_7_reg_874;
reg   [31:0] u_reg_879;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] v_fu_710_p3;
reg   [31:0] v_reg_884;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln162_fu_278_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln163_fu_288_p1;
wire   [63:0] zext_ln164_fu_304_p1;
reg   [12:0] phi_mul4_fu_116;
wire   [12:0] add_ln164_1_fu_293_p2;
wire    ap_loop_init;
reg   [30:0] j_1_fu_120;
wire   [30:0] add_ln160_fu_260_p2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln160_fu_251_p1;
wire   [11:0] trunc_ln160_fu_269_p1;
wire   [11:0] add_ln162_fu_273_p2;
wire   [11:0] add_ln163_fu_283_p2;
wire   [12:0] xor_ln164_fu_298_p2;
wire   [15:0] input1_low_fu_328_p1;
wire   [15:0] input1_high_fu_340_p4;
wire   [15:0] input2_low_fu_332_p1;
wire   [15:0] input2_high_fu_358_p4;
wire   [15:0] temp1_fu_372_p0;
wire   [31:0] zext_ln19_fu_354_p1;
wire   [15:0] temp1_fu_372_p1;
wire   [31:0] zext_ln17_fu_336_p1;
wire   [15:0] temp2_fu_378_p0;
wire   [31:0] zext_ln20_fu_368_p1;
wire   [15:0] temp2_fu_378_p1;
wire   [15:0] temp4_fu_384_p0;
wire   [15:0] temp4_fu_384_p1;
wire   [31:0] zext_ln18_fu_350_p1;
wire   [31:0] temp4_fu_384_p2;
wire   [31:0] temp1_fu_372_p2;
wire   [31:0] temp2_fu_378_p2;
wire   [32:0] grp_fu_769_p3;
wire   [48:0] sum2_fu_402_p3;
wire   [63:0] zext_ln28_fu_409_p1;
wire   [63:0] sum1_fu_390_p3;
wire   [63:0] res_mult_fu_413_p2;
wire   [15:0] input1_low_7_fu_419_p4;
wire   [15:0] input1_high_4_fu_433_p4;
wire  signed [15:0] sext_ln20_fu_447_p1;
wire   [15:0] temp1_7_fu_454_p0;
wire   [31:0] zext_ln17_11_fu_429_p1;
wire   [15:0] temp1_7_fu_454_p1;
wire   [15:0] temp2_7_fu_459_p0;
wire   [15:0] temp2_7_fu_459_p1;
wire   [31:0] zext_ln20_7_fu_450_p1;
wire   [15:0] temp3_7_fu_465_p0;
wire   [31:0] zext_ln18_5_fu_443_p1;
wire   [15:0] temp3_7_fu_465_p1;
wire   [15:0] temp4_7_fu_470_p0;
wire   [15:0] temp4_7_fu_470_p1;
wire   [31:0] temp4_7_fu_470_p2;
wire   [31:0] temp1_7_fu_454_p2;
wire   [31:0] temp2_7_fu_459_p2;
wire   [31:0] temp3_7_fu_465_p2;
wire   [32:0] zext_ln30_17_fu_488_p1;
wire   [32:0] zext_ln30_18_fu_492_p1;
wire   [32:0] add_ln30_8_fu_502_p2;
wire   [48:0] sum2_7_fu_508_p3;
wire   [15:0] trunc_ln29_fu_476_p1;
wire   [31:0] add_ln30_fu_496_p2;
wire   [63:0] zext_ln28_11_fu_516_p1;
wire   [63:0] sum1_7_fu_480_p3;
wire   [47:0] trunc_ln32_1_fu_528_p3;
wire   [47:0] tmp_3_fu_520_p3;
wire   [47:0] add_ln74_fu_542_p2;
wire   [15:0] res_mult_shift_part_fu_548_p4;
wire   [14:0] input2_high_8_fu_566_p4;
wire   [15:0] temp1_8_fu_579_p0;
wire   [15:0] temp1_8_fu_579_p1;
wire   [63:0] res_mult_shift_fu_536_p2;
wire   [15:0] trunc_ln24_4_fu_584_p4;
wire   [15:0] temp3_8_fu_602_p0;
wire   [15:0] temp3_8_fu_602_p1;
wire   [14:0] temp4_8_fu_607_p0;
wire   [30:0] zext_ln20_8_fu_575_p1;
wire   [15:0] temp4_8_fu_607_p1;
wire   [30:0] temp4_8_fu_607_p2;
wire   [31:0] temp1_8_fu_579_p2;
wire   [62:0] sum1_8_fu_613_p3;
wire   [31:0] temp3_8_fu_602_p2;
wire   [32:0] grp_fu_778_p3;
wire   [48:0] sum2_8_fu_629_p3;
wire   [63:0] zext_ln28_12_fu_621_p1;
wire   [63:0] res_shift_fu_640_p2;
wire   [63:0] zext_ln28_13_fu_636_p1;
wire   [63:0] sub_ln85_fu_646_p2;
wire   [31:0] shl_ln90_1_fu_657_p3;
wire   [63:0] zext_ln90_fu_664_p1;
wire   [63:0] sub_ln89_fu_652_p2;
wire   [63:0] sub_ln90_fu_668_p2;
wire   [0:0] tmp_8_fu_682_p3;
wire   [31:0] trunc_ln92_7_fu_694_p1;
wire   [31:0] trunc_ln92_8_fu_698_p1;
wire   [0:0] tmp_fu_674_p3;
wire   [31:0] trunc_ln92_fu_690_p1;
wire   [31:0] select_ln92_fu_702_p3;
wire   [31:0] add_ln40_fu_718_p2;
wire   [0:0] icmp_ln43_fu_724_p2;
wire   [31:0] sub_ln44_fu_729_p2;
wire   [31:0] sub_ln53_fu_743_p2;
wire   [0:0] tmp_9_fu_747_p3;
wire   [31:0] add_ln56_fu_755_p2;
wire   [15:0] grp_fu_769_p0;
wire   [15:0] grp_fu_769_p1;
wire   [31:0] grp_fu_769_p2;
wire   [15:0] grp_fu_778_p0;
wire   [14:0] grp_fu_778_p1;
wire   [31:0] grp_fu_778_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [32:0] grp_fu_769_p20;
wire   [30:0] grp_fu_778_p00;
wire   [32:0] grp_fu_778_p20;
wire   [31:0] temp1_8_fu_579_p00;
wire   [31:0] temp3_8_fu_602_p10;
wire   [30:0] temp4_8_fu_607_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U8(
    .din0(temp1_fu_372_p0),
    .din1(temp1_fu_372_p1),
    .dout(temp1_fu_372_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U9(
    .din0(temp2_fu_378_p0),
    .din1(temp2_fu_378_p1),
    .dout(temp2_fu_378_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U10(
    .din0(temp4_fu_384_p0),
    .din1(temp4_fu_384_p1),
    .dout(temp4_fu_384_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U11(
    .din0(temp1_7_fu_454_p0),
    .din1(temp1_7_fu_454_p1),
    .dout(temp1_7_fu_454_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U12(
    .din0(temp2_7_fu_459_p0),
    .din1(temp2_7_fu_459_p1),
    .dout(temp2_7_fu_459_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U13(
    .din0(temp3_7_fu_465_p0),
    .din1(temp3_7_fu_465_p1),
    .dout(temp3_7_fu_465_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U14(
    .din0(temp4_7_fu_470_p0),
    .din1(temp4_7_fu_470_p1),
    .dout(temp4_7_fu_470_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U15(
    .din0(temp1_8_fu_579_p0),
    .din1(temp1_8_fu_579_p1),
    .dout(temp1_8_fu_579_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U16(
    .din0(temp3_8_fu_602_p0),
    .din1(temp3_8_fu_602_p1),
    .dout(temp3_8_fu_602_p2)
);

Crypto_mul_15ns_16ns_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
mul_15ns_16ns_31_1_1_U17(
    .din0(temp4_8_fu_607_p0),
    .din1(temp4_8_fu_607_p1),
    .dout(temp4_8_fu_607_p2)
);

Crypto_mac_muladd_16ns_16ns_32ns_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 33 ))
mac_muladd_16ns_16ns_32ns_33_1_1_U18(
    .din0(grp_fu_769_p0),
    .din1(grp_fu_769_p1),
    .din2(grp_fu_769_p2),
    .dout(grp_fu_769_p3)
);

Crypto_mac_muladd_16ns_15ns_32ns_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 33 ))
mac_muladd_16ns_15ns_32ns_33_1_1_U19(
    .din0(grp_fu_778_p0),
    .din1(grp_fu_778_p1),
    .din2(grp_fu_778_p2),
    .dout(grp_fu_778_p3)
);

Crypto_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        j_1_fu_120 <= 31'd0;
    end else if (((icmp_ln160_fu_255_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        j_1_fu_120 <= add_ln160_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        phi_mul4_fu_116 <= 13'd0;
    end else if (((icmp_ln160_fu_255_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        phi_mul4_fu_116 <= add_ln164_1_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln160_fu_255_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input2_high_7_reg_874 <= {{m_1[19:16]}};
        res_2_reg_864 <= zext_ln163_fu_288_p1;
        res_reg_859 <= zext_ln162_fu_278_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        u_reg_879 <= DataTemp_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        v_reg_884 <= v_fu_710_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln19_8_cast_reg_850[15 : 0] <= zext_ln19_8_cast_fu_234_p1[15 : 0];
        zext_ln19_9_cast_reg_844[15 : 0] <= zext_ln19_9_cast_fu_230_p1[15 : 0];
        zext_ln64_1_cast_reg_832[30 : 0] <= zext_ln64_1_cast_fu_222_p1[30 : 0];
        zext_ln89_1_cast_reg_839[30 : 0] <= zext_ln89_1_cast_fu_226_p1[30 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataTemp_address0 = res_2_reg_864;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        DataTemp_address0 = zext_ln163_fu_288_p1;
    end else begin
        DataTemp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            DataTemp_address1 = res_reg_859;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            DataTemp_address1 = zext_ln162_fu_278_p1;
        end else begin
            DataTemp_address1 = 'bx;
        end
    end else begin
        DataTemp_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        DataTemp_ce0 = 1'b1;
    end else begin
        DataTemp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        DataTemp_ce1 = 1'b1;
    end else begin
        DataTemp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataTemp_we0 = 1'b1;
    end else begin
        DataTemp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        DataTemp_we1 = 1'b1;
    end else begin
        DataTemp_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln160_fu_255_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        twiddle_ram_ce0 = 1'b1;
    end else begin
        twiddle_ram_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DataTemp_d0 = ((tmp_9_fu_747_p3[0:0] == 1'b1) ? add_ln56_fu_755_p2 : sub_ln53_fu_743_p2);

assign DataTemp_d1 = ((icmp_ln43_fu_724_p2[0:0] == 1'b1) ? add_ln40_fu_718_p2 : sub_ln44_fu_729_p2);

assign add_ln160_fu_260_p2 = (j_1_fu_120 + 31'd1);

assign add_ln162_fu_273_p2 = (trunc_ln160_fu_269_p1 + trunc_ln158_2);

assign add_ln163_fu_283_p2 = (add_ln162_fu_273_p2 + trunc_ln158_1);

assign add_ln164_1_fu_293_p2 = (phi_mul4_fu_116 + trunc_ln10);

assign add_ln30_8_fu_502_p2 = (zext_ln30_17_fu_488_p1 + zext_ln30_18_fu_492_p1);

assign add_ln30_fu_496_p2 = (temp2_7_fu_459_p2 + temp3_7_fu_465_p2);

assign add_ln40_fu_718_p2 = (DataTemp_q1 + v_fu_710_p3);

assign add_ln56_fu_755_p2 = (sub_ln53_fu_743_p2 + zext_ln64_1_cast_reg_832);

assign add_ln74_fu_542_p2 = (trunc_ln32_1_fu_528_p3 + tmp_3_fu_520_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_769_p0 = zext_ln19_fu_354_p1;

assign grp_fu_769_p1 = zext_ln18_fu_350_p1;

assign grp_fu_769_p2 = grp_fu_769_p20;

assign grp_fu_769_p20 = temp2_fu_378_p2;

assign grp_fu_778_p0 = grp_fu_778_p00;

assign grp_fu_778_p00 = res_mult_shift_part_fu_548_p4;

assign grp_fu_778_p1 = zext_ln20_8_fu_575_p1;

assign grp_fu_778_p2 = grp_fu_778_p20;

assign grp_fu_778_p20 = temp3_8_fu_602_p2;

assign icmp_ln160_fu_255_p2 = (($signed(zext_ln160_fu_251_p1) < $signed(hf_1)) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_724_p2 = (($signed(add_ln40_fu_718_p2) < $signed(zext_ln64_1_cast_reg_832)) ? 1'b1 : 1'b0);

assign input1_high_4_fu_433_p4 = {{res_mult_fu_413_p2[61:46]}};

assign input1_high_fu_340_p4 = {{DataTemp_q0[31:16]}};

assign input1_low_7_fu_419_p4 = {{res_mult_fu_413_p2[45:30]}};

assign input1_low_fu_328_p1 = DataTemp_q0[15:0];

assign input2_high_8_fu_566_p4 = {{mod_1[30:16]}};

assign input2_high_fu_358_p4 = {{twiddle_ram_q0[31:16]}};

assign input2_low_fu_332_p1 = twiddle_ram_q0[15:0];

assign res_mult_fu_413_p2 = (zext_ln28_fu_409_p1 + sum1_fu_390_p3);

assign res_mult_shift_fu_536_p2 = (zext_ln28_11_fu_516_p1 + sum1_7_fu_480_p3);

assign res_mult_shift_part_fu_548_p4 = {{add_ln74_fu_542_p2[47:32]}};

assign res_shift_fu_640_p2 = (res_mult_fu_413_p2 - zext_ln28_12_fu_621_p1);

assign select_ln92_fu_702_p3 = ((tmp_8_fu_682_p3[0:0] == 1'b1) ? trunc_ln92_7_fu_694_p1 : trunc_ln92_8_fu_698_p1);

assign sext_ln20_fu_447_p1 = $signed(input2_high_7_reg_874);

assign shl_ln90_1_fu_657_p3 = {{mod_1}, {1'd0}};

assign sub_ln44_fu_729_p2 = (add_ln40_fu_718_p2 - zext_ln64_1_cast_reg_832);

assign sub_ln53_fu_743_p2 = (u_reg_879 - v_reg_884);

assign sub_ln85_fu_646_p2 = (res_shift_fu_640_p2 - zext_ln28_13_fu_636_p1);

assign sub_ln89_fu_652_p2 = (sub_ln85_fu_646_p2 - zext_ln89_1_cast_reg_839);

assign sub_ln90_fu_668_p2 = (sub_ln85_fu_646_p2 - zext_ln90_fu_664_p1);

assign sum1_7_fu_480_p3 = {{temp4_7_fu_470_p2}, {temp1_7_fu_454_p2}};

assign sum1_8_fu_613_p3 = {{temp4_8_fu_607_p2}, {temp1_8_fu_579_p2}};

assign sum1_fu_390_p3 = {{temp4_fu_384_p2}, {temp1_fu_372_p2}};

assign sum2_7_fu_508_p3 = {{add_ln30_8_fu_502_p2}, {16'd0}};

assign sum2_8_fu_629_p3 = {{grp_fu_778_p3}, {16'd0}};

assign sum2_fu_402_p3 = {{grp_fu_769_p3}, {16'd0}};

assign temp1_7_fu_454_p0 = zext_ln17_11_fu_429_p1;

assign temp1_7_fu_454_p1 = zext_ln19_8_cast_reg_850;

assign temp1_8_fu_579_p0 = temp1_8_fu_579_p00;

assign temp1_8_fu_579_p00 = res_mult_shift_part_fu_548_p4;

assign temp1_8_fu_579_p1 = zext_ln19_9_cast_reg_844;

assign temp1_fu_372_p0 = zext_ln19_fu_354_p1;

assign temp1_fu_372_p1 = zext_ln17_fu_336_p1;

assign temp2_7_fu_459_p0 = zext_ln17_11_fu_429_p1;

assign temp2_7_fu_459_p1 = zext_ln20_7_fu_450_p1;

assign temp2_fu_378_p0 = zext_ln20_fu_368_p1;

assign temp2_fu_378_p1 = zext_ln17_fu_336_p1;

assign temp3_7_fu_465_p0 = zext_ln18_5_fu_443_p1;

assign temp3_7_fu_465_p1 = zext_ln19_8_cast_reg_850;

assign temp3_8_fu_602_p0 = zext_ln19_9_cast_reg_844;

assign temp3_8_fu_602_p1 = temp3_8_fu_602_p10;

assign temp3_8_fu_602_p10 = trunc_ln24_4_fu_584_p4;

assign temp4_7_fu_470_p0 = zext_ln18_5_fu_443_p1;

assign temp4_7_fu_470_p1 = zext_ln20_7_fu_450_p1;

assign temp4_8_fu_607_p0 = zext_ln20_8_fu_575_p1;

assign temp4_8_fu_607_p1 = temp4_8_fu_607_p10;

assign temp4_8_fu_607_p10 = trunc_ln24_4_fu_584_p4;

assign temp4_fu_384_p0 = zext_ln20_fu_368_p1;

assign temp4_fu_384_p1 = zext_ln18_fu_350_p1;

assign tmp_3_fu_520_p3 = {{trunc_ln29_fu_476_p1}, {temp1_7_fu_454_p2}};

assign tmp_8_fu_682_p3 = sub_ln90_fu_668_p2[32'd63];

assign tmp_9_fu_747_p3 = sub_ln53_fu_743_p2[32'd31];

assign tmp_fu_674_p3 = sub_ln89_fu_652_p2[32'd63];

assign trunc_ln160_fu_269_p1 = j_1_fu_120[11:0];

assign trunc_ln24_4_fu_584_p4 = {{res_mult_shift_fu_536_p2[63:48]}};

assign trunc_ln29_fu_476_p1 = temp4_7_fu_470_p2[15:0];

assign trunc_ln32_1_fu_528_p3 = {{add_ln30_fu_496_p2}, {16'd0}};

assign trunc_ln92_7_fu_694_p1 = sub_ln89_fu_652_p2[31:0];

assign trunc_ln92_8_fu_698_p1 = sub_ln90_fu_668_p2[31:0];

assign trunc_ln92_fu_690_p1 = sub_ln85_fu_646_p2[31:0];

assign twiddle_ram_address0 = zext_ln164_fu_304_p1;

assign v_fu_710_p3 = ((tmp_fu_674_p3[0:0] == 1'b1) ? trunc_ln92_fu_690_p1 : select_ln92_fu_702_p3);

assign xor_ln164_fu_298_p2 = (phi_mul4_fu_116 ^ 13'd4096);

assign zext_ln160_fu_251_p1 = j_1_fu_120;

assign zext_ln162_fu_278_p1 = add_ln162_fu_273_p2;

assign zext_ln163_fu_288_p1 = add_ln163_fu_283_p2;

assign zext_ln164_fu_304_p1 = xor_ln164_fu_298_p2;

assign zext_ln17_11_fu_429_p1 = input1_low_7_fu_419_p4;

assign zext_ln17_fu_336_p1 = input1_low_fu_328_p1;

assign zext_ln18_5_fu_443_p1 = input1_high_4_fu_433_p4;

assign zext_ln18_fu_350_p1 = input1_high_fu_340_p4;

assign zext_ln19_8_cast_fu_234_p1 = zext_ln19_8;

assign zext_ln19_9_cast_fu_230_p1 = zext_ln19_9;

assign zext_ln19_fu_354_p1 = input2_low_fu_332_p1;

assign zext_ln20_7_fu_450_p1 = $unsigned(sext_ln20_fu_447_p1);

assign zext_ln20_8_fu_575_p1 = input2_high_8_fu_566_p4;

assign zext_ln20_fu_368_p1 = input2_high_fu_358_p4;

assign zext_ln28_11_fu_516_p1 = sum2_7_fu_508_p3;

assign zext_ln28_12_fu_621_p1 = sum1_8_fu_613_p3;

assign zext_ln28_13_fu_636_p1 = sum2_8_fu_629_p3;

assign zext_ln28_fu_409_p1 = sum2_fu_402_p3;

assign zext_ln30_17_fu_488_p1 = temp2_7_fu_459_p2;

assign zext_ln30_18_fu_492_p1 = temp3_7_fu_465_p2;

assign zext_ln64_1_cast_fu_222_p1 = zext_ln64_1;

assign zext_ln89_1_cast_fu_226_p1 = zext_ln89_1;

assign zext_ln90_fu_664_p1 = shl_ln90_1_fu_657_p3;

always @ (posedge ap_clk) begin
    zext_ln64_1_cast_reg_832[31] <= 1'b0;
    zext_ln89_1_cast_reg_839[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln19_9_cast_reg_844[31:16] <= 16'b0000000000000000;
    zext_ln19_8_cast_reg_850[31:16] <= 16'b0000000000000000;
end

endmodule //Crypto_Crypto_Pipeline_INTT_PE_LOOP
