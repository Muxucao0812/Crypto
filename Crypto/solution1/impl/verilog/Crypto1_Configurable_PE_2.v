// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Crypto1_Configurable_PE_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input1_val,
        input2_val,
        twiddle_factor_val2,
        MOD_INDEX,
        op,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] input1_val;
input  [31:0] input2_val;
input  [31:0] twiddle_factor_val2;
input  [1:0] MOD_INDEX;
input  [2:0] op;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] MOD_INDEX_read_reg_366;
wire   [31:0] twiddle_factor_val2_read_reg_372;
wire   [0:0] icmp_ln190_fu_114_p2;
reg   [0:0] icmp_ln190_reg_388;
wire   [31:0] temp1_fu_120_p2;
reg   [31:0] temp1_reg_392;
wire   [31:0] zext_ln76_fu_146_p1;
reg   [31:0] zext_ln76_reg_399;
wire   [31:0] res2_temp_2_fu_170_p3;
reg   [31:0] res2_temp_2_reg_405;
reg   [29:0] trunc_ln208_1_reg_410;
wire   [31:0] res1_temp_fu_194_p2;
reg   [31:0] res1_temp_reg_416;
wire    ap_CS_fsm_state14;
wire   [31:0] res2_temp_fu_199_p2;
reg   [31:0] res2_temp_reg_423;
reg   [0:0] tmp_380_reg_429;
wire   [31:0] res1_temp_2_fu_245_p3;
wire    ap_CS_fsm_state15;
wire   [31:0] select_ln88_fu_257_p3;
wire   [31:0] add_ln208_1_fu_313_p2;
reg   [31:0] add_ln208_1_reg_444;
wire    ap_CS_fsm_state16;
wire   [31:0] add_ln210_fu_348_p2;
reg   [31:0] add_ln210_reg_449;
wire    ap_CS_fsm_state29;
reg   [31:0] grp_MUL_MOD_fu_104_input1_val;
reg   [31:0] grp_MUL_MOD_fu_104_input2_val;
reg   [1:0] grp_MUL_MOD_fu_104_MOD_INDEX;
wire   [31:0] grp_MUL_MOD_fu_104_ap_return;
reg    grp_MUL_MOD_fu_104_ap_ce;
wire    ap_CS_fsm_state30;
reg   [31:0] ap_phi_mux_res1_1_phi_fu_89_p4;
reg   [31:0] res1_1_reg_86;
reg   [31:0] ap_phi_mux_res2_1_phi_fu_98_p4;
reg   [31:0] res2_1_reg_95;
wire   [30:0] zext_ln76_cast_fu_126_p7;
wire   [30:0] zext_ln76_cast_fu_126_p9;
wire   [31:0] res2_temp_1_fu_150_p2;
wire   [0:0] tmp_fu_156_p3;
wire   [31:0] add_ln89_1_fu_164_p2;
wire   [30:0] add_ln208_fu_178_p2;
wire   [30:0] zext_ln76_3_cast_fu_212_p7;
wire   [30:0] zext_ln76_3_cast_fu_212_p9;
wire   [31:0] zext_ln76_1_fu_231_p1;
wire   [0:0] icmp_ln76_1_fu_235_p2;
wire   [31:0] res1_temp_1_fu_240_p2;
wire   [31:0] add_ln89_fu_252_p2;
wire   [0:0] icmp_ln76_fu_263_p2;
wire   [0:0] xor_ln76_fu_267_p2;
wire   [31:0] sub_ln77_fu_273_p2;
wire   [31:0] temp1_1_fu_277_p3;
wire   [30:0] trunc_ln_fu_284_p4;
wire   [0:0] trunc_ln208_fu_298_p1;
wire   [29:0] select_ln208_fu_302_p3;
wire   [31:0] zext_ln208_fu_309_p1;
wire  signed [31:0] sext_ln208_fu_294_p1;
wire   [30:0] trunc_ln1_fu_319_p4;
wire   [0:0] trunc_ln210_fu_333_p1;
wire   [29:0] select_ln210_fu_337_p3;
wire   [31:0] zext_ln210_fu_344_p1;
wire  signed [31:0] sext_ln210_fu_329_p1;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [29:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire   [1:0] zext_ln76_cast_fu_126_p1;
wire   [1:0] zext_ln76_cast_fu_126_p3;
wire  signed [1:0] zext_ln76_cast_fu_126_p5;
wire   [1:0] zext_ln76_3_cast_fu_212_p1;
wire   [1:0] zext_ln76_3_cast_fu_212_p3;
wire  signed [1:0] zext_ln76_3_cast_fu_212_p5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

Crypto1_MUL_MOD grp_MUL_MOD_fu_104(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .input1_val(grp_MUL_MOD_fu_104_input1_val),
    .input2_val(grp_MUL_MOD_fu_104_input2_val),
    .MOD_INDEX(grp_MUL_MOD_fu_104_MOD_INDEX),
    .ap_return(grp_MUL_MOD_fu_104_ap_return),
    .ap_ce(grp_MUL_MOD_fu_104_ap_ce)
);

(* dissolve_hierarchy = "yes" *) Crypto1_sparsemux_7_2_31_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 31 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 31 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 31 ),
    .def_WIDTH( 31 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 31 ))
sparsemux_7_2_31_1_0_U277(
    .din0(31'd1073750017),
    .din1(31'd1073815553),
    .din2(31'd1073872897),
    .def(zext_ln76_cast_fu_126_p7),
    .sel(MOD_INDEX),
    .dout(zext_ln76_cast_fu_126_p9)
);

(* dissolve_hierarchy = "yes" *) Crypto1_sparsemux_7_2_31_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 31 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 31 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 31 ),
    .def_WIDTH( 31 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 31 ))
sparsemux_7_2_31_1_0_U278(
    .din0(31'd1073750017),
    .din1(31'd1073815553),
    .din2(31'd1073872897),
    .def(zext_ln76_3_cast_fu_212_p7),
    .sel(MOD_INDEX),
    .dout(zext_ln76_3_cast_fu_212_p9)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_return_0_preg <= ap_phi_mux_res1_1_phi_fu_89_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_return_1_preg <= ap_phi_mux_res2_1_phi_fu_98_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        res1_1_reg_86 <= res1_temp_2_fu_245_p3;
    end else if (((icmp_ln190_reg_388 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
        res1_1_reg_86 <= add_ln208_1_reg_444;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        res2_1_reg_95 <= select_ln88_fu_257_p3;
    end else if (((icmp_ln190_reg_388 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
        res2_1_reg_95 <= add_ln210_reg_449;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln208_1_reg_444 <= add_ln208_1_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        add_ln210_reg_449 <= add_ln210_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln190_reg_388 <= icmp_ln190_fu_114_p2;
        res2_temp_2_reg_405 <= res2_temp_2_fu_170_p3;
        temp1_reg_392 <= temp1_fu_120_p2;
        trunc_ln208_1_reg_410 <= {{add_ln208_fu_178_p2[30:1]}};
        zext_ln76_reg_399[30 : 0] <= zext_ln76_fu_146_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        res1_temp_reg_416 <= res1_temp_fu_194_p2;
        res2_temp_reg_423 <= res2_temp_fu_199_p2;
        tmp_380_reg_429 <= res2_temp_fu_199_p2[32'd31];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln190_reg_388 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_phi_mux_res1_1_phi_fu_89_p4 = add_ln208_1_reg_444;
    end else begin
        ap_phi_mux_res1_1_phi_fu_89_p4 = res1_1_reg_86;
    end
end

always @ (*) begin
    if (((icmp_ln190_reg_388 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_phi_mux_res2_1_phi_fu_98_p4 = add_ln210_reg_449;
    end else begin
        ap_phi_mux_res2_1_phi_fu_98_p4 = res2_1_reg_95;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ap_return_0 = ap_phi_mux_res1_1_phi_fu_89_p4;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ap_return_1 = ap_phi_mux_res2_1_phi_fu_98_p4;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_MUL_MOD_fu_104_MOD_INDEX = MOD_INDEX_read_reg_366;
    end else if (((icmp_ln190_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_MUL_MOD_fu_104_MOD_INDEX = MOD_INDEX;
    end else begin
        grp_MUL_MOD_fu_104_MOD_INDEX = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state30) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_MUL_MOD_fu_104_ap_ce = 1'b0;
    end else begin
        grp_MUL_MOD_fu_104_ap_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_MUL_MOD_fu_104_input1_val = res2_temp_2_reg_405;
    end else if (((icmp_ln190_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_MUL_MOD_fu_104_input1_val = input2_val;
    end else begin
        grp_MUL_MOD_fu_104_input1_val = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_MUL_MOD_fu_104_input2_val = twiddle_factor_val2_read_reg_372;
    end else if (((icmp_ln190_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_MUL_MOD_fu_104_input2_val = twiddle_factor_val2;
    end else begin
        grp_MUL_MOD_fu_104_input2_val = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln190_fu_114_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((icmp_ln190_fu_114_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MOD_INDEX_read_reg_366 = MOD_INDEX;

assign add_ln208_1_fu_313_p2 = ($signed(zext_ln208_fu_309_p1) + $signed(sext_ln208_fu_294_p1));

assign add_ln208_fu_178_p2 = (zext_ln76_cast_fu_126_p9 + 31'd1);

assign add_ln210_fu_348_p2 = ($signed(zext_ln210_fu_344_p1) + $signed(sext_ln210_fu_329_p1));

assign add_ln89_1_fu_164_p2 = (zext_ln76_fu_146_p1 + res2_temp_1_fu_150_p2);

assign add_ln89_fu_252_p2 = (res2_temp_reg_423 + zext_ln76_1_fu_231_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign icmp_ln190_fu_114_p2 = ((op == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln76_1_fu_235_p2 = (($signed(res1_temp_reg_416) < $signed(zext_ln76_1_fu_231_p1)) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_263_p2 = (($signed(temp1_reg_392) < $signed(zext_ln76_reg_399)) ? 1'b1 : 1'b0);

assign res1_temp_1_fu_240_p2 = (res1_temp_reg_416 - zext_ln76_1_fu_231_p1);

assign res1_temp_2_fu_245_p3 = ((icmp_ln76_1_fu_235_p2[0:0] == 1'b1) ? res1_temp_reg_416 : res1_temp_1_fu_240_p2);

assign res1_temp_fu_194_p2 = (grp_MUL_MOD_fu_104_ap_return + input1_val);

assign res2_temp_1_fu_150_p2 = (input1_val - input2_val);

assign res2_temp_2_fu_170_p3 = ((tmp_fu_156_p3[0:0] == 1'b1) ? add_ln89_1_fu_164_p2 : res2_temp_1_fu_150_p2);

assign res2_temp_fu_199_p2 = (input1_val - grp_MUL_MOD_fu_104_ap_return);

assign select_ln208_fu_302_p3 = ((trunc_ln208_fu_298_p1[0:0] == 1'b1) ? trunc_ln208_1_reg_410 : 30'd0);

assign select_ln210_fu_337_p3 = ((trunc_ln210_fu_333_p1[0:0] == 1'b1) ? trunc_ln208_1_reg_410 : 30'd0);

assign select_ln88_fu_257_p3 = ((tmp_380_reg_429[0:0] == 1'b1) ? add_ln89_fu_252_p2 : res2_temp_reg_423);

assign sext_ln208_fu_294_p1 = $signed(trunc_ln_fu_284_p4);

assign sext_ln210_fu_329_p1 = $signed(trunc_ln1_fu_319_p4);

assign sub_ln77_fu_273_p2 = (temp1_reg_392 - zext_ln76_reg_399);

assign temp1_1_fu_277_p3 = ((xor_ln76_fu_267_p2[0:0] == 1'b1) ? sub_ln77_fu_273_p2 : temp1_reg_392);

assign temp1_fu_120_p2 = (input2_val + input1_val);

assign tmp_fu_156_p3 = res2_temp_1_fu_150_p2[32'd31];

assign trunc_ln1_fu_319_p4 = {{grp_MUL_MOD_fu_104_ap_return[31:1]}};

assign trunc_ln208_fu_298_p1 = temp1_1_fu_277_p3[0:0];

assign trunc_ln210_fu_333_p1 = grp_MUL_MOD_fu_104_ap_return[0:0];

assign trunc_ln_fu_284_p4 = {{temp1_1_fu_277_p3[31:1]}};

assign twiddle_factor_val2_read_reg_372 = twiddle_factor_val2;

assign xor_ln76_fu_267_p2 = (icmp_ln76_fu_263_p2 ^ 1'd1);

assign zext_ln208_fu_309_p1 = select_ln208_fu_302_p3;

assign zext_ln210_fu_344_p1 = select_ln210_fu_337_p3;

assign zext_ln76_1_fu_231_p1 = zext_ln76_3_cast_fu_212_p9;

assign zext_ln76_3_cast_fu_212_p7 = 'bx;

assign zext_ln76_cast_fu_126_p7 = 'bx;

assign zext_ln76_fu_146_p1 = zext_ln76_cast_fu_126_p9;

always @ (posedge ap_clk) begin
    zext_ln76_reg_399[31] <= 1'b0;
end

endmodule //Crypto1_Configurable_PE_2
