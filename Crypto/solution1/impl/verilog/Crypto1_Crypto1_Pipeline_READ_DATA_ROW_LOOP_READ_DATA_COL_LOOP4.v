// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Crypto1_Crypto1_Pipeline_READ_DATA_ROW_LOOP_READ_DATA_COL_LOOP4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        DataOutStream_TREADY,
        add_ln99_1,
        DataRAM_address0,
        DataRAM_ce0,
        DataRAM_q0,
        DataRAM_1_address0,
        DataRAM_1_ce0,
        DataRAM_1_q0,
        DataRAM_2_address0,
        DataRAM_2_ce0,
        DataRAM_2_q0,
        DataRAM_3_address0,
        DataRAM_3_ce0,
        DataRAM_3_q0,
        DataRAM_4_address0,
        DataRAM_4_ce0,
        DataRAM_4_q0,
        DataRAM_5_address0,
        DataRAM_5_ce0,
        DataRAM_5_q0,
        DataRAM_6_address0,
        DataRAM_6_ce0,
        DataRAM_6_q0,
        DataRAM_7_address0,
        DataRAM_7_ce0,
        DataRAM_7_q0,
        DataOutStream_TDATA,
        DataOutStream_TVALID,
        DataOutStream_TKEEP,
        DataOutStream_TSTRB,
        DataOutStream_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   DataOutStream_TREADY;
input  [41:0] add_ln99_1;
output  [12:0] DataRAM_address0;
output   DataRAM_ce0;
input  [31:0] DataRAM_q0;
output  [12:0] DataRAM_1_address0;
output   DataRAM_1_ce0;
input  [31:0] DataRAM_1_q0;
output  [12:0] DataRAM_2_address0;
output   DataRAM_2_ce0;
input  [31:0] DataRAM_2_q0;
output  [12:0] DataRAM_3_address0;
output   DataRAM_3_ce0;
input  [31:0] DataRAM_3_q0;
output  [12:0] DataRAM_4_address0;
output   DataRAM_4_ce0;
input  [31:0] DataRAM_4_q0;
output  [12:0] DataRAM_5_address0;
output   DataRAM_5_ce0;
input  [31:0] DataRAM_5_q0;
output  [12:0] DataRAM_6_address0;
output   DataRAM_6_ce0;
input  [31:0] DataRAM_6_q0;
output  [12:0] DataRAM_7_address0;
output   DataRAM_7_ce0;
input  [31:0] DataRAM_7_q0;
output  [31:0] DataOutStream_TDATA;
output   DataOutStream_TVALID;
output  [3:0] DataOutStream_TKEEP;
output  [3:0] DataOutStream_TSTRB;
output  [0:0] DataOutStream_TLAST;

reg ap_idle;
reg DataRAM_ce0;
reg DataRAM_1_ce0;
reg DataRAM_2_ce0;
reg DataRAM_3_ce0;
reg DataRAM_4_ce0;
reg DataRAM_5_ce0;
reg DataRAM_6_ce0;
reg DataRAM_7_ce0;
reg DataOutStream_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln96_fu_250_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    DataOutStream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [6:0] add_ln96_1_fu_268_p2;
reg   [6:0] add_ln96_1_reg_441;
wire   [0:0] icmp_ln98_fu_274_p2;
reg   [0:0] icmp_ln98_reg_446;
wire   [6:0] select_ln96_fu_280_p3;
reg   [6:0] select_ln96_reg_451;
wire   [6:0] select_ln96_1_fu_288_p3;
reg   [6:0] select_ln96_1_reg_456;
wire   [0:0] cmp137_265_fu_296_p2;
reg   [0:0] cmp137_265_reg_461;
wire   [2:0] empty_fu_302_p1;
reg   [2:0] empty_reg_466;
reg   [2:0] trunc_ln98_2_reg_471;
reg   [2:0] trunc_ln98_2_reg_471_pp0_iter1_reg;
wire   [6:0] add_ln98_fu_316_p2;
reg   [6:0] add_ln98_reg_476;
wire   [0:0] DataStreamReg_last_fu_379_p2;
reg   [0:0] DataStreamReg_last_reg_521;
wire   [63:0] zext_ln99_1_fu_362_p1;
reg   [6:0] k_fu_92;
reg   [6:0] ap_sig_allocacmp_k_load;
wire    ap_loop_init;
reg   [6:0] j_fu_96;
reg   [6:0] ap_sig_allocacmp_j_load;
reg   [12:0] indvar_flatten76_fu_100;
wire   [12:0] add_ln96_fu_256_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten76_load;
wire   [31:0] DataStreamReg_data_fu_389_p10;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] trunc_ln99_fu_332_p1;
wire   [9:0] zext_ln99_fu_335_p1;
wire   [0:0] cmp137_2_mid1_fu_344_p2;
wire   [9:0] add_ln99_fu_338_p2;
wire   [12:0] tmp_s_fu_355_p3;
wire   [0:0] select_ln96_2_fu_349_p3;
wire   [0:0] icmp_ln102_fu_374_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Crypto1_mux_8_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_8_3_32_1_1_U543(
    .din0(DataRAM_q0),
    .din1(DataRAM_1_q0),
    .din2(DataRAM_2_q0),
    .din3(DataRAM_3_q0),
    .din4(DataRAM_4_q0),
    .din5(DataRAM_5_q0),
    .din6(DataRAM_6_q0),
    .din7(DataRAM_7_q0),
    .din8(trunc_ln98_2_reg_471_pp0_iter1_reg),
    .dout(DataStreamReg_data_fu_389_p10)
);

Crypto1_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln96_fu_250_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten76_fu_100 <= add_ln96_fu_256_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten76_fu_100 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln96_fu_250_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_96 <= select_ln96_1_fu_288_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_96 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_92 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            k_fu_92 <= add_ln98_reg_476;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataStreamReg_last_reg_521 <= DataStreamReg_last_fu_379_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        trunc_ln98_2_reg_471_pp0_iter1_reg <= trunc_ln98_2_reg_471;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln96_1_reg_441 <= add_ln96_1_fu_268_p2;
        add_ln98_reg_476 <= add_ln98_fu_316_p2;
        cmp137_265_reg_461 <= cmp137_265_fu_296_p2;
        empty_reg_466 <= empty_fu_302_p1;
        icmp_ln98_reg_446 <= icmp_ln98_fu_274_p2;
        select_ln96_1_reg_456 <= select_ln96_1_fu_288_p3;
        select_ln96_reg_451 <= select_ln96_fu_280_p3;
        trunc_ln98_2_reg_471 <= {{select_ln96_fu_280_p3[5:3]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        DataOutStream_TDATA_blk_n = DataOutStream_TREADY;
    end else begin
        DataOutStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        DataOutStream_TVALID = 1'b1;
    end else begin
        DataOutStream_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataRAM_1_ce0 = 1'b1;
    end else begin
        DataRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataRAM_2_ce0 = 1'b1;
    end else begin
        DataRAM_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataRAM_3_ce0 = 1'b1;
    end else begin
        DataRAM_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataRAM_4_ce0 = 1'b1;
    end else begin
        DataRAM_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataRAM_5_ce0 = 1'b1;
    end else begin
        DataRAM_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataRAM_6_ce0 = 1'b1;
    end else begin
        DataRAM_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataRAM_7_ce0 = 1'b1;
    end else begin
        DataRAM_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataRAM_ce0 = 1'b1;
    end else begin
        DataRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln96_fu_250_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten76_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten76_load = indvar_flatten76_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 7'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_k_load = 7'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_k_load = add_ln98_reg_476;
        end else begin
            ap_sig_allocacmp_k_load = k_fu_92;
        end
    end else begin
        ap_sig_allocacmp_k_load = k_fu_92;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DataOutStream_TDATA = DataStreamReg_data_fu_389_p10;

assign DataOutStream_TKEEP = 4'd15;

assign DataOutStream_TLAST = DataStreamReg_last_reg_521;

assign DataOutStream_TSTRB = 4'd15;

assign DataRAM_1_address0 = zext_ln99_1_fu_362_p1;

assign DataRAM_2_address0 = zext_ln99_1_fu_362_p1;

assign DataRAM_3_address0 = zext_ln99_1_fu_362_p1;

assign DataRAM_4_address0 = zext_ln99_1_fu_362_p1;

assign DataRAM_5_address0 = zext_ln99_1_fu_362_p1;

assign DataRAM_6_address0 = zext_ln99_1_fu_362_p1;

assign DataRAM_7_address0 = zext_ln99_1_fu_362_p1;

assign DataRAM_address0 = zext_ln99_1_fu_362_p1;

assign DataStreamReg_last_fu_379_p2 = (select_ln96_2_fu_349_p3 & icmp_ln102_fu_374_p2);

assign add_ln96_1_fu_268_p2 = (ap_sig_allocacmp_j_load + 7'd1);

assign add_ln96_fu_256_p2 = (ap_sig_allocacmp_indvar_flatten76_load + 13'd1);

assign add_ln98_fu_316_p2 = (select_ln96_fu_280_p3 + 7'd1);

assign add_ln99_fu_338_p2 = (trunc_ln99_fu_332_p1 + zext_ln99_fu_335_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == DataOutStream_TREADY) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == DataOutStream_TREADY) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == DataOutStream_TREADY) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (1'b0 == DataOutStream_TREADY);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign cmp137_265_fu_296_p2 = ((ap_sig_allocacmp_j_load == 7'd63) ? 1'b1 : 1'b0);

assign cmp137_2_mid1_fu_344_p2 = ((add_ln96_1_reg_441 == 7'd63) ? 1'b1 : 1'b0);

assign empty_fu_302_p1 = select_ln96_fu_280_p3[2:0];

assign icmp_ln102_fu_374_p2 = ((select_ln96_reg_451 == 7'd63) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_250_p2 = ((ap_sig_allocacmp_indvar_flatten76_load == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_274_p2 = ((ap_sig_allocacmp_k_load == 7'd64) ? 1'b1 : 1'b0);

assign select_ln96_1_fu_288_p3 = ((icmp_ln98_fu_274_p2[0:0] == 1'b1) ? add_ln96_1_fu_268_p2 : ap_sig_allocacmp_j_load);

assign select_ln96_2_fu_349_p3 = ((icmp_ln98_reg_446[0:0] == 1'b1) ? cmp137_2_mid1_fu_344_p2 : cmp137_265_reg_461);

assign select_ln96_fu_280_p3 = ((icmp_ln98_fu_274_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_k_load);

assign tmp_s_fu_355_p3 = {{add_ln99_fu_338_p2}, {empty_reg_466}};

assign trunc_ln99_fu_332_p1 = add_ln99_1[9:0];

assign zext_ln99_1_fu_362_p1 = tmp_s_fu_355_p3;

assign zext_ln99_fu_335_p1 = select_ln96_1_reg_456;

endmodule //Crypto1_Crypto1_Pipeline_READ_DATA_ROW_LOOP_READ_DATA_COL_LOOP4
