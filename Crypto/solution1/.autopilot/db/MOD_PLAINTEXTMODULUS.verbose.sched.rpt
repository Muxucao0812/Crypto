

================================================================
== Vitis HLS Report for 'MOD_PLAINTEXTMODULUS'
================================================================
* Date:           Thu Feb 27 10:54:21 2025

* Version:        2023.1 (Build 3854077 on May  4 2023)
* Project:        Crypto
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+---------+----------+------------+
    |  Clock |  Target | Estimated| Uncertainty|
    +--------+---------+----------+------------+
    |ap_clk  |  8.00 ns|  5.683 ns|     2.16 ns|
    +--------+---------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+-----+---------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max    | min | max |   Type  |
    +---------+---------+-----------+-----------+-----+-----+---------+
    |        4|        4|  32.000 ns|  32.000 ns|    1|    1|      yes|
    +---------+---------+-----------+-----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 1
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 5


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 5
* Pipeline : 1
  Pipeline-0 : II = 1, D = 5, States = { 1 2 3 4 5 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 5.65>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%input_val_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %input_val" [Arithmetic.cpp:10->Arithmetic.cpp:70]   --->   Operation 6 'read' 'input_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%tmp_1 = partselect i16 @_ssdm_op_PartSelect.i16.i32.i32.i32, i32 %input_val_read, i32 16, i32 31" [Arithmetic.cpp:71]   --->   Operation 7 'partselect' 'tmp_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%res_mult_high = bitconcatenate i17 @_ssdm_op_BitConcatenate.i17.i1.i16, i1 0, i16 %tmp_1" [Arithmetic.cpp:71]   --->   Operation 8 'bitconcatenate' 'res_mult_high' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%zext_ln71 = zext i17 %res_mult_high" [Arithmetic.cpp:71]   --->   Operation 9 'zext' 'zext_ln71' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%shl_ln = bitconcatenate i32 @_ssdm_op_BitConcatenate.i32.i16.i16, i16 %tmp_1, i16 0" [Arithmetic.cpp:22->Arithmetic.cpp:73]   --->   Operation 10 'bitconcatenate' 'shl_ln' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%shl_ln22_1 = bitconcatenate i19 @_ssdm_op_BitConcatenate.i19.i1.i16.i2, i1 0, i16 %tmp_1, i2 0" [Arithmetic.cpp:22->Arithmetic.cpp:73]   --->   Operation 11 'bitconcatenate' 'shl_ln22_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%zext_ln22 = zext i19 %shl_ln22_1" [Arithmetic.cpp:22->Arithmetic.cpp:73]   --->   Operation 12 'zext' 'zext_ln22' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%zext_ln22_1 = zext i19 %shl_ln22_1" [Arithmetic.cpp:22->Arithmetic.cpp:73]   --->   Operation 13 'zext' 'zext_ln22_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (2.55ns)   --->   "%temp1 = sub i32 %shl_ln, i32 %zext_ln22" [Arithmetic.cpp:22->Arithmetic.cpp:73]   --->   Operation 14 'sub' 'temp1' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 15 [1/1] (2.16ns)   --->   "%temp2 = sub i20 %zext_ln22_1, i20 %zext_ln71" [Arithmetic.cpp:23->Arithmetic.cpp:73]   --->   Operation 15 'sub' 'temp2' <Predicate = true> <Delay = 2.16> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.16> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%sum1 = bitconcatenate i33 @_ssdm_op_BitConcatenate.i33.i1.i32, i1 0, i32 %temp1" [Arithmetic.cpp:29->Arithmetic.cpp:73]   --->   Operation 16 'bitconcatenate' 'sum1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%zext_ln28 = zext i33 %sum1" [Arithmetic.cpp:28->Arithmetic.cpp:73]   --->   Operation 17 'zext' 'zext_ln28' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%sum2 = bitconcatenate i36 @_ssdm_op_BitConcatenate.i36.i20.i16, i20 %temp2, i16 0" [Arithmetic.cpp:30->Arithmetic.cpp:73]   --->   Operation 18 'bitconcatenate' 'sum2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%sext_ln28 = sext i36 %sum2" [Arithmetic.cpp:28->Arithmetic.cpp:73]   --->   Operation 19 'sext' 'sext_ln28' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%zext_ln28_7 = zext i48 %sext_ln28" [Arithmetic.cpp:28->Arithmetic.cpp:73]   --->   Operation 20 'zext' 'zext_ln28_7' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%zext_ln32 = zext i33 %sum1" [Arithmetic.cpp:32->Arithmetic.cpp:73]   --->   Operation 21 'zext' 'zext_ln32' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%trunc_ln32 = trunc i20 %temp2" [Arithmetic.cpp:32->Arithmetic.cpp:73]   --->   Operation 22 'trunc' 'trunc_ln32' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%trunc_ln = bitconcatenate i34 @_ssdm_op_BitConcatenate.i34.i18.i16, i18 %trunc_ln32, i16 0" [Arithmetic.cpp:32->Arithmetic.cpp:73]   --->   Operation 23 'bitconcatenate' 'trunc_ln' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (3.10ns)   --->   "%res_mult_shift = add i49 %zext_ln28_7, i49 %zext_ln28" [Arithmetic.cpp:32->Arithmetic.cpp:73]   --->   Operation 24 'add' 'res_mult_shift' <Predicate = true> <Delay = 3.10> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.10> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 25 [1/1] (2.63ns)   --->   "%add_ln72 = add i34 %trunc_ln, i34 %zext_ln32" [Arithmetic.cpp:72]   --->   Operation 25 'add' 'add_ln72' <Predicate = true> <Delay = 2.63> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.63> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%res_mult_shift_part = partselect i16 @_ssdm_op_PartSelect.i16.i34.i32.i32, i34 %add_ln72, i32 18, i32 33" [Arithmetic.cpp:75]   --->   Operation 26 'partselect' 'res_mult_shift_part' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%trunc_ln7 = partselect i15 @_ssdm_op_PartSelect.i15.i49.i32.i32, i49 %res_mult_shift, i32 34, i32 48" [Arithmetic.cpp:18->Arithmetic.cpp:76]   --->   Operation 27 'partselect' 'trunc_ln7' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 3.07>
ST_2 : Operation 28 [1/1] (0.00ns)   --->   "%res_mult = bitconcatenate i33 @_ssdm_op_BitConcatenate.i33.i1.i32, i1 0, i32 %input_val_read" [Arithmetic.cpp:32->Arithmetic.cpp:70]   --->   Operation 28 'bitconcatenate' 'res_mult' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 29 [1/1] (0.00ns)   --->   "%zext_ln69 = zext i33 %res_mult" [Arithmetic.cpp:69]   --->   Operation 29 'zext' 'zext_ln69' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 30 [1/1] (0.00ns)   --->   "%zext_ln17 = zext i16 %res_mult_shift_part" [Arithmetic.cpp:17->Arithmetic.cpp:76]   --->   Operation 30 'zext' 'zext_ln17' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 31 [1/1] (0.00ns)   --->   "%sum1_5 = bitconcatenate i47 @_ssdm_op_BitConcatenate.i47.i15.i32, i15 %trunc_ln7, i32 %zext_ln17" [Arithmetic.cpp:29->Arithmetic.cpp:76]   --->   Operation 31 'bitconcatenate' 'sum1_5' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 32 [1/1] (0.00ns)   --->   "%zext_ln28_8 = zext i47 %sum1_5" [Arithmetic.cpp:28->Arithmetic.cpp:76]   --->   Operation 32 'zext' 'zext_ln28_8' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 33 [1/1] (0.00ns)   --->   "%zext_ln30 = zext i16 %res_mult_shift_part" [Arithmetic.cpp:30->Arithmetic.cpp:76]   --->   Operation 33 'zext' 'zext_ln30' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 34 [1/1] (0.00ns)   --->   "%zext_ln30_11 = zext i15 %trunc_ln7" [Arithmetic.cpp:30->Arithmetic.cpp:76]   --->   Operation 34 'zext' 'zext_ln30_11' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 35 [1/1] (2.07ns)   --->   "%add_ln30 = add i17 %zext_ln30, i17 %zext_ln30_11" [Arithmetic.cpp:30->Arithmetic.cpp:76]   --->   Operation 35 'add' 'add_ln30' <Predicate = true> <Delay = 2.07> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.07> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 36 [1/1] (3.07ns)   --->   "%res_shift = sub i48 %zext_ln69, i48 %zext_ln28_8" [Arithmetic.cpp:32->Arithmetic.cpp:76]   --->   Operation 36 'sub' 'res_shift' <Predicate = true> <Delay = 3.07> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.07> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 3 <SV = 2> <Delay = 3.10>
ST_3 : Operation 37 [1/1] (0.00ns)   --->   "%sum2_5 = bitconcatenate i33 @_ssdm_op_BitConcatenate.i33.i17.i16, i17 %add_ln30, i16 0" [Arithmetic.cpp:30->Arithmetic.cpp:76]   --->   Operation 37 'bitconcatenate' 'sum2_5' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 38 [1/1] (0.00ns)   --->   "%zext_ln28_9 = zext i33 %sum2_5" [Arithmetic.cpp:28->Arithmetic.cpp:76]   --->   Operation 38 'zext' 'zext_ln28_9' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 39 [1/1] (0.00ns)   --->   "%sext_ln78 = sext i48 %res_shift" [Arithmetic.cpp:78]   --->   Operation 39 'sext' 'sext_ln78' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 40 [1/1] (3.10ns)   --->   "%sub_ln78 = sub i49 %sext_ln78, i49 %zext_ln28_9" [Arithmetic.cpp:78]   --->   Operation 40 'sub' 'sub_ln78' <Predicate = true> <Delay = 3.10> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.10> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 41 [1/1] (0.00ns)   --->   "%trunc_ln80 = trunc i49 %sub_ln78" [Arithmetic.cpp:80]   --->   Operation 41 'trunc' 'trunc_ln80' <Predicate = true> <Delay = 0.00>

State 4 <SV = 3> <Delay = 5.68>
ST_4 : Operation 42 [1/1] (3.13ns)   --->   "%add_ln79 = add i49 %sub_ln78, i49 562949953355775" [Arithmetic.cpp:79]   --->   Operation 42 'add' 'add_ln79' <Predicate = true> <Delay = 3.13> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.13> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 43 [1/1] (3.13ns)   --->   "%add_ln80 = add i49 %sub_ln78, i49 562949953290238" [Arithmetic.cpp:80]   --->   Operation 43 'add' 'add_ln80' <Predicate = true> <Delay = 3.13> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.13> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 44 [1/1] (0.00ns)   --->   "%tmp = bitselect i1 @_ssdm_op_BitSelect.i1.i49.i32, i49 %add_ln79, i32 48" [Arithmetic.cpp:81]   --->   Operation 44 'bitselect' 'tmp' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 45 [1/1] (0.00ns) (grouped into LUT with out node add_ln81)   --->   "%tmp_5 = bitselect i1 @_ssdm_op_BitSelect.i1.i49.i32, i49 %add_ln80, i32 48" [Arithmetic.cpp:81]   --->   Operation 45 'bitselect' 'tmp_5' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 46 [1/1] (0.00ns) (grouped into LUT with out node add_ln81)   --->   "%select_ln81 = select i1 %tmp_5, i32 4294901759, i32 4294836222" [Arithmetic.cpp:81]   --->   Operation 46 'select' 'select_ln81' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 47 [1/1] (2.55ns) (out node of the LUT)   --->   "%add_ln81 = add i32 %trunc_ln80, i32 %select_ln81" [Arithmetic.cpp:81]   --->   Operation 47 'add' 'add_ln81' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 5 <SV = 4> <Delay = 0.69>
ST_5 : Operation 48 [1/1] (0.00ns)   --->   "%specpipeline_ln62 = specpipeline void @_ssdm_op_SpecPipeline, i32 4294967295, i32 0, i32 0, i32 0, void @empty_27" [Arithmetic.cpp:62]   --->   Operation 48 'specpipeline' 'specpipeline_ln62' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 49 [1/1] (0.69ns)   --->   "%select_ln81_1 = select i1 %tmp, i32 %trunc_ln80, i32 %add_ln81" [Arithmetic.cpp:81]   --->   Operation 49 'select' 'select_ln81_1' <Predicate = true> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 50 [1/1] (0.00ns)   --->   "%ret_ln82 = ret i32 %select_ln81_1" [Arithmetic.cpp:82]   --->   Operation 50 'ret' 'ret_ln82' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 8.000ns, clock uncertainty: 2.160ns.

 <State 1>: 5.655ns
The critical path consists of the following:
	wire read operation ('input_val_read', Arithmetic.cpp:10->Arithmetic.cpp:70) on port 'input_val' (Arithmetic.cpp:10->Arithmetic.cpp:70) [3]  (0.000 ns)
	'sub' operation ('temp1', Arithmetic.cpp:22->Arithmetic.cpp:73) [13]  (2.552 ns)
	'add' operation ('res_mult_shift', Arithmetic.cpp:32->Arithmetic.cpp:73) [23]  (3.103 ns)

 <State 2>: 3.074ns
The critical path consists of the following:
	'sub' operation ('res_shift', Arithmetic.cpp:32->Arithmetic.cpp:76) [35]  (3.074 ns)

 <State 3>: 3.103ns
The critical path consists of the following:
	'sub' operation ('sub_ln78', Arithmetic.cpp:78) [37]  (3.103 ns)

 <State 4>: 5.683ns
The critical path consists of the following:
	'add' operation ('add_ln80', Arithmetic.cpp:80) [40]  (3.131 ns)
	'select' operation ('select_ln81', Arithmetic.cpp:81) [43]  (0.000 ns)
	'add' operation ('add_ln81', Arithmetic.cpp:81) [44]  (2.552 ns)

 <State 5>: 0.698ns
The critical path consists of the following:
	'select' operation ('select_ln81_1', Arithmetic.cpp:81) [45]  (0.698 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
