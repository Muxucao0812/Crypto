

================================================================
== Vitis HLS Report for 'STEPMUL'
================================================================
* Date:           Tue Mar 18 15:42:25 2025

* Version:        2023.1 (Build 3854077 on May  4 2023)
* Project:        Crypto
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+---------+----------+------------+
    |  Clock |  Target | Estimated| Uncertainty|
    +--------+---------+----------+------------+
    |ap_clk  |  8.00 ns|  5.580 ns|     2.16 ns|
    +--------+---------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+-----+---------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max    | min | max |   Type  |
    +---------+---------+-----------+-----------+-----+-----+---------+
    |        4|        4|  32.000 ns|  32.000 ns|    5|    5|       no|
    +---------+---------+-----------+-----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 5
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 3.12>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%input1_u = read i32 @_ssdm_op_Read.ap_auto.i32P0A, i32 %input1" [Arithmetic.cpp:37]   --->   Operation 6 'read' 'input1_u' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%input1_low = trunc i32 %input1_u" [Arithmetic.cpp:37]   --->   Operation 7 'trunc' 'input1_low' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%input2_u = read i32 @_ssdm_op_Read.ap_auto.i32P0A, i32 %input2" [Arithmetic.cpp:38]   --->   Operation 8 'read' 'input2_u' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%input2_low = trunc i32 %input2_u" [Arithmetic.cpp:38]   --->   Operation 9 'trunc' 'input2_low' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%zext_ln44_1 = zext i16 %input1_low" [Arithmetic.cpp:44]   --->   Operation 10 'zext' 'zext_ln44_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%input1_high = partselect i16 @_ssdm_op_PartSelect.i16.i32.i32.i32, i32 %input1_u, i32 16, i32 31" [Arithmetic.cpp:45]   --->   Operation 11 'partselect' 'input1_high' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%zext_ln45 = zext i16 %input1_high" [Arithmetic.cpp:45]   --->   Operation 12 'zext' 'zext_ln45' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%zext_ln46_1 = zext i16 %input2_low" [Arithmetic.cpp:46]   --->   Operation 13 'zext' 'zext_ln46_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%input2_high = partselect i16 @_ssdm_op_PartSelect.i16.i32.i32.i32, i32 %input2_u, i32 16, i32 31" [Arithmetic.cpp:47]   --->   Operation 14 'partselect' 'input2_high' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%zext_ln47 = zext i16 %input2_high" [Arithmetic.cpp:47]   --->   Operation 15 'zext' 'zext_ln47' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (2.07ns)   --->   "%a_plus_b = add i17 %zext_ln45, i17 %zext_ln44_1" [Arithmetic.cpp:50]   --->   Operation 16 'add' 'a_plus_b' <Predicate = true> <Delay = 2.07> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.07> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 17 [1/1] (1.65ns) (grouped into DSP with root node sub_ln63)   --->   "%c_plus_d = add i17 %zext_ln47, i17 %zext_ln46_1" [Arithmetic.cpp:51]   --->   Operation 17 'add' 'c_plus_d' <Predicate = true> <Delay = 1.65> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : '<invalid operator> ' 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%zext_ln63 = zext i17 %a_plus_b" [Arithmetic.cpp:63]   --->   Operation 18 'zext' 'zext_ln63' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns) (grouped into DSP with root node sub_ln63)   --->   "%zext_ln63_1 = zext i17 %c_plus_d" [Arithmetic.cpp:63]   --->   Operation 19 'zext' 'zext_ln63_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [3/3] (1.05ns) (grouped into DSP with root node sub_ln63)   --->   "%mul_ln63 = mul i34 %zext_ln63_1, i34 %zext_ln63" [Arithmetic.cpp:63]   --->   Operation 20 'mul' 'mul_ln63' <Predicate = true> <Delay = 1.05> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : '<invalid operator> ' 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 2 <SV = 1> <Delay = 5.58>
ST_2 : Operation 21 [1/1] (0.00ns)   --->   "%zext_ln44 = zext i16 %input1_low" [Arithmetic.cpp:44]   --->   Operation 21 'zext' 'zext_ln44' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 22 [1/1] (0.00ns)   --->   "%zext_ln45_1 = zext i16 %input1_high" [Arithmetic.cpp:45]   --->   Operation 22 'zext' 'zext_ln45_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "%zext_ln46 = zext i16 %input2_low" [Arithmetic.cpp:46]   --->   Operation 23 'zext' 'zext_ln46' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 24 [1/1] (0.00ns)   --->   "%zext_ln47_1 = zext i16 %input2_high" [Arithmetic.cpp:47]   --->   Operation 24 'zext' 'zext_ln47_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 25 [1/1] (5.58ns)   --->   "%ac = mul i32 %zext_ln47_1, i32 %zext_ln45_1" [Arithmetic.cpp:54]   --->   Operation 25 'mul' 'ac' <Predicate = true> <Delay = 5.58> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 5.58> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 26 [1/1] (5.58ns)   --->   "%bd = mul i32 %zext_ln46, i32 %zext_ln44" [Arithmetic.cpp:55]   --->   Operation 26 'mul' 'bd' <Predicate = true> <Delay = 5.58> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 5.58> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 27 [2/3] (1.05ns) (grouped into DSP with root node sub_ln63)   --->   "%mul_ln63 = mul i34 %zext_ln63_1, i34 %zext_ln63" [Arithmetic.cpp:63]   --->   Operation 27 'mul' 'mul_ln63' <Predicate = true> <Delay = 1.05> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : '<invalid operator> ' 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 3 <SV = 2> <Delay = 4.65>
ST_3 : Operation 28 [1/3] (0.00ns) (grouped into DSP with root node sub_ln63)   --->   "%mul_ln63 = mul i34 %zext_ln63_1, i34 %zext_ln63" [Arithmetic.cpp:63]   --->   Operation 28 'mul' 'mul_ln63' <Predicate = true> <Delay = 0.00> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : '<invalid operator> ' 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 29 [1/1] (0.00ns) (grouped into DSP with root node sub_ln63)   --->   "%zext_ln63_2 = zext i34 %mul_ln63" [Arithmetic.cpp:63]   --->   Operation 29 'zext' 'zext_ln63_2' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 30 [1/1] (0.00ns)   --->   "%zext_ln63_3 = zext i32 %ac" [Arithmetic.cpp:63]   --->   Operation 30 'zext' 'zext_ln63_3' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 31 [1/1] (0.00ns)   --->   "%zext_ln63_4 = zext i32 %bd" [Arithmetic.cpp:63]   --->   Operation 31 'zext' 'zext_ln63_4' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 32 [1/1] (2.55ns)   --->   "%add_ln63 = add i33 %zext_ln63_3, i33 %zext_ln63_4" [Arithmetic.cpp:63]   --->   Operation 32 'add' 'add_ln63' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 33 [1/1] (0.00ns)   --->   "%zext_ln63_5 = zext i33 %add_ln63" [Arithmetic.cpp:63]   --->   Operation 33 'zext' 'zext_ln63_5' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 34 [2/2] (2.10ns) (root node of the DSP)   --->   "%sub_ln63 = sub i35 %zext_ln63_2, i35 %zext_ln63_5" [Arithmetic.cpp:63]   --->   Operation 34 'sub' 'sub_ln63' <Predicate = true> <Delay = 2.10> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : '<invalid operator> ' 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 4 <SV = 3> <Delay = 2.10>
ST_4 : Operation 35 [1/2] (2.10ns) (root node of the DSP)   --->   "%sub_ln63 = sub i35 %zext_ln63_2, i35 %zext_ln63_5" [Arithmetic.cpp:63]   --->   Operation 35 'sub' 'sub_ln63' <Predicate = true> <Delay = 2.10> <CoreInst = "DSP48">   --->   Core 119 'DSP48' <Latency = 3> <II = 1> <Delay = 2.15> <IPBlock> <Opcode : '<invalid operator> ' 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 5 <SV = 4> <Delay = 3.52>
ST_5 : Operation 36 [1/1] (0.00ns)   --->   "%spectopmodule_ln35 = spectopmodule void @_ssdm_op_SpecTopModule, void @empty_1" [Arithmetic.cpp:35]   --->   Operation 36 'spectopmodule' 'spectopmodule_ln35' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 37 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %input1"   --->   Operation 37 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 38 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %input1, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 38 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 39 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i32 %input2"   --->   Operation 39 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 40 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %input2, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 40 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 41 [1/1] (0.00ns)   --->   "%specbitsmap_ln0 = specbitsmap void @_ssdm_op_SpecBitsMap, i64 %res"   --->   Operation 41 'specbitsmap' 'specbitsmap_ln0' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 42 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %res, void @empty, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 42 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 43 [1/1] (0.00ns)   --->   "%sum1 = bitconcatenate i64 @_ssdm_op_BitConcatenate.i64.i32.i32, i32 %ac, i32 %bd" [Arithmetic.cpp:62]   --->   Operation 43 'bitconcatenate' 'sum1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 44 [1/1] (0.00ns)   --->   "%sum2 = bitconcatenate i51 @_ssdm_op_BitConcatenate.i51.i35.i16, i35 %sub_ln63, i16 0" [Arithmetic.cpp:63]   --->   Operation 44 'bitconcatenate' 'sum2' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 45 [1/1] (0.00ns)   --->   "%sext_ln63 = sext i51 %sum2" [Arithmetic.cpp:63]   --->   Operation 45 'sext' 'sext_ln63' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 46 [1/1] (3.52ns)   --->   "%add_ln65 = add i64 %sext_ln63, i64 %sum1" [Arithmetic.cpp:65]   --->   Operation 46 'add' 'add_ln65' <Predicate = true> <Delay = 3.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 3.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 47 [1/1] (0.00ns)   --->   "%write_ln65 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %res, i64 %add_ln65" [Arithmetic.cpp:65]   --->   Operation 47 'write' 'write_ln65' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 48 [1/1] (0.00ns)   --->   "%ret_ln67 = ret" [Arithmetic.cpp:67]   --->   Operation 48 'ret' 'ret_ln67' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 8.000ns, clock uncertainty: 2.160ns.

 <State 1>: 3.127ns
The critical path consists of the following:
	wire read operation ('input1_u', Arithmetic.cpp:37) on port 'input1' (Arithmetic.cpp:37) [11]  (0.000 ns)
	'add' operation ('a_plus_b', Arithmetic.cpp:50) [25]  (2.077 ns)
	'mul' operation of DSP[37] ('mul_ln63', Arithmetic.cpp:63) [31]  (1.050 ns)

 <State 2>: 5.580ns
The critical path consists of the following:
	'mul' operation ('ac', Arithmetic.cpp:54) [27]  (5.580 ns)

 <State 3>: 4.652ns
The critical path consists of the following:
	'add' operation ('add_ln63', Arithmetic.cpp:63) [35]  (2.552 ns)
	'sub' operation of DSP[37] ('sub_ln63', Arithmetic.cpp:63) [37]  (2.100 ns)

 <State 4>: 2.100ns
The critical path consists of the following:
	'sub' operation of DSP[37] ('sub_ln63', Arithmetic.cpp:63) [37]  (2.100 ns)

 <State 5>: 3.520ns
The critical path consists of the following:
	'add' operation ('add_ln65', Arithmetic.cpp:65) [41]  (3.520 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
