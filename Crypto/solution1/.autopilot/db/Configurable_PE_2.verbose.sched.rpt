

================================================================
== Vitis HLS Report for 'Configurable_PE_2'
================================================================
* Date:           Fri Apr  4 16:47:05 2025

* Version:        2024.1 (Build 5069499 on May 21 2024)
* Project:        Crypto
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: virtex7
* Target device:  xc7vx485t-ffg1761-3


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+---------+----------+------------+
    |  Clock |  Target | Estimated| Uncertainty|
    +--------+---------+----------+------------+
    |ap_clk  |  6.00 ns|  3.803 ns|     1.62 ns|
    +--------+---------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+-----+---------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max    | min | max |   Type  |
    +---------+---------+-----------+-----------+-----+-----+---------+
    |       15|       15|  90.000 ns|  90.000 ns|   15|   15|       no|
    +---------+---------+-----------+-----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 30
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 16 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 13 
13 --> 14 
14 --> 15 
15 --> 30 
16 --> 17 
17 --> 18 
18 --> 19 
19 --> 20 
20 --> 21 
21 --> 22 
22 --> 23 
23 --> 24 
24 --> 25 
25 --> 26 
26 --> 27 
27 --> 28 
28 --> 29 
29 --> 30 
30 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 3.61>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%op_read = read i3 @_ssdm_op_Read.ap_auto.i3, i3 %op" [HLS/src/Arithmetic.cpp:187]   --->   Operation 31 'read' 'op_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%MOD_INDEX_read = read i2 @_ssdm_op_Read.ap_auto.i2, i2 %MOD_INDEX" [HLS/src/Arithmetic.cpp:187]   --->   Operation 32 'read' 'MOD_INDEX_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%twiddle_factor_val2_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %twiddle_factor_val2" [HLS/src/Arithmetic.cpp:187]   --->   Operation 33 'read' 'twiddle_factor_val2_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%input2_val_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %input2_val" [HLS/src/Arithmetic.cpp:187]   --->   Operation 34 'read' 'input2_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%input1_val_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %input1_val" [HLS/src/Arithmetic.cpp:187]   --->   Operation 35 'read' 'input1_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.94ns)   --->   "%icmp_ln190 = icmp_eq  i3 %op_read, i3 4" [HLS/src/Arithmetic.cpp:190]   --->   Operation 36 'icmp' 'icmp_ln190' <Predicate = true> <Delay = 0.94> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.94> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%br_ln190 = br i1 %icmp_ln190, void %if.then8, void %if.then11" [HLS/src/Arithmetic.cpp:190]   --->   Operation 37 'br' 'br_ln190' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 38 [14/14] (2.36ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:200]   --->   Operation 38 'call' 'temp_1' <Predicate = (!icmp_ln190)> <Delay = 2.36> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 39 [1/1] (1.57ns)   --->   "%temp1 = add i32 %input2_val_read, i32 %input1_val_read" [HLS/src/Arithmetic.cpp:73->HLS/src/Arithmetic.cpp:206]   --->   Operation 39 'add' 'temp1' <Predicate = (icmp_ln190)> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 40 [1/1] (0.80ns)   --->   "%zext_ln76_cast = sparsemux i31 @_ssdm_op_SparseMux.ap_auto.3i31.i31.i2, i2 0, i31 1073750017, i2 1, i31 1073815553, i2 2, i31 1073872897, i31 0, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:206]   --->   Operation 40 'sparsemux' 'zext_ln76_cast' <Predicate = (icmp_ln190)> <Delay = 0.80> <CoreInst = "SparseMux">   --->   Core 132 'SparseMux' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "%zext_ln76 = zext i31 %zext_ln76_cast" [HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:206]   --->   Operation 41 'zext' 'zext_ln76' <Predicate = (icmp_ln190)> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (1.57ns)   --->   "%res2_temp_1 = sub i32 %input1_val_read, i32 %input2_val_read" [HLS/src/Arithmetic.cpp:86->HLS/src/Arithmetic.cpp:207]   --->   Operation 42 'sub' 'res2_temp_1' <Predicate = (icmp_ln190)> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%tmp = bitselect i1 @_ssdm_op_BitSelect.i1.i32.i32, i32 %res2_temp_1, i32 31" [HLS/src/Arithmetic.cpp:88->HLS/src/Arithmetic.cpp:207]   --->   Operation 43 'bitselect' 'tmp' <Predicate = (icmp_ln190)> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (1.57ns)   --->   "%add_ln89_1 = add i32 %zext_ln76, i32 %res2_temp_1" [HLS/src/Arithmetic.cpp:89->HLS/src/Arithmetic.cpp:207]   --->   Operation 44 'add' 'add_ln89_1' <Predicate = (icmp_ln190)> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 45 [1/1] (0.45ns)   --->   "%res2_temp_2 = select i1 %tmp, i32 %add_ln89_1, i32 %res2_temp_1" [HLS/src/Arithmetic.cpp:88->HLS/src/Arithmetic.cpp:207]   --->   Operation 45 'select' 'res2_temp_2' <Predicate = (icmp_ln190)> <Delay = 0.45> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 46 [1/1] (1.55ns)   --->   "%add_ln208 = add i31 %zext_ln76_cast, i31 1" [HLS/src/Arithmetic.cpp:208]   --->   Operation 46 'add' 'add_ln208' <Predicate = (icmp_ln190)> <Delay = 1.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 47 [1/1] (0.00ns)   --->   "%trunc_ln208_1 = partselect i30 @_ssdm_op_PartSelect.i30.i31.i32.i32, i31 %add_ln208, i32 1, i32 30" [HLS/src/Arithmetic.cpp:208]   --->   Operation 47 'partselect' 'trunc_ln208_1' <Predicate = (icmp_ln190)> <Delay = 0.00>

State 2 <SV = 1> <Delay = 3.80>
ST_2 : Operation 48 [13/14] (3.80ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:200]   --->   Operation 48 'call' 'temp_1' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 3 <SV = 2> <Delay = 3.80>
ST_3 : Operation 49 [12/14] (3.80ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:200]   --->   Operation 49 'call' 'temp_1' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 4 <SV = 3> <Delay = 3.80>
ST_4 : Operation 50 [11/14] (3.80ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:200]   --->   Operation 50 'call' 'temp_1' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 5 <SV = 4> <Delay = 3.80>
ST_5 : Operation 51 [10/14] (3.80ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:200]   --->   Operation 51 'call' 'temp_1' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 6 <SV = 5> <Delay = 3.80>
ST_6 : Operation 52 [9/14] (3.80ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:200]   --->   Operation 52 'call' 'temp_1' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 7 <SV = 6> <Delay = 3.80>
ST_7 : Operation 53 [8/14] (3.80ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:200]   --->   Operation 53 'call' 'temp_1' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 8 <SV = 7> <Delay = 3.80>
ST_8 : Operation 54 [7/14] (3.80ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:200]   --->   Operation 54 'call' 'temp_1' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 9 <SV = 8> <Delay = 3.80>
ST_9 : Operation 55 [6/14] (3.80ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:200]   --->   Operation 55 'call' 'temp_1' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 10 <SV = 9> <Delay = 3.80>
ST_10 : Operation 56 [5/14] (3.80ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:200]   --->   Operation 56 'call' 'temp_1' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 11 <SV = 10> <Delay = 3.80>
ST_11 : Operation 57 [4/14] (3.80ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:200]   --->   Operation 57 'call' 'temp_1' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 12 <SV = 11> <Delay = 3.80>
ST_12 : Operation 58 [3/14] (3.80ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:200]   --->   Operation 58 'call' 'temp_1' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 13 <SV = 12> <Delay = 3.80>
ST_13 : Operation 59 [2/14] (3.80ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:200]   --->   Operation 59 'call' 'temp_1' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 14 <SV = 13> <Delay = 3.75>
ST_14 : Operation 60 [1/14] (2.17ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:200]   --->   Operation 60 'call' 'temp_1' <Predicate = true> <Delay = 2.17> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_14 : Operation 61 [1/1] (1.57ns)   --->   "%res1_temp = add i32 %temp_1, i32 %input1_val_read" [HLS/src/Arithmetic.cpp:73->HLS/src/Arithmetic.cpp:201]   --->   Operation 61 'add' 'res1_temp' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 62 [1/1] (1.57ns)   --->   "%res2_temp = sub i32 %input1_val_read, i32 %temp_1" [HLS/src/Arithmetic.cpp:86->HLS/src/Arithmetic.cpp:202]   --->   Operation 62 'sub' 'res2_temp' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 63 [1/1] (0.00ns)   --->   "%tmp_380 = bitselect i1 @_ssdm_op_BitSelect.i1.i32.i32, i32 %res2_temp, i32 31" [HLS/src/Arithmetic.cpp:88->HLS/src/Arithmetic.cpp:202]   --->   Operation 63 'bitselect' 'tmp_380' <Predicate = true> <Delay = 0.00>

State 15 <SV = 14> <Delay = 2.84>
ST_15 : Operation 64 [1/1] (0.80ns)   --->   "%zext_ln76_3_cast = sparsemux i31 @_ssdm_op_SparseMux.ap_auto.3i31.i31.i2, i2 0, i31 1073750017, i2 1, i31 1073815553, i2 2, i31 1073872897, i31 0, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:201]   --->   Operation 64 'sparsemux' 'zext_ln76_3_cast' <Predicate = true> <Delay = 0.80> <CoreInst = "SparseMux">   --->   Core 132 'SparseMux' <Latency = 0> <II = 1> <Delay = 0.80> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>
ST_15 : Operation 65 [1/1] (0.00ns)   --->   "%zext_ln76_1 = zext i31 %zext_ln76_3_cast" [HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:201]   --->   Operation 65 'zext' 'zext_ln76_1' <Predicate = true> <Delay = 0.00>
ST_15 : Operation 66 [1/1] (1.57ns)   --->   "%icmp_ln76_1 = icmp_slt  i32 %res1_temp, i32 %zext_ln76_1" [HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:201]   --->   Operation 66 'icmp' 'icmp_ln76_1' <Predicate = true> <Delay = 1.57> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_15 : Operation 67 [1/1] (1.57ns)   --->   "%res1_temp_1 = sub i32 %res1_temp, i32 %zext_ln76_1" [HLS/src/Arithmetic.cpp:77->HLS/src/Arithmetic.cpp:201]   --->   Operation 67 'sub' 'res1_temp_1' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_15 : Operation 68 [1/1] (0.45ns)   --->   "%res1_temp_2 = select i1 %icmp_ln76_1, i32 %res1_temp, i32 %res1_temp_1" [HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:201]   --->   Operation 68 'select' 'res1_temp_2' <Predicate = true> <Delay = 0.45> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_15 : Operation 69 [1/1] (1.57ns)   --->   "%add_ln89 = add i32 %res2_temp, i32 %zext_ln76_1" [HLS/src/Arithmetic.cpp:89->HLS/src/Arithmetic.cpp:202]   --->   Operation 69 'add' 'add_ln89' <Predicate = (tmp_380)> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_15 : Operation 70 [1/1] (0.45ns)   --->   "%select_ln88 = select i1 %tmp_380, i32 %add_ln89, i32 %res2_temp" [HLS/src/Arithmetic.cpp:88->HLS/src/Arithmetic.cpp:202]   --->   Operation 70 'select' 'select_ln88' <Predicate = true> <Delay = 0.45> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_15 : Operation 71 [1/1] (0.80ns)   --->   "%br_ln205 = br void %if.end59" [HLS/src/Arithmetic.cpp:205]   --->   Operation 71 'br' 'br_ln205' <Predicate = true> <Delay = 0.80>

State 16 <SV = 1> <Delay = 3.59>
ST_16 : Operation 72 [1/1] (1.57ns)   --->   "%icmp_ln76 = icmp_slt  i32 %temp1, i32 %zext_ln76" [HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:206]   --->   Operation 72 'icmp' 'icmp_ln76' <Predicate = true> <Delay = 1.57> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_16 : Operation 73 [1/1] (0.00ns) (grouped into LUT with out node temp1_1)   --->   "%xor_ln76 = xor i1 %icmp_ln76, i1 1" [HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:206]   --->   Operation 73 'xor' 'xor_ln76' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.46> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_16 : Operation 74 [1/1] (1.57ns)   --->   "%sub_ln77 = sub i32 %temp1, i32 %zext_ln76" [HLS/src/Arithmetic.cpp:77->HLS/src/Arithmetic.cpp:206]   --->   Operation 74 'sub' 'sub_ln77' <Predicate = true> <Delay = 1.57> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.57> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_16 : Operation 75 [1/1] (0.46ns) (out node of the LUT)   --->   "%temp1_1 = select i1 %xor_ln76, i32 %sub_ln77, i32 %temp1" [HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:206]   --->   Operation 75 'select' 'temp1_1' <Predicate = true> <Delay = 0.46> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_16 : Operation 76 [1/1] (0.00ns) (grouped into LUT with out node add_ln208_1)   --->   "%trunc_ln = partselect i31 @_ssdm_op_PartSelect.i31.i32.i32.i32, i32 %temp1_1, i32 1, i32 31" [HLS/src/Arithmetic.cpp:208]   --->   Operation 76 'partselect' 'trunc_ln' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 77 [1/1] (0.00ns) (grouped into LUT with out node add_ln208_1)   --->   "%sext_ln208 = sext i31 %trunc_ln" [HLS/src/Arithmetic.cpp:208]   --->   Operation 77 'sext' 'sext_ln208' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 78 [1/1] (0.00ns) (grouped into LUT with out node add_ln208_1)   --->   "%trunc_ln208 = trunc i32 %temp1_1" [HLS/src/Arithmetic.cpp:208]   --->   Operation 78 'trunc' 'trunc_ln208' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 79 [1/1] (0.00ns) (grouped into LUT with out node add_ln208_1)   --->   "%select_ln208 = select i1 %trunc_ln208, i30 %trunc_ln208_1, i30 0" [HLS/src/Arithmetic.cpp:208]   --->   Operation 79 'select' 'select_ln208' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.43> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_16 : Operation 80 [1/1] (0.00ns) (grouped into LUT with out node add_ln208_1)   --->   "%zext_ln208 = zext i30 %select_ln208" [HLS/src/Arithmetic.cpp:208]   --->   Operation 80 'zext' 'zext_ln208' <Predicate = true> <Delay = 0.00>
ST_16 : Operation 81 [1/1] (1.55ns) (out node of the LUT)   --->   "%add_ln208_1 = add i32 %zext_ln208, i32 %sext_ln208" [HLS/src/Arithmetic.cpp:208]   --->   Operation 81 'add' 'add_ln208_1' <Predicate = true> <Delay = 1.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_16 : Operation 82 [14/14] (2.36ns)   --->   "%temp = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:209]   --->   Operation 82 'call' 'temp' <Predicate = true> <Delay = 2.36> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 17 <SV = 2> <Delay = 3.80>
ST_17 : Operation 83 [13/14] (3.80ns)   --->   "%temp = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:209]   --->   Operation 83 'call' 'temp' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 18 <SV = 3> <Delay = 3.80>
ST_18 : Operation 84 [12/14] (3.80ns)   --->   "%temp = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:209]   --->   Operation 84 'call' 'temp' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 19 <SV = 4> <Delay = 3.80>
ST_19 : Operation 85 [11/14] (3.80ns)   --->   "%temp = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:209]   --->   Operation 85 'call' 'temp' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 20 <SV = 5> <Delay = 3.80>
ST_20 : Operation 86 [10/14] (3.80ns)   --->   "%temp = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:209]   --->   Operation 86 'call' 'temp' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 21 <SV = 6> <Delay = 3.80>
ST_21 : Operation 87 [9/14] (3.80ns)   --->   "%temp = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:209]   --->   Operation 87 'call' 'temp' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 22 <SV = 7> <Delay = 3.80>
ST_22 : Operation 88 [8/14] (3.80ns)   --->   "%temp = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:209]   --->   Operation 88 'call' 'temp' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 23 <SV = 8> <Delay = 3.80>
ST_23 : Operation 89 [7/14] (3.80ns)   --->   "%temp = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:209]   --->   Operation 89 'call' 'temp' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 24 <SV = 9> <Delay = 3.80>
ST_24 : Operation 90 [6/14] (3.80ns)   --->   "%temp = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:209]   --->   Operation 90 'call' 'temp' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 25 <SV = 10> <Delay = 3.80>
ST_25 : Operation 91 [5/14] (3.80ns)   --->   "%temp = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:209]   --->   Operation 91 'call' 'temp' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 26 <SV = 11> <Delay = 3.80>
ST_26 : Operation 92 [4/14] (3.80ns)   --->   "%temp = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:209]   --->   Operation 92 'call' 'temp' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 27 <SV = 12> <Delay = 3.80>
ST_27 : Operation 93 [3/14] (3.80ns)   --->   "%temp = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:209]   --->   Operation 93 'call' 'temp' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 28 <SV = 13> <Delay = 3.80>
ST_28 : Operation 94 [2/14] (3.80ns)   --->   "%temp = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:209]   --->   Operation 94 'call' 'temp' <Predicate = true> <Delay = 3.80> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 29 <SV = 14> <Delay = 3.73>
ST_29 : Operation 95 [1/14] (2.17ns)   --->   "%temp = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [HLS/src/Arithmetic.cpp:209]   --->   Operation 95 'call' 'temp' <Predicate = true> <Delay = 2.17> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_29 : Operation 96 [1/1] (0.00ns) (grouped into LUT with out node add_ln210)   --->   "%trunc_ln1 = partselect i31 @_ssdm_op_PartSelect.i31.i32.i32.i32, i32 %temp, i32 1, i32 31" [HLS/src/Arithmetic.cpp:210]   --->   Operation 96 'partselect' 'trunc_ln1' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 97 [1/1] (0.00ns) (grouped into LUT with out node add_ln210)   --->   "%sext_ln210 = sext i31 %trunc_ln1" [HLS/src/Arithmetic.cpp:210]   --->   Operation 97 'sext' 'sext_ln210' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 98 [1/1] (0.00ns) (grouped into LUT with out node add_ln210)   --->   "%trunc_ln210 = trunc i32 %temp" [HLS/src/Arithmetic.cpp:210]   --->   Operation 98 'trunc' 'trunc_ln210' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 99 [1/1] (0.00ns) (grouped into LUT with out node add_ln210)   --->   "%select_ln210 = select i1 %trunc_ln210, i30 %trunc_ln208_1, i30 0" [HLS/src/Arithmetic.cpp:210]   --->   Operation 99 'select' 'select_ln210' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.43> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_29 : Operation 100 [1/1] (0.00ns) (grouped into LUT with out node add_ln210)   --->   "%zext_ln210 = zext i30 %select_ln210" [HLS/src/Arithmetic.cpp:210]   --->   Operation 100 'zext' 'zext_ln210' <Predicate = true> <Delay = 0.00>
ST_29 : Operation 101 [1/1] (1.55ns) (out node of the LUT)   --->   "%add_ln210 = add i32 %zext_ln210, i32 %sext_ln210" [HLS/src/Arithmetic.cpp:210]   --->   Operation 101 'add' 'add_ln210' <Predicate = true> <Delay = 1.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 30 <SV = 15> <Delay = 0.80>
ST_30 : Operation 102 [1/1] (0.80ns)   --->   "%br_ln0 = br void %if.end59"   --->   Operation 102 'br' 'br_ln0' <Predicate = (icmp_ln190)> <Delay = 0.80>
ST_30 : Operation 103 [1/1] (0.00ns)   --->   "%res1_1 = phi i32 %add_ln208_1, void %if.then11, i32 %res1_temp_2, void %if.then8"   --->   Operation 103 'phi' 'res1_1' <Predicate = true> <Delay = 0.00>
ST_30 : Operation 104 [1/1] (0.00ns)   --->   "%res2_1 = phi i32 %add_ln210, void %if.then11, i32 %select_ln88, void %if.then8" [HLS/src/Arithmetic.cpp:210]   --->   Operation 104 'phi' 'res2_1' <Predicate = true> <Delay = 0.00>
ST_30 : Operation 105 [1/1] (0.00ns)   --->   "%mrv = insertvalue i64 <undef>, i32 %res1_1" [HLS/src/Arithmetic.cpp:215]   --->   Operation 105 'insertvalue' 'mrv' <Predicate = true> <Delay = 0.00>
ST_30 : Operation 106 [1/1] (0.00ns)   --->   "%mrv_1 = insertvalue i64 %mrv, i32 %res2_1" [HLS/src/Arithmetic.cpp:215]   --->   Operation 106 'insertvalue' 'mrv_1' <Predicate = true> <Delay = 0.00>
ST_30 : Operation 107 [1/1] (0.00ns)   --->   "%ret_ln215 = ret i64 %mrv_1" [HLS/src/Arithmetic.cpp:215]   --->   Operation 107 'ret' 'ret_ln215' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 6.000ns, clock uncertainty: 1.620ns.

 <State 1>: 3.613ns
The critical path consists of the following:
	wire read operation ('input2_val_read', HLS/src/Arithmetic.cpp:187) on port 'input2_val' (HLS/src/Arithmetic.cpp:187) [9]  (0.000 ns)
	'sub' operation 32 bit ('res2_temp', HLS/src/Arithmetic.cpp:86->HLS/src/Arithmetic.cpp:207) [34]  (1.578 ns)
	'add' operation 32 bit ('add_ln89_1', HLS/src/Arithmetic.cpp:89->HLS/src/Arithmetic.cpp:207) [36]  (1.578 ns)
	'select' operation 32 bit ('res2_temp', HLS/src/Arithmetic.cpp:88->HLS/src/Arithmetic.cpp:207) [37]  (0.457 ns)

 <State 2>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:200) to 'MUL_MOD' [14]  (3.803 ns)

 <State 3>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:200) to 'MUL_MOD' [14]  (3.803 ns)

 <State 4>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:200) to 'MUL_MOD' [14]  (3.803 ns)

 <State 5>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:200) to 'MUL_MOD' [14]  (3.803 ns)

 <State 6>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:200) to 'MUL_MOD' [14]  (3.803 ns)

 <State 7>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:200) to 'MUL_MOD' [14]  (3.803 ns)

 <State 8>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:200) to 'MUL_MOD' [14]  (3.803 ns)

 <State 9>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:200) to 'MUL_MOD' [14]  (3.803 ns)

 <State 10>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:200) to 'MUL_MOD' [14]  (3.803 ns)

 <State 11>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:200) to 'MUL_MOD' [14]  (3.803 ns)

 <State 12>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:200) to 'MUL_MOD' [14]  (3.803 ns)

 <State 13>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:200) to 'MUL_MOD' [14]  (3.803 ns)

 <State 14>: 3.755ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:200) to 'MUL_MOD' [14]  (2.177 ns)
	'add' operation 32 bit ('res1_temp', HLS/src/Arithmetic.cpp:73->HLS/src/Arithmetic.cpp:201) [15]  (1.578 ns)

 <State 15>: 2.842ns
The critical path consists of the following:
	'sparsemux' operation 31 bit ('zext_ln76_3_cast', HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:201) [16]  (0.807 ns)
	'sub' operation 32 bit ('res1_temp', HLS/src/Arithmetic.cpp:77->HLS/src/Arithmetic.cpp:201) [19]  (1.578 ns)
	'select' operation 32 bit ('res1_temp', HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:201) [20]  (0.457 ns)

 <State 16>: 3.599ns
The critical path consists of the following:
	'icmp' operation 1 bit ('icmp_ln76', HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:206) [30]  (1.578 ns)
	'xor' operation 1 bit ('xor_ln76', HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:206) [31]  (0.000 ns)
	'select' operation 32 bit ('temp1', HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:206) [33]  (0.464 ns)
	'select' operation 30 bit ('select_ln208', HLS/src/Arithmetic.cpp:208) [43]  (0.000 ns)
	'add' operation 32 bit ('add_ln208_1', HLS/src/Arithmetic.cpp:208) [45]  (1.557 ns)

 <State 17>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:209) to 'MUL_MOD' [46]  (3.803 ns)

 <State 18>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:209) to 'MUL_MOD' [46]  (3.803 ns)

 <State 19>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:209) to 'MUL_MOD' [46]  (3.803 ns)

 <State 20>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:209) to 'MUL_MOD' [46]  (3.803 ns)

 <State 21>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:209) to 'MUL_MOD' [46]  (3.803 ns)

 <State 22>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:209) to 'MUL_MOD' [46]  (3.803 ns)

 <State 23>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:209) to 'MUL_MOD' [46]  (3.803 ns)

 <State 24>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:209) to 'MUL_MOD' [46]  (3.803 ns)

 <State 25>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:209) to 'MUL_MOD' [46]  (3.803 ns)

 <State 26>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:209) to 'MUL_MOD' [46]  (3.803 ns)

 <State 27>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:209) to 'MUL_MOD' [46]  (3.803 ns)

 <State 28>: 3.803ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:209) to 'MUL_MOD' [46]  (3.803 ns)

 <State 29>: 3.734ns
The critical path consists of the following:
	'call' operation 32 bit ('temp', HLS/src/Arithmetic.cpp:209) to 'MUL_MOD' [46]  (2.177 ns)
	'add' operation 32 bit ('add_ln210', HLS/src/Arithmetic.cpp:210) [52]  (1.557 ns)

 <State 30>: 0.807ns
The critical path consists of the following:
	multiplexor before 'phi' operation 32 bit ('res1_temp') with incoming values : ('res1_temp', HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:201) ('add_ln208_1', HLS/src/Arithmetic.cpp:208) [55]  (0.807 ns)
	'phi' operation 32 bit ('res1_temp') with incoming values : ('res1_temp', HLS/src/Arithmetic.cpp:76->HLS/src/Arithmetic.cpp:201) ('add_ln208_1', HLS/src/Arithmetic.cpp:208) [55]  (0.000 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
