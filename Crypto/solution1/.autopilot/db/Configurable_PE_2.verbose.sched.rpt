

================================================================
== Vitis HLS Report for 'Configurable_PE_2'
================================================================
* Date:           Thu Mar 27 00:01:01 2025

* Version:        2023.1 (Build 3854077 on May  4 2023)
* Project:        Crypto
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+---------+----------+------------+
    |  Clock |  Target | Estimated| Uncertainty|
    +--------+---------+----------+------------+
    |ap_clk  |  8.00 ns|  5.802 ns|     2.16 ns|
    +--------+---------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       18|       18|  0.144 us|  0.144 us|    1|    1|      yes|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 1
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 19


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 19
* Pipeline : 1
  Pipeline-0 : II = 1, D = 19, States = { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 13 
13 --> 14 
14 --> 15 
15 --> 16 
16 --> 17 
17 --> 18 
18 --> 19 
19 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 5.80>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%op_read = read i3 @_ssdm_op_Read.ap_auto.i3, i3 %op"   --->   Operation 20 'read' 'op_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%MOD_INDEX_read = read i2 @_ssdm_op_Read.ap_auto.i2, i2 %MOD_INDEX"   --->   Operation 21 'read' 'MOD_INDEX_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%twiddle_factor_val2_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %twiddle_factor_val2"   --->   Operation 22 'read' 'twiddle_factor_val2_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%input2_val_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %input2_val"   --->   Operation 23 'read' 'input2_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%input1_val_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %input1_val"   --->   Operation 24 'read' 'input1_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (1.65ns)   --->   "%icmp_ln190 = icmp_eq  i3 %op_read, i3 4" [Arithmetic.cpp:190]   --->   Operation 25 'icmp' 'icmp_ln190' <Predicate = true> <Delay = 1.65> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%br_ln190 = br i1 %icmp_ln190, void %if.then8, void %if.then11" [Arithmetic.cpp:190]   --->   Operation 26 'br' 'br_ln190' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [17/17] (3.12ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 27 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 3.12> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_1 : Operation 28 [1/1] (2.55ns)   --->   "%temp1 = add i32 %input2_val_read, i32 %input1_val_read" [Arithmetic.cpp:73->Arithmetic.cpp:206]   --->   Operation 28 'add' 'temp1' <Predicate = (icmp_ln190)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 29 [1/1] (1.70ns)   --->   "%zext_ln76_cast = mux i31 @_ssdm_op_Mux.ap_auto.3i31.i2, i31 1073750017, i31 1073815553, i31 1073872897, i2 %MOD_INDEX_read" [Arithmetic.cpp:76->Arithmetic.cpp:206]   --->   Operation 29 'mux' 'zext_ln76_cast' <Predicate = (icmp_ln190)> <Delay = 1.70> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 1.70> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%zext_ln76 = zext i31 %zext_ln76_cast" [Arithmetic.cpp:76->Arithmetic.cpp:206]   --->   Operation 30 'zext' 'zext_ln76' <Predicate = (icmp_ln190)> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (2.55ns)   --->   "%icmp_ln76 = icmp_slt  i32 %temp1, i32 %zext_ln76" [Arithmetic.cpp:76->Arithmetic.cpp:206]   --->   Operation 31 'icmp' 'icmp_ln76' <Predicate = (icmp_ln190)> <Delay = 2.55> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 32 [1/1] (2.55ns)   --->   "%temp1_1 = sub i32 %temp1, i32 %zext_ln76" [Arithmetic.cpp:77->Arithmetic.cpp:206]   --->   Operation 32 'sub' 'temp1_1' <Predicate = (icmp_ln190)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 33 [1/1] (2.55ns)   --->   "%res2_temp = sub i32 %input1_val_read, i32 %input2_val_read" [Arithmetic.cpp:86->Arithmetic.cpp:207]   --->   Operation 33 'sub' 'res2_temp' <Predicate = (icmp_ln190)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%tmp = bitselect i1 @_ssdm_op_BitSelect.i1.i32.i32, i32 %res2_temp, i32 31" [Arithmetic.cpp:88->Arithmetic.cpp:207]   --->   Operation 34 'bitselect' 'tmp' <Predicate = (icmp_ln190)> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (2.55ns)   --->   "%res2_temp_1 = add i32 %zext_ln76, i32 %res2_temp" [Arithmetic.cpp:89->Arithmetic.cpp:207]   --->   Operation 35 'add' 'res2_temp_1' <Predicate = (icmp_ln190)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 36 [1/1] (0.69ns)   --->   "%res2_temp_2 = select i1 %tmp, i32 %res2_temp_1, i32 %res2_temp" [Arithmetic.cpp:88->Arithmetic.cpp:207]   --->   Operation 36 'select' 'res2_temp_2' <Predicate = (icmp_ln190)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 37 [1/1] (2.52ns)   --->   "%add_ln208 = add i32 %zext_ln76, i32 1" [Arithmetic.cpp:208]   --->   Operation 37 'add' 'add_ln208' <Predicate = (icmp_ln190)> <Delay = 2.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%trunc_ln208_1 = partselect i31 @_ssdm_op_PartSelect.i31.i32.i32.i32, i32 %add_ln208, i32 1, i32 31" [Arithmetic.cpp:208]   --->   Operation 38 'partselect' 'trunc_ln208_1' <Predicate = (icmp_ln190)> <Delay = 0.00>

State 2 <SV = 1> <Delay = 5.58>
ST_2 : Operation 39 [16/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 39 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 40 [1/1] (0.00ns) (grouped into LUT with out node temp1_2)   --->   "%xor_ln76 = xor i1 %icmp_ln76, i1 1" [Arithmetic.cpp:76->Arithmetic.cpp:206]   --->   Operation 40 'xor' 'xor_ln76' <Predicate = (icmp_ln190)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 41 [1/1] (0.97ns) (out node of the LUT)   --->   "%temp1_2 = select i1 %xor_ln76, i32 %temp1_1, i32 %temp1" [Arithmetic.cpp:76->Arithmetic.cpp:206]   --->   Operation 41 'select' 'temp1_2' <Predicate = (icmp_ln190)> <Delay = 0.97> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 42 [1/1] (0.00ns) (grouped into LUT with out node add_ln208_1)   --->   "%trunc_ln186 = trunc i32 %temp1_2" [Arithmetic.cpp:186]   --->   Operation 42 'trunc' 'trunc_ln186' <Predicate = (icmp_ln190)> <Delay = 0.00>
ST_2 : Operation 43 [1/1] (0.00ns) (grouped into LUT with out node add_ln208_1)   --->   "%trunc_ln = partselect i31 @_ssdm_op_PartSelect.i31.i32.i32.i32, i32 %temp1_2, i32 1, i32 31" [Arithmetic.cpp:208]   --->   Operation 43 'partselect' 'trunc_ln' <Predicate = (icmp_ln190)> <Delay = 0.00>
ST_2 : Operation 44 [1/1] (0.00ns) (grouped into LUT with out node add_ln208_1)   --->   "%sext_ln208 = sext i31 %trunc_ln" [Arithmetic.cpp:208]   --->   Operation 44 'sext' 'sext_ln208' <Predicate = (icmp_ln190)> <Delay = 0.00>
ST_2 : Operation 45 [1/1] (0.00ns) (grouped into LUT with out node add_ln208_1)   --->   "%select_ln208 = select i1 %trunc_ln186, i31 %trunc_ln208_1, i31 0" [Arithmetic.cpp:208]   --->   Operation 45 'select' 'select_ln208' <Predicate = (icmp_ln190)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 46 [1/1] (0.00ns) (grouped into LUT with out node add_ln208_1)   --->   "%zext_ln208 = zext i31 %select_ln208" [Arithmetic.cpp:208]   --->   Operation 46 'zext' 'zext_ln208' <Predicate = (icmp_ln190)> <Delay = 0.00>
ST_2 : Operation 47 [1/1] (2.52ns) (out node of the LUT)   --->   "%add_ln208_1 = add i32 %zext_ln208, i32 %sext_ln208" [Arithmetic.cpp:208]   --->   Operation 47 'add' 'add_ln208_1' <Predicate = (icmp_ln190)> <Delay = 2.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 48 [17/17] (3.12ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 48 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 3.12> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 3 <SV = 2> <Delay = 5.58>
ST_3 : Operation 49 [15/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 49 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_3 : Operation 50 [16/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 50 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 4 <SV = 3> <Delay = 5.58>
ST_4 : Operation 51 [14/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 51 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_4 : Operation 52 [15/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 52 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 5 <SV = 4> <Delay = 5.58>
ST_5 : Operation 53 [13/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 53 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_5 : Operation 54 [14/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 54 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 6 <SV = 5> <Delay = 5.58>
ST_6 : Operation 55 [12/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 55 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 56 [13/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 56 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 7 <SV = 6> <Delay = 5.58>
ST_7 : Operation 57 [11/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 57 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_7 : Operation 58 [12/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 58 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 8 <SV = 7> <Delay = 5.58>
ST_8 : Operation 59 [10/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 59 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_8 : Operation 60 [11/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 60 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 9 <SV = 8> <Delay = 5.58>
ST_9 : Operation 61 [9/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 61 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_9 : Operation 62 [10/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 62 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 10 <SV = 9> <Delay = 5.58>
ST_10 : Operation 63 [8/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 63 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_10 : Operation 64 [9/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 64 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 11 <SV = 10> <Delay = 5.58>
ST_11 : Operation 65 [7/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 65 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_11 : Operation 66 [8/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 66 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 12 <SV = 11> <Delay = 5.58>
ST_12 : Operation 67 [6/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 67 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_12 : Operation 68 [7/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 68 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 13 <SV = 12> <Delay = 5.58>
ST_13 : Operation 69 [5/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 69 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_13 : Operation 70 [6/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 70 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 14 <SV = 13> <Delay = 5.58>
ST_14 : Operation 71 [4/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 71 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_14 : Operation 72 [5/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 72 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 15 <SV = 14> <Delay = 5.58>
ST_15 : Operation 73 [3/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 73 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_15 : Operation 74 [4/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 74 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 16 <SV = 15> <Delay = 5.58>
ST_16 : Operation 75 [2/17] (5.58ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 75 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_16 : Operation 76 [3/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 76 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 17 <SV = 16> <Delay = 5.58>
ST_17 : Operation 77 [1/17] (4.21ns)   --->   "%temp = call i32 @MUL_MOD, i32 %input2_val_read, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:200]   --->   Operation 77 'call' 'temp' <Predicate = (!icmp_ln190)> <Delay = 4.21> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_17 : Operation 78 [2/17] (5.58ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 78 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 18 <SV = 17> <Delay = 5.80>
ST_18 : Operation 79 [1/1] (2.55ns)   --->   "%res1_temp = add i32 %temp, i32 %input1_val_read" [Arithmetic.cpp:73->Arithmetic.cpp:201]   --->   Operation 79 'add' 'res1_temp' <Predicate = (!icmp_ln190)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 80 [1/1] (1.70ns)   --->   "%zext_ln76_3_cast = mux i31 @_ssdm_op_Mux.ap_auto.3i31.i2, i31 1073750017, i31 1073815553, i31 1073872897, i2 %MOD_INDEX_read" [Arithmetic.cpp:76->Arithmetic.cpp:201]   --->   Operation 80 'mux' 'zext_ln76_3_cast' <Predicate = (!icmp_ln190)> <Delay = 1.70> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 1.70> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 81 [1/1] (0.00ns)   --->   "%zext_ln76_1 = zext i31 %zext_ln76_3_cast" [Arithmetic.cpp:76->Arithmetic.cpp:201]   --->   Operation 81 'zext' 'zext_ln76_1' <Predicate = (!icmp_ln190)> <Delay = 0.00>
ST_18 : Operation 82 [1/1] (2.55ns)   --->   "%icmp_ln76_1 = icmp_slt  i32 %res1_temp, i32 %zext_ln76_1" [Arithmetic.cpp:76->Arithmetic.cpp:201]   --->   Operation 82 'icmp' 'icmp_ln76_1' <Predicate = (!icmp_ln190)> <Delay = 2.55> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 83 [1/1] (2.55ns)   --->   "%res1_temp_1 = sub i32 %res1_temp, i32 %zext_ln76_1" [Arithmetic.cpp:77->Arithmetic.cpp:201]   --->   Operation 83 'sub' 'res1_temp_1' <Predicate = (!icmp_ln190)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 84 [1/1] (0.69ns)   --->   "%res1_temp_2 = select i1 %icmp_ln76_1, i32 %res1_temp, i32 %res1_temp_1" [Arithmetic.cpp:76->Arithmetic.cpp:201]   --->   Operation 84 'select' 'res1_temp_2' <Predicate = (!icmp_ln190)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_18 : Operation 85 [1/1] (2.55ns)   --->   "%res2_temp_3 = sub i32 %input1_val_read, i32 %temp" [Arithmetic.cpp:86->Arithmetic.cpp:202]   --->   Operation 85 'sub' 'res2_temp_3' <Predicate = (!icmp_ln190)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 86 [1/1] (0.00ns)   --->   "%tmp_47 = bitselect i1 @_ssdm_op_BitSelect.i1.i32.i32, i32 %res2_temp_3, i32 31" [Arithmetic.cpp:88->Arithmetic.cpp:202]   --->   Operation 86 'bitselect' 'tmp_47' <Predicate = (!icmp_ln190)> <Delay = 0.00>
ST_18 : Operation 87 [1/1] (2.55ns)   --->   "%res2_temp_4 = add i32 %res2_temp_3, i32 %zext_ln76_1" [Arithmetic.cpp:89->Arithmetic.cpp:202]   --->   Operation 87 'add' 'res2_temp_4' <Predicate = (!icmp_ln190)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_18 : Operation 88 [1/1] (0.69ns)   --->   "%res2_temp_5 = select i1 %tmp_47, i32 %res2_temp_4, i32 %res2_temp_3" [Arithmetic.cpp:88->Arithmetic.cpp:202]   --->   Operation 88 'select' 'res2_temp_5' <Predicate = (!icmp_ln190)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_18 : Operation 89 [1/17] (4.21ns)   --->   "%temp_1 = call i32 @MUL_MOD, i32 %res2_temp_2, i32 %twiddle_factor_val2_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:209]   --->   Operation 89 'call' 'temp_1' <Predicate = (icmp_ln190)> <Delay = 4.21> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 19 <SV = 18> <Delay = 4.11>
ST_19 : Operation 90 [1/1] (1.58ns)   --->   "%br_ln205 = br void %if.end59" [Arithmetic.cpp:205]   --->   Operation 90 'br' 'br_ln205' <Predicate = (!icmp_ln190)> <Delay = 1.58>
ST_19 : Operation 91 [1/1] (0.00ns) (grouped into LUT with out node add_ln210)   --->   "%trunc_ln209 = trunc i32 %temp_1" [Arithmetic.cpp:209]   --->   Operation 91 'trunc' 'trunc_ln209' <Predicate = (icmp_ln190)> <Delay = 0.00>
ST_19 : Operation 92 [1/1] (0.00ns) (grouped into LUT with out node add_ln210)   --->   "%trunc_ln1 = partselect i31 @_ssdm_op_PartSelect.i31.i32.i32.i32, i32 %temp_1, i32 1, i32 31" [Arithmetic.cpp:210]   --->   Operation 92 'partselect' 'trunc_ln1' <Predicate = (icmp_ln190)> <Delay = 0.00>
ST_19 : Operation 93 [1/1] (0.00ns) (grouped into LUT with out node add_ln210)   --->   "%sext_ln210 = sext i31 %trunc_ln1" [Arithmetic.cpp:210]   --->   Operation 93 'sext' 'sext_ln210' <Predicate = (icmp_ln190)> <Delay = 0.00>
ST_19 : Operation 94 [1/1] (0.00ns) (grouped into LUT with out node add_ln210)   --->   "%select_ln210 = select i1 %trunc_ln209, i31 %trunc_ln208_1, i31 0" [Arithmetic.cpp:210]   --->   Operation 94 'select' 'select_ln210' <Predicate = (icmp_ln190)> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.73> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_19 : Operation 95 [1/1] (0.00ns) (grouped into LUT with out node add_ln210)   --->   "%zext_ln210 = zext i31 %select_ln210" [Arithmetic.cpp:210]   --->   Operation 95 'zext' 'zext_ln210' <Predicate = (icmp_ln190)> <Delay = 0.00>
ST_19 : Operation 96 [1/1] (2.52ns) (out node of the LUT)   --->   "%add_ln210 = add i32 %zext_ln210, i32 %sext_ln210" [Arithmetic.cpp:210]   --->   Operation 96 'add' 'add_ln210' <Predicate = (icmp_ln190)> <Delay = 2.52> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.52> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_19 : Operation 97 [1/1] (1.58ns)   --->   "%br_ln211 = br void %if.end59" [Arithmetic.cpp:211]   --->   Operation 97 'br' 'br_ln211' <Predicate = (icmp_ln190)> <Delay = 1.58>
ST_19 : Operation 98 [1/1] (0.00ns)   --->   "%phi_ln215 = phi i32 %res1_temp_2, void %if.then8, i32 %add_ln208_1, void %if.then11"   --->   Operation 98 'phi' 'phi_ln215' <Predicate = true> <Delay = 0.00>
ST_19 : Operation 99 [1/1] (0.00ns)   --->   "%phi_ln215_1 = phi i32 %res2_temp_5, void %if.then8, i32 %add_ln210, void %if.then11"   --->   Operation 99 'phi' 'phi_ln215_1' <Predicate = true> <Delay = 0.00>
ST_19 : Operation 100 [1/1] (0.00ns)   --->   "%mrv = insertvalue i64 <undef>, i32 %phi_ln215" [Arithmetic.cpp:215]   --->   Operation 100 'insertvalue' 'mrv' <Predicate = true> <Delay = 0.00>
ST_19 : Operation 101 [1/1] (0.00ns)   --->   "%mrv_1 = insertvalue i64 %mrv, i32 %phi_ln215_1" [Arithmetic.cpp:215]   --->   Operation 101 'insertvalue' 'mrv_1' <Predicate = true> <Delay = 0.00>
ST_19 : Operation 102 [1/1] (0.00ns)   --->   "%ret_ln215 = ret i64 %mrv_1" [Arithmetic.cpp:215]   --->   Operation 102 'ret' 'ret_ln215' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 8.000ns, clock uncertainty: 2.160ns.

 <State 1>: 5.802ns
The critical path consists of the following:
	wire read operation ('input2_val_read') on port 'input2_val' [9]  (0.000 ns)
	'sub' operation ('res2_temp', Arithmetic.cpp:86->Arithmetic.cpp:207) [35]  (2.552 ns)
	'add' operation ('res2_temp', Arithmetic.cpp:89->Arithmetic.cpp:207) [37]  (2.552 ns)
	'select' operation ('res2_temp', Arithmetic.cpp:88->Arithmetic.cpp:207) [38]  (0.698 ns)

 <State 2>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 3>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 4>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 5>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 6>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 7>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 8>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 9>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 10>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 11>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 12>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 13>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 14>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 15>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 16>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:200) to 'MUL_MOD' [14]  (5.580 ns)

 <State 17>: 5.580ns
The critical path consists of the following:
	'call' operation ('temp', Arithmetic.cpp:209) to 'MUL_MOD' [46]  (5.580 ns)

 <State 18>: 5.802ns
The critical path consists of the following:
	'add' operation ('res1_temp', Arithmetic.cpp:73->Arithmetic.cpp:201) [15]  (2.552 ns)
	'sub' operation ('res1_temp', Arithmetic.cpp:77->Arithmetic.cpp:201) [19]  (2.552 ns)
	'select' operation ('res1_temp', Arithmetic.cpp:76->Arithmetic.cpp:201) [20]  (0.698 ns)

 <State 19>: 4.110ns
The critical path consists of the following:
	'select' operation ('select_ln210', Arithmetic.cpp:210) [50]  (0.000 ns)
	'add' operation ('add_ln210', Arithmetic.cpp:210) [52]  (2.522 ns)
	multiplexor before 'phi' operation ('res2_temp') with incoming values : ('res2_temp', Arithmetic.cpp:88->Arithmetic.cpp:202) ('add_ln210', Arithmetic.cpp:210) [56]  (1.588 ns)
	'phi' operation ('res2_temp') with incoming values : ('res2_temp', Arithmetic.cpp:88->Arithmetic.cpp:202) ('add_ln210', Arithmetic.cpp:210) [56]  (0.000 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
