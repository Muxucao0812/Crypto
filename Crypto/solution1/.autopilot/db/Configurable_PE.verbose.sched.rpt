

================================================================
== Vitis HLS Report for 'Configurable_PE'
================================================================
* Date:           Thu Mar 27 00:01:05 2025

* Version:        2023.1 (Build 3854077 on May  4 2023)
* Project:        Crypto
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+---------+----------+------------+
    |  Clock |  Target | Estimated| Uncertainty|
    +--------+---------+----------+------------+
    |ap_clk  |  8.00 ns|  5.802 ns|     2.16 ns|
    +--------+---------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       17|       17|  0.136 us|  0.136 us|    1|    1|      yes|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 1
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 18


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 18
* Pipeline : 1
  Pipeline-0 : II = 1, D = 18, States = { 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 2 3 18 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 4 
2 --> 3 
3 --> 18 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 13 
13 --> 14 
14 --> 15 
15 --> 16 
16 --> 17 
17 --> 2 
18 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 3.12>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%op_read = read i2 @_ssdm_op_Read.ap_auto.i2, i2 %op"   --->   Operation 19 'read' 'op_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%MOD_INDEX_read = read i2 @_ssdm_op_Read.ap_auto.i2, i2 %MOD_INDEX"   --->   Operation 20 'read' 'MOD_INDEX_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%input2_val_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %input2_val"   --->   Operation 21 'read' 'input2_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%input1_val_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %input1_val"   --->   Operation 22 'read' 'input1_val_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (1.86ns)   --->   "%switch_ln190 = switch i2 %op_read, void %if.then, i2 2, void %if.then5, i2 1, void %if.then2" [Arithmetic.cpp:190]   --->   Operation 23 'switch' 'switch_ln190' <Predicate = true> <Delay = 1.86>
ST_1 : Operation 24 [17/17] (3.12ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 24 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 3.12> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 2 <SV = 15> <Delay = 5.80>
ST_2 : Operation 25 [1/1] (2.55ns)   --->   "%res1_temp_6 = sub i32 %input1_val_read, i32 %input2_val_read" [Arithmetic.cpp:86->Arithmetic.cpp:194]   --->   Operation 25 'sub' 'res1_temp_6' <Predicate = (op_read == 1)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 26 [1/1] (0.00ns)   --->   "%tmp = bitselect i1 @_ssdm_op_BitSelect.i1.i32.i32, i32 %res1_temp_6, i32 31" [Arithmetic.cpp:88->Arithmetic.cpp:194]   --->   Operation 26 'bitselect' 'tmp' <Predicate = (op_read == 1)> <Delay = 0.00>
ST_2 : Operation 27 [1/1] (1.82ns)   --->   "%br_ln88 = br i1 %tmp, void %if.end59, void %if.then.i116" [Arithmetic.cpp:88->Arithmetic.cpp:194]   --->   Operation 27 'br' 'br_ln88' <Predicate = (op_read == 1)> <Delay = 1.82>
ST_2 : Operation 28 [2/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 28 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_2 : Operation 29 [1/1] (2.55ns)   --->   "%res1_temp = add i32 %input2_val_read, i32 %input1_val_read" [Arithmetic.cpp:73->Arithmetic.cpp:191]   --->   Operation 29 'add' 'res1_temp' <Predicate = (op_read != 2 & op_read != 1)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 30 [1/1] (1.70ns)   --->   "%zext_ln76_cast = mux i31 @_ssdm_op_Mux.ap_auto.3i31.i2, i31 1073750017, i31 1073815553, i31 1073872897, i2 %MOD_INDEX_read" [Arithmetic.cpp:76->Arithmetic.cpp:191]   --->   Operation 30 'mux' 'zext_ln76_cast' <Predicate = (op_read != 2 & op_read != 1)> <Delay = 1.70> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 1.70> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 31 [1/1] (0.00ns)   --->   "%zext_ln76 = zext i31 %zext_ln76_cast" [Arithmetic.cpp:76->Arithmetic.cpp:191]   --->   Operation 31 'zext' 'zext_ln76' <Predicate = (op_read != 2 & op_read != 1)> <Delay = 0.00>
ST_2 : Operation 32 [1/1] (2.55ns)   --->   "%icmp_ln76 = icmp_slt  i32 %res1_temp, i32 %zext_ln76" [Arithmetic.cpp:76->Arithmetic.cpp:191]   --->   Operation 32 'icmp' 'icmp_ln76' <Predicate = (op_read != 2 & op_read != 1)> <Delay = 2.55> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 33 [1/1] (2.55ns)   --->   "%res1_temp_3 = sub i32 %res1_temp, i32 %zext_ln76" [Arithmetic.cpp:77->Arithmetic.cpp:191]   --->   Operation 33 'sub' 'res1_temp_3' <Predicate = (op_read != 2 & op_read != 1)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 34 [1/1] (0.69ns)   --->   "%res1_temp_4 = select i1 %icmp_ln76, i32 %res1_temp, i32 %res1_temp_3" [Arithmetic.cpp:76->Arithmetic.cpp:191]   --->   Operation 34 'select' 'res1_temp_4' <Predicate = (op_read != 2 & op_read != 1)> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 3 <SV = 16> <Delay = 4.21>
ST_3 : Operation 35 [1/1] (0.00ns) (grouped into LUT with out node res1_temp_7)   --->   "%zext_ln89_cast = mux i31 @_ssdm_op_Mux.ap_auto.3i31.i2, i31 1073750017, i31 1073815553, i31 1073872897, i2 %MOD_INDEX_read" [Arithmetic.cpp:89->Arithmetic.cpp:194]   --->   Operation 35 'mux' 'zext_ln89_cast' <Predicate = (op_read == 1 & tmp)> <Delay = 0.00> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 1.70> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 36 [1/1] (0.00ns) (grouped into LUT with out node res1_temp_7)   --->   "%zext_ln89 = zext i31 %zext_ln89_cast" [Arithmetic.cpp:89->Arithmetic.cpp:194]   --->   Operation 36 'zext' 'zext_ln89' <Predicate = (op_read == 1 & tmp)> <Delay = 0.00>
ST_3 : Operation 37 [1/1] (2.55ns) (out node of the LUT)   --->   "%res1_temp_7 = add i32 %zext_ln89, i32 %res1_temp_6" [Arithmetic.cpp:89->Arithmetic.cpp:194]   --->   Operation 37 'add' 'res1_temp_7' <Predicate = (op_read == 1 & tmp)> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 38 [1/1] (1.82ns)   --->   "%br_ln90 = br void %if.end59" [Arithmetic.cpp:90->Arithmetic.cpp:194]   --->   Operation 38 'br' 'br_ln90' <Predicate = (op_read == 1 & tmp)> <Delay = 1.82>
ST_3 : Operation 39 [1/17] (4.21ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 39 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 4.21> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_3 : Operation 40 [1/1] (1.82ns)   --->   "%br_ln193 = br void %if.end59" [Arithmetic.cpp:193]   --->   Operation 40 'br' 'br_ln193' <Predicate = (op_read != 2 & op_read != 1)> <Delay = 1.82>

State 4 <SV = 1> <Delay = 5.58>
ST_4 : Operation 41 [16/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 41 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 5 <SV = 2> <Delay = 5.58>
ST_5 : Operation 42 [15/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 42 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 6 <SV = 3> <Delay = 5.58>
ST_6 : Operation 43 [14/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 43 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 7 <SV = 4> <Delay = 5.58>
ST_7 : Operation 44 [13/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 44 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 8 <SV = 5> <Delay = 5.58>
ST_8 : Operation 45 [12/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 45 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 9 <SV = 6> <Delay = 5.58>
ST_9 : Operation 46 [11/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 46 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 10 <SV = 7> <Delay = 5.58>
ST_10 : Operation 47 [10/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 47 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 11 <SV = 8> <Delay = 5.58>
ST_11 : Operation 48 [9/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 48 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 12 <SV = 9> <Delay = 5.58>
ST_12 : Operation 49 [8/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 49 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 13 <SV = 10> <Delay = 5.58>
ST_13 : Operation 50 [7/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 50 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 14 <SV = 11> <Delay = 5.58>
ST_14 : Operation 51 [6/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 51 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 15 <SV = 12> <Delay = 5.58>
ST_15 : Operation 52 [5/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 52 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 16 <SV = 13> <Delay = 5.58>
ST_16 : Operation 53 [4/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 53 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 17 <SV = 14> <Delay = 5.58>
ST_17 : Operation 54 [3/17] (5.58ns)   --->   "%res1_temp_5 = call i32 @MUL_MOD.3, i32 %input1_val_read, i32 %input2_val_read, i2 %MOD_INDEX_read" [Arithmetic.cpp:197]   --->   Operation 54 'call' 'res1_temp_5' <Predicate = (op_read == 2)> <Delay = 5.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 18 <SV = 17> <Delay = 1.82>
ST_18 : Operation 55 [1/1] (1.82ns)   --->   "%br_ln199 = br void %if.end59" [Arithmetic.cpp:199]   --->   Operation 55 'br' 'br_ln199' <Predicate = (op_read == 2)> <Delay = 1.82>
ST_18 : Operation 56 [1/1] (0.00ns)   --->   "%phi_ln215 = phi i32 %res1_temp_4, void %if.then, i32 %res1_temp_7, void %if.then.i116, i32 %res1_temp_6, void %if.then2, i32 %res1_temp_5, void %if.then5"   --->   Operation 56 'phi' 'phi_ln215' <Predicate = true> <Delay = 0.00>
ST_18 : Operation 57 [1/1] (0.00ns)   --->   "%ret_ln215 = ret i32 %phi_ln215" [Arithmetic.cpp:215]   --->   Operation 57 'ret' 'ret_ln215' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 8.000ns, clock uncertainty: 2.160ns.

 <State 1>: 3.127ns
The critical path consists of the following:
	wire read operation ('MOD_INDEX_read') on port 'MOD_INDEX' [6]  (0.000 ns)
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (3.127 ns)

 <State 2>: 5.802ns
The critical path consists of the following:
	'add' operation ('res1_temp', Arithmetic.cpp:73->Arithmetic.cpp:191) [23]  (2.552 ns)
	'icmp' operation ('icmp_ln76', Arithmetic.cpp:76->Arithmetic.cpp:191) [26]  (2.552 ns)
	'select' operation ('res1_temp', Arithmetic.cpp:76->Arithmetic.cpp:191) [28]  (0.698 ns)

 <State 3>: 4.218ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (4.218 ns)

 <State 4>: 5.580ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (5.580 ns)

 <State 5>: 5.580ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (5.580 ns)

 <State 6>: 5.580ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (5.580 ns)

 <State 7>: 5.580ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (5.580 ns)

 <State 8>: 5.580ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (5.580 ns)

 <State 9>: 5.580ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (5.580 ns)

 <State 10>: 5.580ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (5.580 ns)

 <State 11>: 5.580ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (5.580 ns)

 <State 12>: 5.580ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (5.580 ns)

 <State 13>: 5.580ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (5.580 ns)

 <State 14>: 5.580ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (5.580 ns)

 <State 15>: 5.580ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (5.580 ns)

 <State 16>: 5.580ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (5.580 ns)

 <State 17>: 5.580ns
The critical path consists of the following:
	'call' operation ('res1_temp', Arithmetic.cpp:197) to 'MUL_MOD.3' [20]  (5.580 ns)

 <State 18>: 1.827ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('res1_temp') with incoming values : ('res1_temp', Arithmetic.cpp:86->Arithmetic.cpp:194) ('res1_temp', Arithmetic.cpp:89->Arithmetic.cpp:194) ('res1_temp', Arithmetic.cpp:197) ('res1_temp', Arithmetic.cpp:76->Arithmetic.cpp:191) [31]  (1.827 ns)
	'phi' operation ('res1_temp') with incoming values : ('res1_temp', Arithmetic.cpp:86->Arithmetic.cpp:194) ('res1_temp', Arithmetic.cpp:89->Arithmetic.cpp:194) ('res1_temp', Arithmetic.cpp:197) ('res1_temp', Arithmetic.cpp:76->Arithmetic.cpp:191) [31]  (0.000 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
