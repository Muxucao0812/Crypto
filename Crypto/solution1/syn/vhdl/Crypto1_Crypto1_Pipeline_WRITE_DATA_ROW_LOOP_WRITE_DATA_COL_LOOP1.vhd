-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto1_Crypto1_Pipeline_WRITE_DATA_ROW_LOOP_WRITE_DATA_COL_LOOP1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    DataInStream_TVALID : IN STD_LOGIC;
    empty : IN STD_LOGIC_VECTOR (9 downto 0);
    DataRAM_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_ce0 : OUT STD_LOGIC;
    DataRAM_we0 : OUT STD_LOGIC;
    DataRAM_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_1_ce0 : OUT STD_LOGIC;
    DataRAM_1_we0 : OUT STD_LOGIC;
    DataRAM_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_2_ce0 : OUT STD_LOGIC;
    DataRAM_2_we0 : OUT STD_LOGIC;
    DataRAM_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_3_ce0 : OUT STD_LOGIC;
    DataRAM_3_we0 : OUT STD_LOGIC;
    DataRAM_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_4_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_4_ce0 : OUT STD_LOGIC;
    DataRAM_4_we0 : OUT STD_LOGIC;
    DataRAM_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_5_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_5_ce0 : OUT STD_LOGIC;
    DataRAM_5_we0 : OUT STD_LOGIC;
    DataRAM_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_6_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_6_ce0 : OUT STD_LOGIC;
    DataRAM_6_we0 : OUT STD_LOGIC;
    DataRAM_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_7_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_7_ce0 : OUT STD_LOGIC;
    DataRAM_7_we0 : OUT STD_LOGIC;
    DataRAM_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataInStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    DataInStream_TREADY : OUT STD_LOGIC;
    DataInStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    DataInStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    DataInStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Crypto1_Crypto1_Pipeline_WRITE_DATA_ROW_LOOP_WRITE_DATA_COL_LOOP1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_40 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln76_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal DataInStream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal DataStreamReg_data_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataStreamReg_data_reg_398_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_2_fu_297_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln76_2_reg_410 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln78_fu_305_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln78_reg_415 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln79_1_reg_420 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln80_2_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_98 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln78_1_fu_319_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_102 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal indvar_flatten33_fu_106 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln76_fu_256_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten33_load : STD_LOGIC_VECTOR (12 downto 0);
    signal DataRAM_6_we0_local : STD_LOGIC;
    signal DataRAM_6_ce0_local : STD_LOGIC;
    signal DataRAM_5_we0_local : STD_LOGIC;
    signal DataRAM_5_ce0_local : STD_LOGIC;
    signal DataRAM_4_we0_local : STD_LOGIC;
    signal DataRAM_4_ce0_local : STD_LOGIC;
    signal DataRAM_3_we0_local : STD_LOGIC;
    signal DataRAM_3_ce0_local : STD_LOGIC;
    signal DataRAM_2_we0_local : STD_LOGIC;
    signal DataRAM_2_ce0_local : STD_LOGIC;
    signal DataRAM_1_we0_local : STD_LOGIC;
    signal DataRAM_1_ce0_local : STD_LOGIC;
    signal DataRAM_we0_local : STD_LOGIC;
    signal DataRAM_ce0_local : STD_LOGIC;
    signal DataRAM_7_we0_local : STD_LOGIC;
    signal DataRAM_7_ce0_local : STD_LOGIC;
    signal icmp_ln78_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln76_1_fu_277_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln76_fu_289_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln80_fu_335_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln80_fu_340_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_fu_343_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_349_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Crypto1_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Crypto1_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten33_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln76_fu_250_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    indvar_flatten33_fu_106 <= add_ln76_fu_256_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten33_fu_106 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_102 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_102 <= select_ln76_2_fu_297_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_98 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    k_fu_98 <= add_ln78_1_fu_319_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                DataStreamReg_data_reg_398 <= DataInStream_TDATA;
                DataStreamReg_data_reg_398_pp0_iter1_reg <= DataStreamReg_data_reg_398;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                select_ln76_2_reg_410 <= select_ln76_2_fu_297_p3;
                trunc_ln78_reg_415 <= trunc_ln78_fu_305_p1;
                trunc_ln79_1_reg_420 <= select_ln76_fu_289_p3(5 downto 3);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    DataInStream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, DataInStream_TVALID, icmp_ln76_fu_250_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln76_fu_250_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataInStream_TDATA_blk_n <= DataInStream_TVALID;
        else 
            DataInStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    DataInStream_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln76_fu_250_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln76_fu_250_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DataInStream_TREADY <= ap_const_logic_1;
        else 
            DataInStream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_1_address0 <= zext_ln80_2_fu_356_p1(13 - 1 downto 0);
    DataRAM_1_ce0 <= DataRAM_1_ce0_local;

    DataRAM_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_1_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_1_d0 <= DataStreamReg_data_reg_398_pp0_iter1_reg;
    DataRAM_1_we0 <= DataRAM_1_we0_local;

    DataRAM_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln79_1_reg_420)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln79_1_reg_420 = ap_const_lv3_1))) then 
            DataRAM_1_we0_local <= ap_const_logic_1;
        else 
            DataRAM_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_2_address0 <= zext_ln80_2_fu_356_p1(13 - 1 downto 0);
    DataRAM_2_ce0 <= DataRAM_2_ce0_local;

    DataRAM_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_2_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_2_d0 <= DataStreamReg_data_reg_398_pp0_iter1_reg;
    DataRAM_2_we0 <= DataRAM_2_we0_local;

    DataRAM_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln79_1_reg_420)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln79_1_reg_420 = ap_const_lv3_2))) then 
            DataRAM_2_we0_local <= ap_const_logic_1;
        else 
            DataRAM_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_3_address0 <= zext_ln80_2_fu_356_p1(13 - 1 downto 0);
    DataRAM_3_ce0 <= DataRAM_3_ce0_local;

    DataRAM_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_3_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_3_d0 <= DataStreamReg_data_reg_398_pp0_iter1_reg;
    DataRAM_3_we0 <= DataRAM_3_we0_local;

    DataRAM_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln79_1_reg_420)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln79_1_reg_420 = ap_const_lv3_3))) then 
            DataRAM_3_we0_local <= ap_const_logic_1;
        else 
            DataRAM_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_4_address0 <= zext_ln80_2_fu_356_p1(13 - 1 downto 0);
    DataRAM_4_ce0 <= DataRAM_4_ce0_local;

    DataRAM_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_4_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_4_d0 <= DataStreamReg_data_reg_398_pp0_iter1_reg;
    DataRAM_4_we0 <= DataRAM_4_we0_local;

    DataRAM_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln79_1_reg_420)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln79_1_reg_420 = ap_const_lv3_4))) then 
            DataRAM_4_we0_local <= ap_const_logic_1;
        else 
            DataRAM_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_5_address0 <= zext_ln80_2_fu_356_p1(13 - 1 downto 0);
    DataRAM_5_ce0 <= DataRAM_5_ce0_local;

    DataRAM_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_5_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_5_d0 <= DataStreamReg_data_reg_398_pp0_iter1_reg;
    DataRAM_5_we0 <= DataRAM_5_we0_local;

    DataRAM_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln79_1_reg_420)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln79_1_reg_420 = ap_const_lv3_5))) then 
            DataRAM_5_we0_local <= ap_const_logic_1;
        else 
            DataRAM_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_6_address0 <= zext_ln80_2_fu_356_p1(13 - 1 downto 0);
    DataRAM_6_ce0 <= DataRAM_6_ce0_local;

    DataRAM_6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_6_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_6_d0 <= DataStreamReg_data_reg_398_pp0_iter1_reg;
    DataRAM_6_we0 <= DataRAM_6_we0_local;

    DataRAM_6_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln79_1_reg_420)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln79_1_reg_420 = ap_const_lv3_6))) then 
            DataRAM_6_we0_local <= ap_const_logic_1;
        else 
            DataRAM_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_7_address0 <= zext_ln80_2_fu_356_p1(13 - 1 downto 0);
    DataRAM_7_ce0 <= DataRAM_7_ce0_local;

    DataRAM_7_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_7_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_7_d0 <= DataStreamReg_data_reg_398_pp0_iter1_reg;
    DataRAM_7_we0 <= DataRAM_7_we0_local;

    DataRAM_7_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln79_1_reg_420)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln79_1_reg_420 = ap_const_lv3_7))) then 
            DataRAM_7_we0_local <= ap_const_logic_1;
        else 
            DataRAM_7_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_address0 <= zext_ln80_2_fu_356_p1(13 - 1 downto 0);
    DataRAM_ce0 <= DataRAM_ce0_local;

    DataRAM_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_d0 <= DataStreamReg_data_reg_398_pp0_iter1_reg;
    DataRAM_we0 <= DataRAM_we0_local;

    DataRAM_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln79_1_reg_420)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln79_1_reg_420 = ap_const_lv3_0))) then 
            DataRAM_we0_local <= ap_const_logic_1;
        else 
            DataRAM_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln76_1_fu_277_p2 <= std_logic_vector(unsigned(j_fu_102) + unsigned(ap_const_lv7_1));
    add_ln76_fu_256_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten33_load) + unsigned(ap_const_lv13_1));
    add_ln78_1_fu_319_p2 <= std_logic_vector(unsigned(select_ln76_fu_289_p3) + unsigned(ap_const_lv7_1));
    add_ln78_fu_343_p2 <= std_logic_vector(unsigned(add_ln80_fu_335_p2) + unsigned(zext_ln80_fu_340_p1));
    add_ln80_fu_335_p2 <= std_logic_vector(unsigned(empty) + unsigned(ap_const_lv10_40));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(DataInStream_TVALID, icmp_ln76_fu_250_p2)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((icmp_ln76_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_0 = DataInStream_TVALID));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln76_fu_250_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln76_fu_250_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten33_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten33_fu_106)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten33_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten33_load <= indvar_flatten33_fu_106;
        end if; 
    end process;

    icmp_ln76_fu_250_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten33_load = ap_const_lv13_1000) else "0";
    icmp_ln78_fu_283_p2 <= "1" when (k_fu_98 = ap_const_lv7_40) else "0";
    select_ln76_2_fu_297_p3 <= 
        add_ln76_1_fu_277_p2 when (icmp_ln78_fu_283_p2(0) = '1') else 
        j_fu_102;
    select_ln76_fu_289_p3 <= 
        ap_const_lv7_0 when (icmp_ln78_fu_283_p2(0) = '1') else 
        k_fu_98;
    tmp_s_fu_349_p3 <= (add_ln78_fu_343_p2 & trunc_ln78_reg_415);
    trunc_ln78_fu_305_p1 <= select_ln76_fu_289_p3(3 - 1 downto 0);
    zext_ln80_2_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_349_p3),64));
    zext_ln80_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln76_2_reg_410),10));
end behav;
