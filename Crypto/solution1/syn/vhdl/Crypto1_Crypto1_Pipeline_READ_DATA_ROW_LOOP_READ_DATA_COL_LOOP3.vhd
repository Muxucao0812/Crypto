-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto1_Crypto1_Pipeline_READ_DATA_ROW_LOOP_READ_DATA_COL_LOOP3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    DataOutStream_TREADY : IN STD_LOGIC;
    empty : IN STD_LOGIC_VECTOR (9 downto 0);
    DataRAM_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_ce0 : OUT STD_LOGIC;
    DataRAM_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_1_ce0 : OUT STD_LOGIC;
    DataRAM_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_2_ce0 : OUT STD_LOGIC;
    DataRAM_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_3_ce0 : OUT STD_LOGIC;
    DataRAM_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_4_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_4_ce0 : OUT STD_LOGIC;
    DataRAM_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_5_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_5_ce0 : OUT STD_LOGIC;
    DataRAM_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_6_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_6_ce0 : OUT STD_LOGIC;
    DataRAM_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataRAM_7_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    DataRAM_7_ce0 : OUT STD_LOGIC;
    DataRAM_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DataOutStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    DataOutStream_TVALID : OUT STD_LOGIC;
    DataOutStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    DataOutStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    DataOutStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Crypto1_Crypto1_Pipeline_READ_DATA_ROW_LOOP_READ_DATA_COL_LOOP3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_40 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln96_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal DataOutStream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln96_2_fu_310_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln96_2_reg_451 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln98_fu_318_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln98_reg_456 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln98_5_reg_461 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln98_5_reg_461_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln99_2_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_108 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln98_1_fu_332_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_112 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal indvar_flatten47_fu_116 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln96_fu_273_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten47_load : STD_LOGIC_VECTOR (12 downto 0);
    signal DataStreamReg_data_fu_381_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal DataRAM_ce0_local : STD_LOGIC;
    signal DataRAM_1_ce0_local : STD_LOGIC;
    signal DataRAM_2_ce0_local : STD_LOGIC;
    signal DataRAM_3_ce0_local : STD_LOGIC;
    signal DataRAM_4_ce0_local : STD_LOGIC;
    signal DataRAM_5_ce0_local : STD_LOGIC;
    signal DataRAM_6_ce0_local : STD_LOGIC;
    signal DataRAM_7_ce0_local : STD_LOGIC;
    signal icmp_ln98_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln96_1_fu_290_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln96_fu_302_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln99_fu_348_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln99_fu_353_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln98_fu_356_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_362_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal DataStreamReg_data_fu_381_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal DataStreamReg_data_fu_381_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataStreamReg_data_fu_381_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataStreamReg_data_fu_381_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataStreamReg_data_fu_381_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataStreamReg_data_fu_381_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataStreamReg_data_fu_381_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataStreamReg_data_fu_381_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal DataStreamReg_data_fu_381_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Crypto1_sparsemux_17_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Crypto1_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_17_3_32_1_1_U2383 : component Crypto1_sparsemux_17_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 32,
        CASE1 => "001",
        din1_WIDTH => 32,
        CASE2 => "010",
        din2_WIDTH => 32,
        CASE3 => "011",
        din3_WIDTH => 32,
        CASE4 => "100",
        din4_WIDTH => 32,
        CASE5 => "101",
        din5_WIDTH => 32,
        CASE6 => "110",
        din6_WIDTH => 32,
        CASE7 => "111",
        din7_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => DataRAM_q0,
        din1 => DataRAM_1_q0,
        din2 => DataRAM_2_q0,
        din3 => DataRAM_3_q0,
        din4 => DataRAM_4_q0,
        din5 => DataRAM_5_q0,
        din6 => DataRAM_6_q0,
        din7 => DataRAM_7_q0,
        def => DataStreamReg_data_fu_381_p17,
        sel => trunc_ln98_5_reg_461_pp0_iter2_reg,
        dout => DataStreamReg_data_fu_381_p19);

    flow_control_loop_pipe_sequential_init_U : component Crypto1_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten47_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln96_fu_267_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten47_fu_116 <= add_ln96_fu_273_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten47_fu_116 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_112 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_112 <= select_ln96_2_fu_310_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_108 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    k_fu_108 <= add_ln98_1_fu_332_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln96_2_reg_451 <= select_ln96_2_fu_310_p3;
                trunc_ln98_5_reg_461 <= select_ln96_fu_302_p3(5 downto 3);
                trunc_ln98_reg_456 <= trunc_ln98_fu_318_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                trunc_ln98_5_reg_461_pp0_iter2_reg <= trunc_ln98_5_reg_461;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    DataOutStream_TDATA <= DataStreamReg_data_fu_381_p19;

    DataOutStream_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, DataOutStream_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            DataOutStream_TDATA_blk_n <= DataOutStream_TREADY;
        else 
            DataOutStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    DataOutStream_TKEEP <= ap_const_lv4_F;
    DataOutStream_TLAST <= ap_const_lv1_0;
    DataOutStream_TSTRB <= ap_const_lv4_F;

    DataOutStream_TVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            DataOutStream_TVALID <= ap_const_logic_1;
        else 
            DataOutStream_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_1_address0 <= zext_ln99_2_fu_369_p1(13 - 1 downto 0);
    DataRAM_1_ce0 <= DataRAM_1_ce0_local;

    DataRAM_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_1_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_2_address0 <= zext_ln99_2_fu_369_p1(13 - 1 downto 0);
    DataRAM_2_ce0 <= DataRAM_2_ce0_local;

    DataRAM_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_2_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_3_address0 <= zext_ln99_2_fu_369_p1(13 - 1 downto 0);
    DataRAM_3_ce0 <= DataRAM_3_ce0_local;

    DataRAM_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_3_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_4_address0 <= zext_ln99_2_fu_369_p1(13 - 1 downto 0);
    DataRAM_4_ce0 <= DataRAM_4_ce0_local;

    DataRAM_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_4_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_5_address0 <= zext_ln99_2_fu_369_p1(13 - 1 downto 0);
    DataRAM_5_ce0 <= DataRAM_5_ce0_local;

    DataRAM_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_5_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_6_address0 <= zext_ln99_2_fu_369_p1(13 - 1 downto 0);
    DataRAM_6_ce0 <= DataRAM_6_ce0_local;

    DataRAM_6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_6_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_7_address0 <= zext_ln99_2_fu_369_p1(13 - 1 downto 0);
    DataRAM_7_ce0 <= DataRAM_7_ce0_local;

    DataRAM_7_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_7_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataRAM_address0 <= zext_ln99_2_fu_369_p1(13 - 1 downto 0);
    DataRAM_ce0 <= DataRAM_ce0_local;

    DataRAM_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            DataRAM_ce0_local <= ap_const_logic_1;
        else 
            DataRAM_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    DataStreamReg_data_fu_381_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    add_ln96_1_fu_290_p2 <= std_logic_vector(unsigned(j_fu_112) + unsigned(ap_const_lv7_1));
    add_ln96_fu_273_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten47_load) + unsigned(ap_const_lv13_1));
    add_ln98_1_fu_332_p2 <= std_logic_vector(unsigned(select_ln96_fu_302_p3) + unsigned(ap_const_lv7_1));
    add_ln98_fu_356_p2 <= std_logic_vector(unsigned(add_ln99_fu_348_p2) + unsigned(zext_ln99_fu_353_p1));
    add_ln99_fu_348_p2 <= std_logic_vector(unsigned(empty) + unsigned(ap_const_lv10_40));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, DataOutStream_TREADY, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_logic_0 = DataOutStream_TREADY) or (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, DataOutStream_TREADY, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_logic_0 = DataOutStream_TREADY) or (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(DataOutStream_TREADY)
    begin
                ap_block_state4_pp0_stage0_iter3 <= (ap_const_logic_0 = DataOutStream_TREADY);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln96_fu_267_p2)
    begin
        if (((icmp_ln96_fu_267_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten47_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten47_fu_116)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten47_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten47_load <= indvar_flatten47_fu_116;
        end if; 
    end process;

    icmp_ln96_fu_267_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten47_load = ap_const_lv13_1000) else "0";
    icmp_ln98_fu_296_p2 <= "1" when (k_fu_108 = ap_const_lv7_40) else "0";
    select_ln96_2_fu_310_p3 <= 
        add_ln96_1_fu_290_p2 when (icmp_ln98_fu_296_p2(0) = '1') else 
        j_fu_112;
    select_ln96_fu_302_p3 <= 
        ap_const_lv7_0 when (icmp_ln98_fu_296_p2(0) = '1') else 
        k_fu_108;
    tmp_s_fu_362_p3 <= (add_ln98_fu_356_p2 & trunc_ln98_reg_456);
    trunc_ln98_fu_318_p1 <= select_ln96_fu_302_p3(3 - 1 downto 0);
    zext_ln99_2_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_362_p3),64));
    zext_ln99_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln96_2_reg_451),10));
end behav;
