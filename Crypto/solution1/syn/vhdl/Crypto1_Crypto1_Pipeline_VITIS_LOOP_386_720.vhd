-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto1_Crypto1_Pipeline_VITIS_LOOP_386_720 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    InputIndex_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    InputIndex_ce0 : OUT STD_LOGIC;
    InputIndex_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    ReadData_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ReadData_ce0 : OUT STD_LOGIC;
    ReadData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ReadData_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ReadData_1_ce0 : OUT STD_LOGIC;
    ReadData_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ReadData_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ReadData_2_ce0 : OUT STD_LOGIC;
    ReadData_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ReadData_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ReadData_3_ce0 : OUT STD_LOGIC;
    ReadData_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    PermuteData_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    PermuteData_ce0 : OUT STD_LOGIC;
    PermuteData_we0 : OUT STD_LOGIC;
    PermuteData_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    PermuteData_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    PermuteData_1_ce0 : OUT STD_LOGIC;
    PermuteData_1_we0 : OUT STD_LOGIC;
    PermuteData_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    PermuteData_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    PermuteData_2_ce0 : OUT STD_LOGIC;
    PermuteData_2_we0 : OUT STD_LOGIC;
    PermuteData_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    PermuteData_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    PermuteData_3_ce0 : OUT STD_LOGIC;
    PermuteData_3_we0 : OUT STD_LOGIC;
    PermuteData_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Crypto1_Crypto1_Pipeline_VITIS_LOOP_386_720 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln386_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_fu_206_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_278 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_278_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_278_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln386_1_reg_282 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln386_1_reg_282_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln386_1_reg_282_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln388_fu_225_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln388_reg_292 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_247_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_9_cast87_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln388_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln386_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_fu_60 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln386_fu_195_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_l_5 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln388_1_fu_229_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Crypto1_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Crypto1_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_4_2_32_1_1_U112 : component Crypto1_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ReadData_q0,
        din1 => ReadData_1_q0,
        din2 => ReadData_2_q0,
        din3 => ReadData_3_q0,
        din4 => trunc_ln388_reg_292,
        dout => tmp_11_fu_247_p6);

    flow_control_loop_pipe_sequential_init_U : component Crypto1_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    l_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln386_fu_189_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    l_fu_60 <= add_ln386_fu_195_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    l_fu_60 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_278_pp0_iter1_reg <= empty_reg_278;
                lshr_ln386_1_reg_282_pp0_iter1_reg <= lshr_ln386_1_reg_282;
                trunc_ln388_reg_292 <= trunc_ln388_fu_225_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln386_fu_189_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_reg_278 <= empty_fu_206_p1;
                lshr_ln386_1_reg_282 <= ap_sig_allocacmp_l_5(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                empty_reg_278_pp0_iter2_reg <= empty_reg_278_pp0_iter1_reg;
                lshr_ln386_1_reg_282_pp0_iter2_reg <= lshr_ln386_1_reg_282_pp0_iter1_reg;
                tmp_11_reg_317 <= tmp_11_fu_247_p6;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    InputIndex_address0 <= l_9_cast87_fu_201_p1(6 - 1 downto 0);

    InputIndex_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            InputIndex_ce0 <= ap_const_logic_1;
        else 
            InputIndex_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PermuteData_1_address0 <= zext_ln386_fu_260_p1(4 - 1 downto 0);

    PermuteData_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            PermuteData_1_ce0 <= ap_const_logic_1;
        else 
            PermuteData_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PermuteData_1_d0 <= tmp_11_reg_317;

    PermuteData_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, empty_reg_278_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (empty_reg_278_pp0_iter2_reg = ap_const_lv2_1))) then 
            PermuteData_1_we0 <= ap_const_logic_1;
        else 
            PermuteData_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    PermuteData_2_address0 <= zext_ln386_fu_260_p1(4 - 1 downto 0);

    PermuteData_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            PermuteData_2_ce0 <= ap_const_logic_1;
        else 
            PermuteData_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PermuteData_2_d0 <= tmp_11_reg_317;

    PermuteData_2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, empty_reg_278_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (empty_reg_278_pp0_iter2_reg = ap_const_lv2_2))) then 
            PermuteData_2_we0 <= ap_const_logic_1;
        else 
            PermuteData_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    PermuteData_3_address0 <= zext_ln386_fu_260_p1(4 - 1 downto 0);

    PermuteData_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            PermuteData_3_ce0 <= ap_const_logic_1;
        else 
            PermuteData_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PermuteData_3_d0 <= tmp_11_reg_317;

    PermuteData_3_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, empty_reg_278_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (empty_reg_278_pp0_iter2_reg = ap_const_lv2_3))) then 
            PermuteData_3_we0 <= ap_const_logic_1;
        else 
            PermuteData_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    PermuteData_address0 <= zext_ln386_fu_260_p1(4 - 1 downto 0);

    PermuteData_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            PermuteData_ce0 <= ap_const_logic_1;
        else 
            PermuteData_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    PermuteData_d0 <= tmp_11_reg_317;

    PermuteData_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, empty_reg_278_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (empty_reg_278_pp0_iter2_reg = ap_const_lv2_0))) then 
            PermuteData_we0 <= ap_const_logic_1;
        else 
            PermuteData_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ReadData_1_address0 <= zext_ln388_fu_239_p1(4 - 1 downto 0);

    ReadData_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ReadData_1_ce0 <= ap_const_logic_1;
        else 
            ReadData_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ReadData_2_address0 <= zext_ln388_fu_239_p1(4 - 1 downto 0);

    ReadData_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ReadData_2_ce0 <= ap_const_logic_1;
        else 
            ReadData_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ReadData_3_address0 <= zext_ln388_fu_239_p1(4 - 1 downto 0);

    ReadData_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ReadData_3_ce0 <= ap_const_logic_1;
        else 
            ReadData_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ReadData_address0 <= zext_ln388_fu_239_p1(4 - 1 downto 0);

    ReadData_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ReadData_ce0 <= ap_const_logic_1;
        else 
            ReadData_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln386_fu_195_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_l_5) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln386_fu_189_p2)
    begin
        if (((icmp_ln386_fu_189_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_l_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, l_fu_60, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_l_5 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_l_5 <= l_fu_60;
        end if; 
    end process;

    empty_fu_206_p1 <= ap_sig_allocacmp_l_5(2 - 1 downto 0);
    icmp_ln386_fu_189_p2 <= "1" when (ap_sig_allocacmp_l_5 = ap_const_lv7_40) else "0";
    l_9_cast87_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_l_5),64));
    lshr_ln388_1_fu_229_p4 <= InputIndex_q0(5 downto 2);
    trunc_ln388_fu_225_p1 <= InputIndex_q0(2 - 1 downto 0);
    zext_ln386_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln386_1_reg_282_pp0_iter2_reg),64));
    zext_ln388_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln388_1_fu_229_p4),64));
end behav;
