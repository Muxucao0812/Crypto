-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto1_Crypto1_Pipeline_WRITE_TWIDDLE_LOOP_WRITE_TWIDDLE_COL_LOOP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    NTTTWiddleRAM_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    NTTTWiddleRAM_0_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_0_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_0_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    NTTTWiddleRAM_0_1_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_0_1_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_0_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    NTTTWiddleRAM_0_2_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_0_2_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_0_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTWiddleRAM_0_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    NTTTWiddleRAM_0_3_ce0 : OUT STD_LOGIC;
    NTTTWiddleRAM_0_3_we0 : OUT STD_LOGIC;
    NTTTWiddleRAM_0_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    INTTTWiddleRAM_0_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_0_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_0_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    INTTTWiddleRAM_0_1_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_0_1_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_0_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    INTTTWiddleRAM_0_2_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_0_2_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_0_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    INTTTWiddleRAM_0_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    INTTTWiddleRAM_0_3_ce0 : OUT STD_LOGIC;
    INTTTWiddleRAM_0_3_we0 : OUT STD_LOGIC;
    INTTTWiddleRAM_0_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    NTTTwiddleIn_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    NTTTwiddleIn_ce0 : OUT STD_LOGIC;
    NTTTwiddleIn_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    INTTTwiddleIn_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    INTTTwiddleIn_ce0 : OUT STD_LOGIC;
    INTTTwiddleIn_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Crypto1_Crypto1_Pipeline_WRITE_TWIDDLE_LOOP_WRITE_TWIDDLE_COL_LOOP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv14_3000 : STD_LOGIC_VECTOR (13 downto 0) := "11000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln115_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln115_1_fu_282_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln115_1_reg_384 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln115_1_reg_384_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln115_1_reg_384_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_fu_290_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_reg_390 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_477_fu_294_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_477_reg_395 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_477_reg_395_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_477_reg_395_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln_reg_399 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln_reg_399_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln_reg_399_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal NTTTwiddleIn_load_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal INTTTwiddleIn_load_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln120_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln120_1_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_84 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln119_fu_308_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (12 downto 0);
    signal i_fu_88 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten13_fu_92 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln115_1_fu_250_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten13_load : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln119_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln115_fu_262_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln115_fu_274_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_49_fu_329_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_341_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Crypto1_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Crypto1_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln115_fu_244_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_88 <= select_ln115_1_fu_282_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_88 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln115_fu_244_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_92 <= add_ln115_1_fu_250_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_92 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln115_fu_244_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k_fu_84 <= add_ln119_fu_308_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_84 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                INTTTwiddleIn_load_reg_422 <= INTTTwiddleIn_q0;
                NTTTwiddleIn_load_reg_414 <= NTTTwiddleIn_q0;
                empty_477_reg_395_pp0_iter2_reg <= empty_477_reg_395_pp0_iter1_reg;
                lshr_ln_reg_399_pp0_iter2_reg <= lshr_ln_reg_399_pp0_iter1_reg;
                select_ln115_1_reg_384_pp0_iter2_reg <= select_ln115_1_reg_384_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_477_reg_395_pp0_iter1_reg <= empty_477_reg_395;
                lshr_ln_reg_399_pp0_iter1_reg <= lshr_ln_reg_399;
                select_ln115_1_reg_384_pp0_iter1_reg <= select_ln115_1_reg_384;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_fu_244_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_477_reg_395 <= empty_477_fu_294_p1;
                empty_reg_390 <= empty_fu_290_p1;
                lshr_ln_reg_399 <= select_ln115_fu_274_p3(11 downto 2);
                select_ln115_1_reg_384 <= select_ln115_1_fu_282_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    INTTTWiddleRAM_0_1_address0 <= zext_ln120_1_fu_347_p1(12 - 1 downto 0);

    INTTTWiddleRAM_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            INTTTWiddleRAM_0_1_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_0_1_d0 <= INTTTwiddleIn_load_reg_422;

    INTTTWiddleRAM_0_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, empty_477_reg_395_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (empty_477_reg_395_pp0_iter2_reg = ap_const_lv2_1))) then 
            INTTTWiddleRAM_0_1_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_0_2_address0 <= zext_ln120_1_fu_347_p1(12 - 1 downto 0);

    INTTTWiddleRAM_0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            INTTTWiddleRAM_0_2_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_0_2_d0 <= INTTTwiddleIn_load_reg_422;

    INTTTWiddleRAM_0_2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, empty_477_reg_395_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (empty_477_reg_395_pp0_iter2_reg = ap_const_lv2_2))) then 
            INTTTWiddleRAM_0_2_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_0_3_address0 <= zext_ln120_1_fu_347_p1(12 - 1 downto 0);

    INTTTWiddleRAM_0_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            INTTTWiddleRAM_0_3_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_0_3_d0 <= INTTTwiddleIn_load_reg_422;

    INTTTWiddleRAM_0_3_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, empty_477_reg_395_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (empty_477_reg_395_pp0_iter2_reg = ap_const_lv2_3))) then 
            INTTTWiddleRAM_0_3_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_0_address0 <= zext_ln120_1_fu_347_p1(12 - 1 downto 0);

    INTTTWiddleRAM_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            INTTTWiddleRAM_0_ce0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTWiddleRAM_0_d0 <= INTTTwiddleIn_load_reg_422;

    INTTTWiddleRAM_0_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, empty_477_reg_395_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (empty_477_reg_395_pp0_iter2_reg = ap_const_lv2_0))) then 
            INTTTWiddleRAM_0_we0 <= ap_const_logic_1;
        else 
            INTTTWiddleRAM_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    INTTTwiddleIn_address0 <= zext_ln120_fu_335_p1(14 - 1 downto 0);

    INTTTwiddleIn_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            INTTTwiddleIn_ce0 <= ap_const_logic_1;
        else 
            INTTTwiddleIn_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_0_1_address0 <= zext_ln120_1_fu_347_p1(12 - 1 downto 0);

    NTTTWiddleRAM_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            NTTTWiddleRAM_0_1_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_0_1_d0 <= NTTTwiddleIn_load_reg_414;

    NTTTWiddleRAM_0_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, empty_477_reg_395_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (empty_477_reg_395_pp0_iter2_reg = ap_const_lv2_1))) then 
            NTTTWiddleRAM_0_1_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_0_2_address0 <= zext_ln120_1_fu_347_p1(12 - 1 downto 0);

    NTTTWiddleRAM_0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            NTTTWiddleRAM_0_2_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_0_2_d0 <= NTTTwiddleIn_load_reg_414;

    NTTTWiddleRAM_0_2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, empty_477_reg_395_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (empty_477_reg_395_pp0_iter2_reg = ap_const_lv2_2))) then 
            NTTTWiddleRAM_0_2_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_0_3_address0 <= zext_ln120_1_fu_347_p1(12 - 1 downto 0);

    NTTTWiddleRAM_0_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            NTTTWiddleRAM_0_3_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_0_3_d0 <= NTTTwiddleIn_load_reg_414;

    NTTTWiddleRAM_0_3_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, empty_477_reg_395_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (empty_477_reg_395_pp0_iter2_reg = ap_const_lv2_3))) then 
            NTTTWiddleRAM_0_3_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_0_address0 <= zext_ln120_1_fu_347_p1(12 - 1 downto 0);

    NTTTWiddleRAM_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            NTTTWiddleRAM_0_ce0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTWiddleRAM_0_d0 <= NTTTwiddleIn_load_reg_414;

    NTTTWiddleRAM_0_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, empty_477_reg_395_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (empty_477_reg_395_pp0_iter2_reg = ap_const_lv2_0))) then 
            NTTTWiddleRAM_0_we0 <= ap_const_logic_1;
        else 
            NTTTWiddleRAM_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    NTTTwiddleIn_address0 <= zext_ln120_fu_335_p1(14 - 1 downto 0);

    NTTTwiddleIn_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            NTTTwiddleIn_ce0 <= ap_const_logic_1;
        else 
            NTTTwiddleIn_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln115_1_fu_250_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten13_load) + unsigned(ap_const_lv14_1));
    add_ln115_fu_262_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv2_1));
    add_ln119_fu_308_p2 <= std_logic_vector(unsigned(select_ln115_fu_274_p3) + unsigned(ap_const_lv13_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln115_fu_244_p2)
    begin
        if (((icmp_ln115_fu_244_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_88;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten13_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten13_fu_92)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten13_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten13_load <= indvar_flatten13_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_fu_84, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_k_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_k_load <= k_fu_84;
        end if; 
    end process;

    empty_477_fu_294_p1 <= select_ln115_fu_274_p3(2 - 1 downto 0);
    empty_fu_290_p1 <= select_ln115_fu_274_p3(12 - 1 downto 0);
    icmp_ln115_fu_244_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten13_load = ap_const_lv14_3000) else "0";
    icmp_ln119_fu_268_p2 <= "1" when (ap_sig_allocacmp_k_load = ap_const_lv13_1000) else "0";
    select_ln115_1_fu_282_p3 <= 
        add_ln115_fu_262_p2 when (icmp_ln119_fu_268_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln115_fu_274_p3 <= 
        ap_const_lv13_0 when (icmp_ln119_fu_268_p2(0) = '1') else 
        ap_sig_allocacmp_k_load;
    tmp_49_fu_329_p3 <= (select_ln115_1_reg_384 & empty_reg_390);
    tmp_s_fu_341_p3 <= (select_ln115_1_reg_384_pp0_iter2_reg & lshr_ln_reg_399_pp0_iter2_reg);
    zext_ln120_1_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_341_p3),64));
    zext_ln120_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_329_p3),64));
end behav;
