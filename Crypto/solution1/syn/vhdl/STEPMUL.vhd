-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity STEPMUL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input2 : IN STD_LOGIC_VECTOR (31 downto 0);
    res : OUT STD_LOGIC_VECTOR (63 downto 0);
    res_ap_vld : OUT STD_LOGIC );
end;


architecture behav of STEPMUL is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "STEPMUL_STEPMUL,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.580000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=168,HLS_SYN_LUT=178,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input1_low_fu_57_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_low_reg_185 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_fu_61_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_reg_190 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_fu_69_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_reg_195 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_fu_87_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_reg_200 : STD_LOGIC_VECTOR (15 downto 0);
    signal ac_fu_123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bd_fu_129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_175_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal sub_ln63_reg_227 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln45_fu_79_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln44_1_fu_65_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal a_plus_b_fu_101_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ac_fu_123_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ac_fu_123_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bd_fu_129_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bd_fu_129_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln63_3_fu_135_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln63_4_fu_138_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln63_fu_141_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum2_fu_157_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal sext_ln63_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_fu_151_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_175_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_175_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_175_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ac_fu_123_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ac_fu_123_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_fu_129_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bd_fu_129_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_175_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_175_p20 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_175_p30 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component STEPMUL_mul_16ns_16ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component STEPMUL_ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        din3 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;



begin
    mul_16ns_16ns_32_1_1_U1 : component STEPMUL_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => ac_fu_123_p0,
        din1 => ac_fu_123_p1,
        dout => ac_fu_123_p2);

    mul_16ns_16ns_32_1_1_U2 : component STEPMUL_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bd_fu_129_p0,
        din1 => bd_fu_129_p1,
        dout => bd_fu_129_p2);

    ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_1_U3 : component STEPMUL_ama_addmul_sub_16ns_16ns_17ns_33ns_35_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 17,
        din3_WIDTH => 33,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_175_p0,
        din1 => grp_fu_175_p1,
        din2 => grp_fu_175_p2,
        din3 => grp_fu_175_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_175_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ac_reg_210 <= ac_fu_123_p2;
                bd_reg_216 <= bd_fu_129_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                input1_high_reg_195 <= input1(31 downto 16);
                input1_low_reg_185 <= input1_low_fu_57_p1;
                input2_high_reg_200 <= input2(31 downto 16);
                input2_low_reg_190 <= input2_low_fu_61_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                sub_ln63_reg_227 <= grp_fu_175_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    a_plus_b_fu_101_p2 <= std_logic_vector(unsigned(zext_ln45_fu_79_p1) + unsigned(zext_ln44_1_fu_65_p1));
    ac_fu_123_p0 <= ac_fu_123_p00(16 - 1 downto 0);
    ac_fu_123_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_reg_200),32));
    ac_fu_123_p1 <= ac_fu_123_p10(16 - 1 downto 0);
    ac_fu_123_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_reg_195),32));
    add_ln63_fu_141_p2 <= std_logic_vector(unsigned(zext_ln63_3_fu_135_p1) + unsigned(zext_ln63_4_fu_138_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bd_fu_129_p0 <= bd_fu_129_p00(16 - 1 downto 0);
    bd_fu_129_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_reg_190),32));
    bd_fu_129_p1 <= bd_fu_129_p10(16 - 1 downto 0);
    bd_fu_129_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_reg_185),32));
    grp_fu_175_p0 <= grp_fu_175_p00(16 - 1 downto 0);
    grp_fu_175_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_fu_87_p4),17));
    grp_fu_175_p1 <= grp_fu_175_p10(16 - 1 downto 0);
    grp_fu_175_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_fu_61_p1),17));
    grp_fu_175_p2 <= grp_fu_175_p20(17 - 1 downto 0);
    grp_fu_175_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_plus_b_fu_101_p2),34));
    grp_fu_175_p3 <= grp_fu_175_p30(33 - 1 downto 0);
    grp_fu_175_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_fu_141_p2),35));
    input1_high_fu_69_p4 <= input1(31 downto 16);
    input1_low_fu_57_p1 <= input1(16 - 1 downto 0);
    input2_high_fu_87_p4 <= input2(31 downto 16);
    input2_low_fu_61_p1 <= input2(16 - 1 downto 0);
    res <= std_logic_vector(signed(sext_ln63_fu_164_p1) + signed(sum1_fu_151_p3));

    res_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            res_ap_vld <= ap_const_logic_1;
        else 
            res_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln63_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_fu_157_p3),64));

    sum1_fu_151_p3 <= (ac_reg_210 & bd_reg_216);
    sum2_fu_157_p3 <= (sub_ln63_reg_227 & ap_const_lv16_0);
    zext_ln44_1_fu_65_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_fu_57_p1),17));
    zext_ln45_fu_79_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_fu_69_p4),17));
    zext_ln63_3_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ac_reg_210),33));
    zext_ln63_4_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bd_reg_216),33));
end behav;
