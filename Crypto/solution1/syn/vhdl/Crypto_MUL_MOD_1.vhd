-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto_MUL_MOD_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input1_val : IN STD_LOGIC_VECTOR (31 downto 0);
    input2_val : IN STD_LOGIC_VECTOR (31 downto 0);
    MOD_INDEX : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of Crypto_MUL_MOD_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv20_F7FFC : STD_LOGIC_VECTOR (19 downto 0) := "11110111111111111100";
    constant ap_const_lv20_B8010 : STD_LOGIC_VECTOR (19 downto 0) := "10111000000000010000";
    constant ap_const_lv20_8003B : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000111011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv31_40002001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000010000000000001";
    constant ap_const_lv31_40012001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000010010000000000001";
    constant ap_const_lv31_40020001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000100000000000000001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal MOD_INDEX_read_reg_533 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal MOD_INDEX_read_reg_533_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_533_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_533_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_533_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_533_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_533_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal input1_low_fu_106_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_low_reg_539 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln18_fu_120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln18_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_high_reg_556 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp1_fu_144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_reg_561_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_reg_561_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_reg_571_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_reg_571_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln30_reg_581 : STD_LOGIC_VECTOR (32 downto 0);
    signal input2_low_1_fu_174_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_1_reg_586 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_mult_fu_195_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_591 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_591_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_591_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_591_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_591_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_591_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal res_mult_reg_591_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal input1_low_1_reg_596 : STD_LOGIC_VECTOR (15 downto 0);
    signal input1_high_1_reg_601 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_high_1_reg_606 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp1_1_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_1_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_1_reg_611_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_1_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_1_reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_1_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_1_reg_623 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_1_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_1_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_1_reg_629_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln29_fu_271_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln29_reg_634 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln30_1_fu_285_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln30_1_reg_639 : STD_LOGIC_VECTOR (32 downto 0);
    signal res_mult_shift_part_reg_644 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_mult_shift_part_reg_644_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal mod_fu_321_p5 : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_650 : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_650_pp0_iter8_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_650_pp0_iter9_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_650_pp0_iter10_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal mod_reg_650_pp0_iter11_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal input2_low_2_fu_332_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_2_reg_656 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln20_2_fu_372_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln20_2_reg_666 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln3_reg_672 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp1_2_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_2_reg_678 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_2_reg_678_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_2_reg_678_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_2_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_2_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_2_fu_410_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal temp4_2_reg_688 : STD_LOGIC_VECTOR (30 downto 0);
    signal temp4_2_reg_688_pp0_iter9_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal temp4_2_reg_688_pp0_iter10_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_525_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln30_2_reg_698 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln109_fu_444_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln109_reg_703 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal input1_high_fu_110_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal input2_low_fu_102_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp1_fu_144_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp1_fu_144_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln17_fu_138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_fu_149_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln20_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_fu_149_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_fu_155_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_fu_155_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_fu_163_p5 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum2_fu_184_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal sum1_fu_178_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln20_fu_240_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp1_1_fu_247_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln17_1_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_1_fu_247_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln19_1_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_1_fu_253_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp2_1_fu_253_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln20_1_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_1_fu_259_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln18_1_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_1_fu_259_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_1_fu_265_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_1_fu_265_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln30_2_fu_275_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln30_3_fu_278_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln30_3_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_fu_297_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_fu_291_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln98_fu_305_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sum2_1_fu_342_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln28_1_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_1_fu_336_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal input2_high_2_fu_362_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal res_mult_shift_fu_353_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp1_2_fu_392_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp1_2_fu_392_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln19_2_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_2_fu_404_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp3_2_fu_404_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp4_2_fu_410_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp4_2_fu_410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum1_2_fu_418_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sum2_2_fu_428_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln28_2_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_shift_fu_439_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_3_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_cast_fu_458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln114_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln113_fu_453_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln114_fu_469_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_482_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln116_1_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln116_2_fu_497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_474_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln116_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln116_fu_501_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_517_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_525_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_525_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_525_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln116_1_fu_509_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_ce : STD_LOGIC;
    signal grp_fu_525_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal input1_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal MOD_INDEX_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_p20 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_525_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_525_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_525_p20 : STD_LOGIC_VECTOR (32 downto 0);
    signal temp1_2_fu_392_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_2_fu_404_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp4_2_fu_410_p10 : STD_LOGIC_VECTOR (30 downto 0);

    component Crypto_mul_16ns_16ns_32_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Crypto_mux_3_2_20_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component Crypto_mux_3_2_31_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Crypto_mul_15ns_16ns_31_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Crypto_mac_muladd_16ns_16ns_32ns_33_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Crypto_mac_muladd_16ns_15ns_32ns_33_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;



begin
    mul_16ns_16ns_32_1_0_U168 : component Crypto_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp1_fu_144_p0,
        din1 => temp1_fu_144_p1,
        dout => temp1_fu_144_p2);

    mul_16ns_16ns_32_1_0_U169 : component Crypto_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp2_fu_149_p0,
        din1 => temp2_fu_149_p1,
        dout => temp2_fu_149_p2);

    mul_16ns_16ns_32_1_0_U170 : component Crypto_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp4_fu_155_p0,
        din1 => temp4_fu_155_p1,
        dout => temp4_fu_155_p2);

    mux_3_2_20_1_0_U171 : component Crypto_mux_3_2_20_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => ap_const_lv20_F7FFC,
        din1 => ap_const_lv20_B8010,
        din2 => ap_const_lv20_8003B,
        din3 => MOD_INDEX_read_reg_533_pp0_iter3_reg,
        dout => m_fu_163_p5);

    mul_16ns_16ns_32_1_0_U172 : component Crypto_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp1_1_fu_247_p0,
        din1 => temp1_1_fu_247_p1,
        dout => temp1_1_fu_247_p2);

    mul_16ns_16ns_32_1_0_U173 : component Crypto_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp2_1_fu_253_p0,
        din1 => temp2_1_fu_253_p1,
        dout => temp2_1_fu_253_p2);

    mul_16ns_16ns_32_1_0_U174 : component Crypto_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp3_1_fu_259_p0,
        din1 => temp3_1_fu_259_p1,
        dout => temp3_1_fu_259_p2);

    mul_16ns_16ns_32_1_0_U175 : component Crypto_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp4_1_fu_265_p0,
        din1 => temp4_1_fu_265_p1,
        dout => temp4_1_fu_265_p2);

    mux_3_2_31_1_0_U176 : component Crypto_mux_3_2_31_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        din2_WIDTH => 31,
        din3_WIDTH => 2,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_40002001,
        din1 => ap_const_lv31_40012001,
        din2 => ap_const_lv31_40020001,
        din3 => MOD_INDEX_read_reg_533_pp0_iter6_reg,
        dout => mod_fu_321_p5);

    mul_16ns_16ns_32_1_0_U177 : component Crypto_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp1_2_fu_392_p0,
        din1 => temp1_2_fu_392_p1,
        dout => temp1_2_fu_392_p2);

    mul_16ns_16ns_32_1_0_U178 : component Crypto_mul_16ns_16ns_32_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => temp3_2_fu_404_p0,
        din1 => temp3_2_fu_404_p1,
        dout => temp3_2_fu_404_p2);

    mul_15ns_16ns_31_1_0_U179 : component Crypto_mul_15ns_16ns_31_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => temp4_2_fu_410_p0,
        din1 => temp4_2_fu_410_p1,
        dout => temp4_2_fu_410_p2);

    mac_muladd_16ns_16ns_32ns_33_4_0_U180 : component Crypto_mac_muladd_16ns_16ns_32ns_33_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_517_p0,
        din1 => grp_fu_517_p1,
        din2 => grp_fu_517_p2,
        ce => grp_fu_517_ce,
        dout => grp_fu_517_p3);

    mac_muladd_16ns_15ns_32ns_33_4_0_U181 : component Crypto_mac_muladd_16ns_15ns_32ns_33_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_525_p0,
        din1 => grp_fu_525_p1,
        din2 => grp_fu_525_p2,
        ce => grp_fu_525_ce,
        dout => grp_fu_525_p3);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                MOD_INDEX_int_reg <= MOD_INDEX;
                input1_val_int_reg <= input1_val;
                input2_val_int_reg <= input2_val;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                MOD_INDEX_read_reg_533 <= MOD_INDEX_int_reg;
                MOD_INDEX_read_reg_533_pp0_iter1_reg <= MOD_INDEX_read_reg_533;
                MOD_INDEX_read_reg_533_pp0_iter2_reg <= MOD_INDEX_read_reg_533_pp0_iter1_reg;
                MOD_INDEX_read_reg_533_pp0_iter3_reg <= MOD_INDEX_read_reg_533_pp0_iter2_reg;
                MOD_INDEX_read_reg_533_pp0_iter4_reg <= MOD_INDEX_read_reg_533_pp0_iter3_reg;
                MOD_INDEX_read_reg_533_pp0_iter5_reg <= MOD_INDEX_read_reg_533_pp0_iter4_reg;
                MOD_INDEX_read_reg_533_pp0_iter6_reg <= MOD_INDEX_read_reg_533_pp0_iter5_reg;
                add_ln30_1_reg_639 <= add_ln30_1_fu_285_p2;
                add_ln30_2_reg_698 <= grp_fu_525_p3;
                add_ln30_reg_581 <= grp_fu_517_p3;
                input1_high_1_reg_601 <= res_mult_fu_195_p2(61 downto 46);
                input1_low_1_reg_596 <= res_mult_fu_195_p2(45 downto 30);
                input1_low_reg_539 <= input1_low_fu_106_p1;
                input2_high_1_reg_606 <= m_fu_163_p5(19 downto 16);
                input2_high_reg_556 <= input2_val_int_reg(31 downto 16);
                input2_low_1_reg_586 <= input2_low_1_fu_174_p1;
                input2_low_2_reg_656 <= input2_low_2_fu_332_p1;
                mod_reg_650 <= mod_fu_321_p5;
                mod_reg_650_pp0_iter10_reg <= mod_reg_650_pp0_iter9_reg;
                mod_reg_650_pp0_iter11_reg <= mod_reg_650_pp0_iter10_reg;
                mod_reg_650_pp0_iter8_reg <= mod_reg_650;
                mod_reg_650_pp0_iter9_reg <= mod_reg_650_pp0_iter8_reg;
                res_mult_reg_591 <= res_mult_fu_195_p2;
                res_mult_reg_591_pp0_iter10_reg <= res_mult_reg_591_pp0_iter9_reg;
                res_mult_reg_591_pp0_iter5_reg <= res_mult_reg_591;
                res_mult_reg_591_pp0_iter6_reg <= res_mult_reg_591_pp0_iter5_reg;
                res_mult_reg_591_pp0_iter7_reg <= res_mult_reg_591_pp0_iter6_reg;
                res_mult_reg_591_pp0_iter8_reg <= res_mult_reg_591_pp0_iter7_reg;
                res_mult_reg_591_pp0_iter9_reg <= res_mult_reg_591_pp0_iter8_reg;
                res_mult_shift_part_reg_644 <= add_ln98_fu_305_p2(47 downto 32);
                res_mult_shift_part_reg_644_pp0_iter7_reg <= res_mult_shift_part_reg_644;
                sub_ln109_reg_703 <= sub_ln109_fu_444_p2;
                temp1_1_reg_611 <= temp1_1_fu_247_p2;
                temp1_1_reg_611_pp0_iter6_reg <= temp1_1_reg_611;
                temp1_2_reg_678 <= temp1_2_fu_392_p2;
                temp1_2_reg_678_pp0_iter10_reg <= temp1_2_reg_678_pp0_iter9_reg;
                temp1_2_reg_678_pp0_iter9_reg <= temp1_2_reg_678;
                temp1_reg_561 <= temp1_fu_144_p2;
                temp1_reg_561_pp0_iter2_reg <= temp1_reg_561;
                temp1_reg_561_pp0_iter3_reg <= temp1_reg_561_pp0_iter2_reg;
                temp2_1_reg_617 <= temp2_1_fu_253_p2;
                temp2_reg_566 <= temp2_fu_149_p2;
                temp3_1_reg_623 <= temp3_1_fu_259_p2;
                temp3_2_reg_683 <= temp3_2_fu_404_p2;
                temp4_1_reg_629 <= temp4_1_fu_265_p2;
                temp4_1_reg_629_pp0_iter6_reg <= temp4_1_reg_629;
                temp4_2_reg_688 <= temp4_2_fu_410_p2;
                temp4_2_reg_688_pp0_iter10_reg <= temp4_2_reg_688_pp0_iter9_reg;
                temp4_2_reg_688_pp0_iter9_reg <= temp4_2_reg_688;
                temp4_reg_571 <= temp4_fu_155_p2;
                temp4_reg_571_pp0_iter2_reg <= temp4_reg_571;
                temp4_reg_571_pp0_iter3_reg <= temp4_reg_571_pp0_iter2_reg;
                trunc_ln29_reg_634 <= trunc_ln29_fu_271_p1;
                trunc_ln3_reg_672 <= res_mult_shift_fu_353_p2(63 downto 48);
                    zext_ln18_reg_544(15 downto 0) <= zext_ln18_fu_120_p1(15 downto 0);
                    zext_ln19_reg_550(15 downto 0) <= zext_ln19_fu_124_p1(15 downto 0);
                    zext_ln20_2_reg_666(14 downto 0) <= zext_ln20_2_fu_372_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= select_ln116_1_fu_509_p3;
            end if;
        end if;
    end process;
    zext_ln18_reg_544(31 downto 16) <= "0000000000000000";
    zext_ln19_reg_550(31 downto 16) <= "0000000000000000";
    zext_ln20_2_reg_666(30 downto 15) <= "0000000000000000";
    add_ln30_1_fu_285_p2 <= std_logic_vector(unsigned(zext_ln30_2_fu_275_p1) + unsigned(zext_ln30_3_fu_278_p1));
    add_ln30_3_fu_281_p2 <= std_logic_vector(unsigned(temp2_1_reg_617) + unsigned(temp3_1_reg_623));
    add_ln98_fu_305_p2 <= std_logic_vector(unsigned(trunc_ln2_fu_297_p3) + unsigned(tmp_fu_291_p3));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(select_ln116_1_fu_509_p3, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= select_ln116_1_fu_509_p3;
        else 
            ap_return <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_517_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_517_ce <= ap_const_logic_1;
        else 
            grp_fu_517_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_517_p0 <= grp_fu_517_p00(16 - 1 downto 0);
    grp_fu_517_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_fu_102_p1),32));
    grp_fu_517_p1 <= grp_fu_517_p10(16 - 1 downto 0);
    grp_fu_517_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_fu_110_p4),32));
    grp_fu_517_p2 <= grp_fu_517_p20(32 - 1 downto 0);
    grp_fu_517_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp2_reg_566),33));

    grp_fu_525_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_525_ce <= ap_const_logic_1;
        else 
            grp_fu_525_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_525_p0 <= grp_fu_525_p00(16 - 1 downto 0);
    grp_fu_525_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_shift_part_reg_644),31));
    grp_fu_525_p1 <= grp_fu_525_p10(15 - 1 downto 0);
    grp_fu_525_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_2_fu_362_p4),31));
    grp_fu_525_p2 <= grp_fu_525_p20(32 - 1 downto 0);
    grp_fu_525_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp3_2_reg_683),33));
    input1_high_fu_110_p4 <= input1_val_int_reg(31 downto 16);
    input1_low_fu_106_p1 <= input1_val_int_reg(16 - 1 downto 0);
    input2_high_2_fu_362_p4 <= mod_fu_321_p5(30 downto 16);
    input2_low_1_fu_174_p1 <= m_fu_163_p5(16 - 1 downto 0);
    input2_low_2_fu_332_p1 <= mod_fu_321_p5(16 - 1 downto 0);
    input2_low_fu_102_p1 <= input2_val_int_reg(16 - 1 downto 0);
    res_mult_fu_195_p2 <= std_logic_vector(unsigned(sum1_fu_178_p3) + unsigned(zext_ln28_fu_191_p1));
    res_mult_shift_fu_353_p2 <= std_logic_vector(unsigned(zext_ln28_1_fu_349_p1) + unsigned(sum1_1_fu_336_p3));
    res_shift_fu_439_p2 <= std_logic_vector(unsigned(res_mult_reg_591_pp0_iter10_reg) - unsigned(zext_ln28_2_fu_424_p1));
    select_ln116_1_fu_509_p3 <= 
        trunc_ln116_fu_490_p1 when (tmp_1_fu_474_p3(0) = '1') else 
        select_ln116_fu_501_p3;
    select_ln116_fu_501_p3 <= 
        trunc_ln116_1_fu_493_p1 when (tmp_2_fu_482_p3(0) = '1') else 
        trunc_ln116_2_fu_497_p1;
        sext_ln20_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input2_high_1_reg_606),16));

    sub_ln109_fu_444_p2 <= std_logic_vector(unsigned(res_shift_fu_439_p2) - unsigned(zext_ln28_3_fu_435_p1));
    sub_ln113_fu_453_p2 <= std_logic_vector(unsigned(sub_ln109_reg_703) - unsigned(zext_ln113_fu_450_p1));
    sub_ln114_fu_469_p2 <= std_logic_vector(unsigned(sub_ln109_reg_703) - unsigned(zext_ln114_fu_465_p1));
    sum1_1_fu_336_p3 <= (temp4_1_reg_629_pp0_iter6_reg & temp1_1_reg_611_pp0_iter6_reg);
    sum1_2_fu_418_p3 <= (temp4_2_reg_688_pp0_iter10_reg & temp1_2_reg_678_pp0_iter10_reg);
    sum1_fu_178_p3 <= (temp4_reg_571_pp0_iter3_reg & temp1_reg_561_pp0_iter3_reg);
    sum2_1_fu_342_p3 <= (add_ln30_1_reg_639 & ap_const_lv16_0);
    sum2_2_fu_428_p3 <= (add_ln30_2_reg_698 & ap_const_lv16_0);
    sum2_fu_184_p3 <= (add_ln30_reg_581 & ap_const_lv16_0);
    temp1_1_fu_247_p0 <= zext_ln17_1_fu_231_p1(16 - 1 downto 0);
    temp1_1_fu_247_p1 <= zext_ln19_1_fu_237_p1(16 - 1 downto 0);
    temp1_2_fu_392_p0 <= temp1_2_fu_392_p00(16 - 1 downto 0);
    temp1_2_fu_392_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(res_mult_shift_part_reg_644_pp0_iter7_reg),32));
    temp1_2_fu_392_p1 <= zext_ln19_2_fu_389_p1(16 - 1 downto 0);
    temp1_fu_144_p0 <= zext_ln19_reg_550(16 - 1 downto 0);
    temp1_fu_144_p1 <= zext_ln17_fu_138_p1(16 - 1 downto 0);
    temp2_1_fu_253_p0 <= zext_ln17_1_fu_231_p1(16 - 1 downto 0);
    temp2_1_fu_253_p1 <= zext_ln20_1_fu_243_p1(16 - 1 downto 0);
    temp2_fu_149_p0 <= zext_ln20_fu_141_p1(16 - 1 downto 0);
    temp2_fu_149_p1 <= zext_ln17_fu_138_p1(16 - 1 downto 0);
    temp3_1_fu_259_p0 <= zext_ln18_1_fu_234_p1(16 - 1 downto 0);
    temp3_1_fu_259_p1 <= zext_ln19_1_fu_237_p1(16 - 1 downto 0);
    temp3_2_fu_404_p0 <= zext_ln19_2_fu_389_p1(16 - 1 downto 0);
    temp3_2_fu_404_p1 <= temp3_2_fu_404_p10(16 - 1 downto 0);
    temp3_2_fu_404_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_reg_672),32));
    temp4_1_fu_265_p0 <= zext_ln18_1_fu_234_p1(16 - 1 downto 0);
    temp4_1_fu_265_p1 <= zext_ln20_1_fu_243_p1(16 - 1 downto 0);
    temp4_2_fu_410_p0 <= zext_ln20_2_reg_666(15 - 1 downto 0);
    temp4_2_fu_410_p1 <= temp4_2_fu_410_p10(16 - 1 downto 0);
    temp4_2_fu_410_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_reg_672),31));
    temp4_fu_155_p0 <= zext_ln20_fu_141_p1(16 - 1 downto 0);
    temp4_fu_155_p1 <= zext_ln18_reg_544(16 - 1 downto 0);
    tmp_1_fu_474_p3 <= sub_ln113_fu_453_p2(63 downto 63);
    tmp_2_fu_482_p3 <= sub_ln114_fu_469_p2(63 downto 63);
    tmp_fu_291_p3 <= (trunc_ln29_reg_634 & temp1_1_reg_611);
    trunc_ln116_1_fu_493_p1 <= sub_ln113_fu_453_p2(32 - 1 downto 0);
    trunc_ln116_2_fu_497_p1 <= sub_ln114_fu_469_p2(32 - 1 downto 0);
    trunc_ln116_fu_490_p1 <= sub_ln109_reg_703(32 - 1 downto 0);
    trunc_ln29_fu_271_p1 <= temp4_1_fu_265_p2(16 - 1 downto 0);
    trunc_ln2_fu_297_p3 <= (add_ln30_3_fu_281_p2 & ap_const_lv16_0);
    zext_ln113_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mod_reg_650_pp0_iter11_reg),64));
    zext_ln114_cast_fu_458_p3 <= (mod_reg_650_pp0_iter11_reg & ap_const_lv1_0);
    zext_ln114_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln114_cast_fu_458_p3),64));
    zext_ln17_1_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_1_reg_596),32));
    zext_ln17_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_low_reg_539),32));
    zext_ln18_1_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_1_reg_601),32));
    zext_ln18_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input1_high_fu_110_p4),32));
    zext_ln19_1_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_1_reg_586),32));
    zext_ln19_2_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_2_reg_656),32));
    zext_ln19_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_low_fu_102_p1),32));
    zext_ln20_1_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln20_fu_240_p1),32));
    zext_ln20_2_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_2_fu_362_p4),31));
    zext_ln20_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input2_high_reg_556),32));
    zext_ln28_1_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_1_fu_342_p3),64));
    zext_ln28_2_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_2_fu_418_p3),64));
    zext_ln28_3_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_2_fu_428_p3),64));
    zext_ln28_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_184_p3),64));
    zext_ln30_2_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp2_1_reg_617),33));
    zext_ln30_3_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp3_1_reg_623),33));
end behav;
