-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto1_Configurable_PE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input1_val : IN STD_LOGIC_VECTOR (31 downto 0);
    input2_val : IN STD_LOGIC_VECTOR (31 downto 0);
    MOD_INDEX : IN STD_LOGIC_VECTOR (1 downto 0);
    op : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of Crypto1_Configurable_PE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_40002001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000010000000000001";
    constant ap_const_lv31_40012001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000010010000000000001";
    constant ap_const_lv31_40020001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000100000000000000001";

attribute shreg_extract : string;
    signal op_read_read_fu_34_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal op_read_reg_166 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal op_read_reg_166_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal op_read_reg_166_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal op_read_reg_166_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal op_read_reg_166_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal op_read_reg_166_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal op_read_reg_166_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal op_read_reg_166_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal op_read_reg_166_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal op_read_reg_166_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal op_read_reg_166_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal op_read_reg_166_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal op_read_reg_166_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_170 : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_170_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_170_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_170_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_170_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_170_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_170_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_170_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_170_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_170_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_170_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal MOD_INDEX_read_reg_170_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal input2_val_read_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_read_reg_177_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_read_reg_177_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_read_reg_177_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_read_reg_177_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_read_reg_177_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_read_reg_177_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_read_reg_177_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_read_reg_177_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_read_reg_177_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_read_reg_177_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_val_read_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_val_read_reg_184_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_val_read_reg_184_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_val_read_reg_184_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_val_read_reg_184_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_val_read_reg_184_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_val_read_reg_184_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_val_read_reg_184_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_val_read_reg_184_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_val_read_reg_184_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_val_read_reg_184_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal res1_temp_6_fu_82_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res1_temp_6_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_86_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_197 : STD_LOGIC_VECTOR (0 downto 0);
    signal res1_temp_fu_94_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res1_temp_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal res1_temp_7_fu_121_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res1_temp_4_fu_159_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MUL_MOD_3_fu_71_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MUL_MOD_3_fu_71_ap_ce : STD_LOGIC;
    signal ap_block_pp0_stage0_11001_ignoreCallOp20 : BOOLEAN;
    signal ap_phi_mux_res1_2_phi_fu_61_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_res1_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_res1_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_res1_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_res1_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_res1_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_res1_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_res1_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_res1_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_res1_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_res1_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter10_res1_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter11_res1_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter12_res1_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter13_res1_2_reg_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_ignoreCallOp20 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln89_cast_fu_98_p7 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln89_cast_fu_98_p9 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln89_fu_117_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln76_cast_fu_126_p7 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln76_cast_fu_126_p9 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln76_fu_145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln76_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res1_temp_3_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal input1_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal MOD_INDEX_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal op_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln89_cast_fu_98_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln89_cast_fu_98_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln89_cast_fu_98_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln76_cast_fu_126_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln76_cast_fu_126_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln76_cast_fu_126_p5 : STD_LOGIC_VECTOR (1 downto 0);

    component Crypto1_MUL_MOD_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        input1_val : IN STD_LOGIC_VECTOR (31 downto 0);
        input2_val : IN STD_LOGIC_VECTOR (31 downto 0);
        MOD_INDEX : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component Crypto1_sparsemux_7_2_31_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        def : IN STD_LOGIC_VECTOR (30 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;



begin
    grp_MUL_MOD_3_fu_71 : component Crypto1_MUL_MOD_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        input1_val => input1_val_int_reg,
        input2_val => input2_val_int_reg,
        MOD_INDEX => MOD_INDEX_int_reg,
        ap_return => grp_MUL_MOD_3_fu_71_ap_return,
        ap_ce => grp_MUL_MOD_3_fu_71_ap_ce);

    sparsemux_7_2_31_1_0_U2262 : component Crypto1_sparsemux_7_2_31_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 31,
        CASE1 => "01",
        din1_WIDTH => 31,
        CASE2 => "10",
        din2_WIDTH => 31,
        def_WIDTH => 31,
        sel_WIDTH => 2,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_40002001,
        din1 => ap_const_lv31_40012001,
        din2 => ap_const_lv31_40020001,
        def => zext_ln89_cast_fu_98_p7,
        sel => MOD_INDEX_read_reg_170_pp0_iter11_reg,
        dout => zext_ln89_cast_fu_98_p9);

    sparsemux_7_2_31_1_0_U2263 : component Crypto1_sparsemux_7_2_31_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 31,
        CASE1 => "01",
        din1_WIDTH => 31,
        CASE2 => "10",
        din2_WIDTH => 31,
        def_WIDTH => 31,
        sel_WIDTH => 2,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_40002001,
        din1 => ap_const_lv31_40012001,
        din2 => ap_const_lv31_40020001,
        def => zext_ln76_cast_fu_126_p7,
        sel => MOD_INDEX_read_reg_170_pp0_iter11_reg,
        dout => zext_ln76_cast_fu_126_p9);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;

    ap_phi_reg_pp0_iter12_res1_2_reg_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                if (((tmp_fu_86_p3 = ap_const_lv1_0) and (op_read_reg_166_pp0_iter10_reg = ap_const_lv2_1))) then 
                    ap_phi_reg_pp0_iter12_res1_2_reg_58 <= res1_temp_6_fu_82_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter12_res1_2_reg_58 <= ap_phi_reg_pp0_iter11_res1_2_reg_58;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter13_res1_2_reg_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                if (((tmp_reg_197 = ap_const_lv1_1) and (op_read_reg_166_pp0_iter11_reg = ap_const_lv2_1))) then 
                    ap_phi_reg_pp0_iter13_res1_2_reg_58 <= res1_temp_7_fu_121_p2;
                elsif ((not((op_read_reg_166_pp0_iter11_reg = ap_const_lv2_1)) and not((op_read_reg_166_pp0_iter11_reg = ap_const_lv2_2)))) then 
                    ap_phi_reg_pp0_iter13_res1_2_reg_58 <= res1_temp_4_fu_159_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter13_res1_2_reg_58 <= ap_phi_reg_pp0_iter12_res1_2_reg_58;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                MOD_INDEX_int_reg <= MOD_INDEX;
                input1_val_int_reg <= input1_val;
                input2_val_int_reg <= input2_val;
                op_int_reg <= op;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                MOD_INDEX_read_reg_170 <= MOD_INDEX_int_reg;
                MOD_INDEX_read_reg_170_pp0_iter10_reg <= MOD_INDEX_read_reg_170_pp0_iter9_reg;
                MOD_INDEX_read_reg_170_pp0_iter11_reg <= MOD_INDEX_read_reg_170_pp0_iter10_reg;
                MOD_INDEX_read_reg_170_pp0_iter1_reg <= MOD_INDEX_read_reg_170;
                MOD_INDEX_read_reg_170_pp0_iter2_reg <= MOD_INDEX_read_reg_170_pp0_iter1_reg;
                MOD_INDEX_read_reg_170_pp0_iter3_reg <= MOD_INDEX_read_reg_170_pp0_iter2_reg;
                MOD_INDEX_read_reg_170_pp0_iter4_reg <= MOD_INDEX_read_reg_170_pp0_iter3_reg;
                MOD_INDEX_read_reg_170_pp0_iter5_reg <= MOD_INDEX_read_reg_170_pp0_iter4_reg;
                MOD_INDEX_read_reg_170_pp0_iter6_reg <= MOD_INDEX_read_reg_170_pp0_iter5_reg;
                MOD_INDEX_read_reg_170_pp0_iter7_reg <= MOD_INDEX_read_reg_170_pp0_iter6_reg;
                MOD_INDEX_read_reg_170_pp0_iter8_reg <= MOD_INDEX_read_reg_170_pp0_iter7_reg;
                MOD_INDEX_read_reg_170_pp0_iter9_reg <= MOD_INDEX_read_reg_170_pp0_iter8_reg;
                ap_phi_reg_pp0_iter10_res1_2_reg_58 <= ap_phi_reg_pp0_iter9_res1_2_reg_58;
                ap_phi_reg_pp0_iter11_res1_2_reg_58 <= ap_phi_reg_pp0_iter10_res1_2_reg_58;
                ap_phi_reg_pp0_iter1_res1_2_reg_58 <= ap_phi_reg_pp0_iter0_res1_2_reg_58;
                ap_phi_reg_pp0_iter2_res1_2_reg_58 <= ap_phi_reg_pp0_iter1_res1_2_reg_58;
                ap_phi_reg_pp0_iter3_res1_2_reg_58 <= ap_phi_reg_pp0_iter2_res1_2_reg_58;
                ap_phi_reg_pp0_iter4_res1_2_reg_58 <= ap_phi_reg_pp0_iter3_res1_2_reg_58;
                ap_phi_reg_pp0_iter5_res1_2_reg_58 <= ap_phi_reg_pp0_iter4_res1_2_reg_58;
                ap_phi_reg_pp0_iter6_res1_2_reg_58 <= ap_phi_reg_pp0_iter5_res1_2_reg_58;
                ap_phi_reg_pp0_iter7_res1_2_reg_58 <= ap_phi_reg_pp0_iter6_res1_2_reg_58;
                ap_phi_reg_pp0_iter8_res1_2_reg_58 <= ap_phi_reg_pp0_iter7_res1_2_reg_58;
                ap_phi_reg_pp0_iter9_res1_2_reg_58 <= ap_phi_reg_pp0_iter8_res1_2_reg_58;
                input1_val_read_reg_184 <= input1_val_int_reg;
                input1_val_read_reg_184_pp0_iter10_reg <= input1_val_read_reg_184_pp0_iter9_reg;
                input1_val_read_reg_184_pp0_iter1_reg <= input1_val_read_reg_184;
                input1_val_read_reg_184_pp0_iter2_reg <= input1_val_read_reg_184_pp0_iter1_reg;
                input1_val_read_reg_184_pp0_iter3_reg <= input1_val_read_reg_184_pp0_iter2_reg;
                input1_val_read_reg_184_pp0_iter4_reg <= input1_val_read_reg_184_pp0_iter3_reg;
                input1_val_read_reg_184_pp0_iter5_reg <= input1_val_read_reg_184_pp0_iter4_reg;
                input1_val_read_reg_184_pp0_iter6_reg <= input1_val_read_reg_184_pp0_iter5_reg;
                input1_val_read_reg_184_pp0_iter7_reg <= input1_val_read_reg_184_pp0_iter6_reg;
                input1_val_read_reg_184_pp0_iter8_reg <= input1_val_read_reg_184_pp0_iter7_reg;
                input1_val_read_reg_184_pp0_iter9_reg <= input1_val_read_reg_184_pp0_iter8_reg;
                input2_val_read_reg_177 <= input2_val_int_reg;
                input2_val_read_reg_177_pp0_iter10_reg <= input2_val_read_reg_177_pp0_iter9_reg;
                input2_val_read_reg_177_pp0_iter1_reg <= input2_val_read_reg_177;
                input2_val_read_reg_177_pp0_iter2_reg <= input2_val_read_reg_177_pp0_iter1_reg;
                input2_val_read_reg_177_pp0_iter3_reg <= input2_val_read_reg_177_pp0_iter2_reg;
                input2_val_read_reg_177_pp0_iter4_reg <= input2_val_read_reg_177_pp0_iter3_reg;
                input2_val_read_reg_177_pp0_iter5_reg <= input2_val_read_reg_177_pp0_iter4_reg;
                input2_val_read_reg_177_pp0_iter6_reg <= input2_val_read_reg_177_pp0_iter5_reg;
                input2_val_read_reg_177_pp0_iter7_reg <= input2_val_read_reg_177_pp0_iter6_reg;
                input2_val_read_reg_177_pp0_iter8_reg <= input2_val_read_reg_177_pp0_iter7_reg;
                input2_val_read_reg_177_pp0_iter9_reg <= input2_val_read_reg_177_pp0_iter8_reg;
                op_read_reg_166 <= op_int_reg;
                op_read_reg_166_pp0_iter10_reg <= op_read_reg_166_pp0_iter9_reg;
                op_read_reg_166_pp0_iter11_reg <= op_read_reg_166_pp0_iter10_reg;
                op_read_reg_166_pp0_iter12_reg <= op_read_reg_166_pp0_iter11_reg;
                op_read_reg_166_pp0_iter1_reg <= op_read_reg_166;
                op_read_reg_166_pp0_iter2_reg <= op_read_reg_166_pp0_iter1_reg;
                op_read_reg_166_pp0_iter3_reg <= op_read_reg_166_pp0_iter2_reg;
                op_read_reg_166_pp0_iter4_reg <= op_read_reg_166_pp0_iter3_reg;
                op_read_reg_166_pp0_iter5_reg <= op_read_reg_166_pp0_iter4_reg;
                op_read_reg_166_pp0_iter6_reg <= op_read_reg_166_pp0_iter5_reg;
                op_read_reg_166_pp0_iter7_reg <= op_read_reg_166_pp0_iter6_reg;
                op_read_reg_166_pp0_iter8_reg <= op_read_reg_166_pp0_iter7_reg;
                op_read_reg_166_pp0_iter9_reg <= op_read_reg_166_pp0_iter8_reg;
                res1_temp_6_reg_191 <= res1_temp_6_fu_82_p2;
                res1_temp_reg_201 <= res1_temp_fu_94_p2;
                tmp_reg_197 <= res1_temp_6_fu_82_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= ap_phi_mux_res1_2_phi_fu_61_p8;
            end if;
        end if;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_ignoreCallOp20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_phi_mux_res1_2_phi_fu_61_p8_assign_proc : process(op_read_reg_166_pp0_iter12_reg, grp_MUL_MOD_3_fu_71_ap_return, ap_phi_reg_pp0_iter13_res1_2_reg_58)
    begin
        if ((op_read_reg_166_pp0_iter12_reg = ap_const_lv2_2)) then 
            ap_phi_mux_res1_2_phi_fu_61_p8 <= grp_MUL_MOD_3_fu_71_ap_return;
        else 
            ap_phi_mux_res1_2_phi_fu_61_p8 <= ap_phi_reg_pp0_iter13_res1_2_reg_58;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_res1_2_reg_58 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_return_assign_proc : process(ap_phi_mux_res1_2_phi_fu_61_p8, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= ap_phi_mux_res1_2_phi_fu_61_p8;
        else 
            ap_return <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_MUL_MOD_3_fu_71_ap_ce_assign_proc : process(ap_block_pp0_stage0_11001_ignoreCallOp20, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp20) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_MUL_MOD_3_fu_71_ap_ce <= ap_const_logic_1;
        else 
            grp_MUL_MOD_3_fu_71_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln76_fu_149_p2 <= "1" when (signed(res1_temp_reg_201) < signed(zext_ln76_fu_145_p1)) else "0";
    op_read_read_fu_34_p2 <= op_int_reg;
    res1_temp_3_fu_154_p2 <= std_logic_vector(unsigned(res1_temp_reg_201) - unsigned(zext_ln76_fu_145_p1));
    res1_temp_4_fu_159_p3 <= 
        res1_temp_reg_201 when (icmp_ln76_fu_149_p2(0) = '1') else 
        res1_temp_3_fu_154_p2;
    res1_temp_6_fu_82_p2 <= std_logic_vector(unsigned(input1_val_read_reg_184_pp0_iter10_reg) - unsigned(input2_val_read_reg_177_pp0_iter10_reg));
    res1_temp_7_fu_121_p2 <= std_logic_vector(unsigned(zext_ln89_fu_117_p1) + unsigned(res1_temp_6_reg_191));
    res1_temp_fu_94_p2 <= std_logic_vector(unsigned(input2_val_read_reg_177_pp0_iter10_reg) + unsigned(input1_val_read_reg_184_pp0_iter10_reg));
    tmp_fu_86_p3 <= res1_temp_6_fu_82_p2(31 downto 31);
    zext_ln76_cast_fu_126_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    zext_ln76_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln76_cast_fu_126_p9),32));
    zext_ln89_cast_fu_98_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    zext_ln89_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln89_cast_fu_98_p9),32));
end behav;
