-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Crypto1_Configurable_PE_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input1_val : IN STD_LOGIC_VECTOR (31 downto 0);
    input2_val : IN STD_LOGIC_VECTOR (31 downto 0);
    twiddle_factor_val2 : IN STD_LOGIC_VECTOR (31 downto 0);
    MOD_INDEX : IN STD_LOGIC_VECTOR (1 downto 0);
    op : IN STD_LOGIC_VECTOR (2 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Crypto1_Configurable_PE_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv31_40002001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000010000000000001";
    constant ap_const_lv31_40012001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000010010000000000001";
    constant ap_const_lv31_40020001 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000100000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal MOD_INDEX_read_reg_366 : STD_LOGIC_VECTOR (1 downto 0);
    signal twiddle_factor_val2_read_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln190_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln190_reg_388 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp1_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln76_fu_146_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln76_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal res2_temp_2_fu_170_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal res2_temp_2_reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln208_1_reg_410 : STD_LOGIC_VECTOR (29 downto 0);
    signal res1_temp_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res1_temp_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal res2_temp_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res2_temp_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_380_reg_429 : STD_LOGIC_VECTOR (0 downto 0);
    signal res1_temp_2_fu_245_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal select_ln88_fu_257_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln208_1_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln208_1_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln210_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln210_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_MUL_MOD_fu_104_input1_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MUL_MOD_fu_104_input2_val : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MUL_MOD_fu_104_MOD_INDEX : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_MUL_MOD_fu_104_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MUL_MOD_fu_104_ap_ce : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_phi_mux_res1_1_phi_fu_89_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal res1_1_reg_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_res2_1_phi_fu_98_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal res2_1_reg_95 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln76_cast_fu_126_p7 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln76_cast_fu_126_p9 : STD_LOGIC_VECTOR (30 downto 0);
    signal res2_temp_1_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_156_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln89_1_fu_164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln208_fu_178_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln76_3_cast_fu_212_p7 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln76_3_cast_fu_212_p9 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln76_1_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln76_1_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res1_temp_1_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln89_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln76_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln77_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_1_fu_277_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_284_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln208_fu_298_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln208_fu_302_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln208_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln208_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_fu_319_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln210_fu_333_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln210_fu_337_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln210_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln210_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal zext_ln76_cast_fu_126_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln76_cast_fu_126_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln76_cast_fu_126_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln76_3_cast_fu_212_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln76_3_cast_fu_212_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln76_3_cast_fu_212_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Crypto1_MUL_MOD IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        input1_val : IN STD_LOGIC_VECTOR (31 downto 0);
        input2_val : IN STD_LOGIC_VECTOR (31 downto 0);
        MOD_INDEX : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component Crypto1_sparsemux_7_2_31_1_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        def : IN STD_LOGIC_VECTOR (30 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;



begin
    grp_MUL_MOD_fu_104 : component Crypto1_MUL_MOD
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        input1_val => grp_MUL_MOD_fu_104_input1_val,
        input2_val => grp_MUL_MOD_fu_104_input2_val,
        MOD_INDEX => grp_MUL_MOD_fu_104_MOD_INDEX,
        ap_return => grp_MUL_MOD_fu_104_ap_return,
        ap_ce => grp_MUL_MOD_fu_104_ap_ce);

    sparsemux_7_2_31_1_0_U277 : component Crypto1_sparsemux_7_2_31_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 31,
        CASE1 => "01",
        din1_WIDTH => 31,
        CASE2 => "10",
        din2_WIDTH => 31,
        def_WIDTH => 31,
        sel_WIDTH => 2,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_40002001,
        din1 => ap_const_lv31_40012001,
        din2 => ap_const_lv31_40020001,
        def => zext_ln76_cast_fu_126_p7,
        sel => MOD_INDEX,
        dout => zext_ln76_cast_fu_126_p9);

    sparsemux_7_2_31_1_0_U278 : component Crypto1_sparsemux_7_2_31_1_0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 31,
        CASE1 => "01",
        din1_WIDTH => 31,
        CASE2 => "10",
        din2_WIDTH => 31,
        def_WIDTH => 31,
        sel_WIDTH => 2,
        dout_WIDTH => 31)
    port map (
        din0 => ap_const_lv31_40002001,
        din1 => ap_const_lv31_40012001,
        din2 => ap_const_lv31_40020001,
        def => zext_ln76_3_cast_fu_212_p7,
        sel => MOD_INDEX,
        dout => zext_ln76_3_cast_fu_212_p9);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_return_0_preg <= ap_phi_mux_res1_1_phi_fu_89_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_return_1_preg <= ap_phi_mux_res2_1_phi_fu_98_p4;
                end if; 
            end if;
        end if;
    end process;


    res1_1_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                res1_1_reg_86 <= res1_temp_2_fu_245_p3;
            elsif (((icmp_ln190_reg_388 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                res1_1_reg_86 <= add_ln208_1_reg_444;
            end if; 
        end if;
    end process;

    res2_1_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                res2_1_reg_95 <= select_ln88_fu_257_p3;
            elsif (((icmp_ln190_reg_388 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                res2_1_reg_95 <= add_ln210_reg_449;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln208_1_reg_444 <= add_ln208_1_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln210_reg_449 <= add_ln210_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln190_reg_388 <= icmp_ln190_fu_114_p2;
                res2_temp_2_reg_405 <= res2_temp_2_fu_170_p3;
                temp1_reg_392 <= temp1_fu_120_p2;
                trunc_ln208_1_reg_410 <= add_ln208_fu_178_p2(30 downto 1);
                    zext_ln76_reg_399(30 downto 0) <= zext_ln76_fu_146_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                res1_temp_reg_416 <= res1_temp_fu_194_p2;
                res2_temp_reg_423 <= res2_temp_fu_199_p2;
                tmp_380_reg_429 <= res2_temp_fu_199_p2(31 downto 31);
            end if;
        end if;
    end process;
    zext_ln76_reg_399(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln190_fu_114_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln190_fu_114_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((icmp_ln190_fu_114_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    MOD_INDEX_read_reg_366 <= MOD_INDEX;
    add_ln208_1_fu_313_p2 <= std_logic_vector(unsigned(zext_ln208_fu_309_p1) + unsigned(sext_ln208_fu_294_p1));
    add_ln208_fu_178_p2 <= std_logic_vector(unsigned(zext_ln76_cast_fu_126_p9) + unsigned(ap_const_lv31_1));
    add_ln210_fu_348_p2 <= std_logic_vector(unsigned(zext_ln210_fu_344_p1) + unsigned(sext_ln210_fu_329_p1));
    add_ln89_1_fu_164_p2 <= std_logic_vector(unsigned(zext_ln76_fu_146_p1) + unsigned(res2_temp_1_fu_150_p2));
    add_ln89_fu_252_p2 <= std_logic_vector(unsigned(res2_temp_reg_423) + unsigned(zext_ln76_1_fu_231_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_res1_1_phi_fu_89_p4_assign_proc : process(icmp_ln190_reg_388, add_ln208_1_reg_444, ap_CS_fsm_state30, res1_1_reg_86)
    begin
        if (((icmp_ln190_reg_388 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_phi_mux_res1_1_phi_fu_89_p4 <= add_ln208_1_reg_444;
        else 
            ap_phi_mux_res1_1_phi_fu_89_p4 <= res1_1_reg_86;
        end if; 
    end process;


    ap_phi_mux_res2_1_phi_fu_98_p4_assign_proc : process(icmp_ln190_reg_388, add_ln210_reg_449, ap_CS_fsm_state30, res2_1_reg_95)
    begin
        if (((icmp_ln190_reg_388 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_phi_mux_res2_1_phi_fu_98_p4 <= add_ln210_reg_449;
        else 
            ap_phi_mux_res2_1_phi_fu_98_p4 <= res2_1_reg_95;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state30, ap_phi_mux_res1_1_phi_fu_89_p4, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_return_0 <= ap_phi_mux_res1_1_phi_fu_89_p4;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state30, ap_phi_mux_res2_1_phi_fu_98_p4, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_return_1 <= ap_phi_mux_res2_1_phi_fu_98_p4;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    grp_MUL_MOD_fu_104_MOD_INDEX_assign_proc : process(ap_CS_fsm_state1, MOD_INDEX, MOD_INDEX_read_reg_366, icmp_ln190_fu_114_p2, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_MUL_MOD_fu_104_MOD_INDEX <= MOD_INDEX_read_reg_366;
        elsif (((icmp_ln190_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_MUL_MOD_fu_104_MOD_INDEX <= MOD_INDEX;
        else 
            grp_MUL_MOD_fu_104_MOD_INDEX <= "XX";
        end if; 
    end process;


    grp_MUL_MOD_fu_104_ap_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_MUL_MOD_fu_104_ap_ce <= ap_const_logic_0;
        else 
            grp_MUL_MOD_fu_104_ap_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_MUL_MOD_fu_104_input1_val_assign_proc : process(ap_CS_fsm_state1, input2_val, icmp_ln190_fu_114_p2, res2_temp_2_reg_405, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_MUL_MOD_fu_104_input1_val <= res2_temp_2_reg_405;
        elsif (((icmp_ln190_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_MUL_MOD_fu_104_input1_val <= input2_val;
        else 
            grp_MUL_MOD_fu_104_input1_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_MUL_MOD_fu_104_input2_val_assign_proc : process(ap_CS_fsm_state1, twiddle_factor_val2, twiddle_factor_val2_read_reg_372, icmp_ln190_fu_114_p2, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_MUL_MOD_fu_104_input2_val <= twiddle_factor_val2_read_reg_372;
        elsif (((icmp_ln190_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_MUL_MOD_fu_104_input2_val <= twiddle_factor_val2;
        else 
            grp_MUL_MOD_fu_104_input2_val <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln190_fu_114_p2 <= "1" when (op = ap_const_lv3_4) else "0";
    icmp_ln76_1_fu_235_p2 <= "1" when (signed(res1_temp_reg_416) < signed(zext_ln76_1_fu_231_p1)) else "0";
    icmp_ln76_fu_263_p2 <= "1" when (signed(temp1_reg_392) < signed(zext_ln76_reg_399)) else "0";
    res1_temp_1_fu_240_p2 <= std_logic_vector(unsigned(res1_temp_reg_416) - unsigned(zext_ln76_1_fu_231_p1));
    res1_temp_2_fu_245_p3 <= 
        res1_temp_reg_416 when (icmp_ln76_1_fu_235_p2(0) = '1') else 
        res1_temp_1_fu_240_p2;
    res1_temp_fu_194_p2 <= std_logic_vector(unsigned(grp_MUL_MOD_fu_104_ap_return) + unsigned(input1_val));
    res2_temp_1_fu_150_p2 <= std_logic_vector(unsigned(input1_val) - unsigned(input2_val));
    res2_temp_2_fu_170_p3 <= 
        add_ln89_1_fu_164_p2 when (tmp_fu_156_p3(0) = '1') else 
        res2_temp_1_fu_150_p2;
    res2_temp_fu_199_p2 <= std_logic_vector(unsigned(input1_val) - unsigned(grp_MUL_MOD_fu_104_ap_return));
    select_ln208_fu_302_p3 <= 
        trunc_ln208_1_reg_410 when (trunc_ln208_fu_298_p1(0) = '1') else 
        ap_const_lv30_0;
    select_ln210_fu_337_p3 <= 
        trunc_ln208_1_reg_410 when (trunc_ln210_fu_333_p1(0) = '1') else 
        ap_const_lv30_0;
    select_ln88_fu_257_p3 <= 
        add_ln89_fu_252_p2 when (tmp_380_reg_429(0) = '1') else 
        res2_temp_reg_423;
        sext_ln208_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_284_p4),32));

        sext_ln210_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_319_p4),32));

    sub_ln77_fu_273_p2 <= std_logic_vector(unsigned(temp1_reg_392) - unsigned(zext_ln76_reg_399));
    temp1_1_fu_277_p3 <= 
        sub_ln77_fu_273_p2 when (xor_ln76_fu_267_p2(0) = '1') else 
        temp1_reg_392;
    temp1_fu_120_p2 <= std_logic_vector(unsigned(input2_val) + unsigned(input1_val));
    tmp_fu_156_p3 <= res2_temp_1_fu_150_p2(31 downto 31);
    trunc_ln1_fu_319_p4 <= grp_MUL_MOD_fu_104_ap_return(31 downto 1);
    trunc_ln208_fu_298_p1 <= temp1_1_fu_277_p3(1 - 1 downto 0);
    trunc_ln210_fu_333_p1 <= grp_MUL_MOD_fu_104_ap_return(1 - 1 downto 0);
    trunc_ln_fu_284_p4 <= temp1_1_fu_277_p3(31 downto 1);
    twiddle_factor_val2_read_reg_372 <= twiddle_factor_val2;
    xor_ln76_fu_267_p2 <= (icmp_ln76_fu_263_p2 xor ap_const_lv1_1);
    zext_ln208_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln208_fu_302_p3),32));
    zext_ln210_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln210_fu_337_p3),32));
    zext_ln76_1_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln76_3_cast_fu_212_p9),32));
    zext_ln76_3_cast_fu_212_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    zext_ln76_cast_fu_126_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    zext_ln76_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln76_cast_fu_126_p9),32));
end behav;
