// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Crypto_Crypto_Pipeline_VITIS_LOOP_74_410 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dataOutStream_TREADY,
        DataRAM_2_address0,
        DataRAM_2_ce0,
        DataRAM_2_q0,
        DataRAM_5_address0,
        DataRAM_5_ce0,
        DataRAM_5_q0,
        DataRAM_8_address0,
        DataRAM_8_ce0,
        DataRAM_8_q0,
        DataRAM_11_address0,
        DataRAM_11_ce0,
        DataRAM_11_q0,
        RAMSel_cast,
        dataOutStream_TDATA,
        dataOutStream_TVALID,
        dataOutStream_TKEEP,
        dataOutStream_TSTRB,
        dataOutStream_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   dataOutStream_TREADY;
output  [11:0] DataRAM_2_address0;
output   DataRAM_2_ce0;
input  [31:0] DataRAM_2_q0;
output  [11:0] DataRAM_5_address0;
output   DataRAM_5_ce0;
input  [31:0] DataRAM_5_q0;
output  [11:0] DataRAM_8_address0;
output   DataRAM_8_ce0;
input  [31:0] DataRAM_8_q0;
output  [11:0] DataRAM_11_address0;
output   DataRAM_11_ce0;
input  [31:0] DataRAM_11_q0;
input  [1:0] RAMSel_cast;
output  [31:0] dataOutStream_TDATA;
output   dataOutStream_TVALID;
output  [3:0] dataOutStream_TKEEP;
output  [3:0] dataOutStream_TSTRB;
output  [0:0] dataOutStream_TLAST;

reg ap_idle;
reg DataRAM_2_ce0;
reg DataRAM_5_ce0;
reg DataRAM_8_ce0;
reg DataRAM_11_ce0;
reg dataOutStream_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln74_fu_154_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    dataOutStream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] out_last_fu_174_p2;
reg   [0:0] out_last_reg_234;
wire   [63:0] zext_ln74_fu_166_p1;
reg   [12:0] j_fu_66;
wire   [12:0] add_ln74_fu_160_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_j_4;
wire   [31:0] out_data_fu_185_p6;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Crypto_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U329(
    .din0(DataRAM_2_q0),
    .din1(DataRAM_5_q0),
    .din2(DataRAM_8_q0),
    .din3(DataRAM_11_q0),
    .din4(RAMSel_cast),
    .dout(out_data_fu_185_p6)
);

Crypto_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln74_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_66 <= add_ln74_fu_160_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_66 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_154_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_last_reg_234 <= out_last_fu_174_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataRAM_11_ce0 = 1'b1;
    end else begin
        DataRAM_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataRAM_2_ce0 = 1'b1;
    end else begin
        DataRAM_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataRAM_5_ce0 = 1'b1;
    end else begin
        DataRAM_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataRAM_8_ce0 = 1'b1;
    end else begin
        DataRAM_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_fu_154_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_4 = 13'd0;
    end else begin
        ap_sig_allocacmp_j_4 = j_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataOutStream_TDATA_blk_n = dataOutStream_TREADY;
    end else begin
        dataOutStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataOutStream_TVALID = 1'b1;
    end else begin
        dataOutStream_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DataRAM_11_address0 = zext_ln74_fu_166_p1;

assign DataRAM_2_address0 = zext_ln74_fu_166_p1;

assign DataRAM_5_address0 = zext_ln74_fu_166_p1;

assign DataRAM_8_address0 = zext_ln74_fu_166_p1;

assign add_ln74_fu_160_p2 = (ap_sig_allocacmp_j_4 + 13'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((dataOutStream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((dataOutStream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((dataOutStream_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (dataOutStream_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dataOutStream_TDATA = out_data_fu_185_p6;

assign dataOutStream_TKEEP = 4'd0;

assign dataOutStream_TLAST = out_last_reg_234;

assign dataOutStream_TSTRB = 4'd0;

assign icmp_ln74_fu_154_p2 = ((ap_sig_allocacmp_j_4 == 13'd4096) ? 1'b1 : 1'b0);

assign out_last_fu_174_p2 = ((ap_sig_allocacmp_j_4 == 13'd4095) ? 1'b1 : 1'b0);

assign zext_ln74_fu_166_p1 = ap_sig_allocacmp_j_4;

endmodule //Crypto_Crypto_Pipeline_VITIS_LOOP_74_410
