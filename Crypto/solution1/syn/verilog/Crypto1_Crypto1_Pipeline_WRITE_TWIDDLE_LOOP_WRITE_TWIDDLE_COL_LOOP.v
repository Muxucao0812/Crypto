// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Crypto1_Crypto1_Pipeline_WRITE_TWIDDLE_LOOP_WRITE_TWIDDLE_COL_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        NTTTWiddleRAM_0_address0,
        NTTTWiddleRAM_0_ce0,
        NTTTWiddleRAM_0_we0,
        NTTTWiddleRAM_0_d0,
        NTTTWiddleRAM_0_1_address0,
        NTTTWiddleRAM_0_1_ce0,
        NTTTWiddleRAM_0_1_we0,
        NTTTWiddleRAM_0_1_d0,
        NTTTWiddleRAM_0_2_address0,
        NTTTWiddleRAM_0_2_ce0,
        NTTTWiddleRAM_0_2_we0,
        NTTTWiddleRAM_0_2_d0,
        NTTTWiddleRAM_0_3_address0,
        NTTTWiddleRAM_0_3_ce0,
        NTTTWiddleRAM_0_3_we0,
        NTTTWiddleRAM_0_3_d0,
        INTTTWiddleRAM_0_address0,
        INTTTWiddleRAM_0_ce0,
        INTTTWiddleRAM_0_we0,
        INTTTWiddleRAM_0_d0,
        INTTTWiddleRAM_0_1_address0,
        INTTTWiddleRAM_0_1_ce0,
        INTTTWiddleRAM_0_1_we0,
        INTTTWiddleRAM_0_1_d0,
        INTTTWiddleRAM_0_2_address0,
        INTTTWiddleRAM_0_2_ce0,
        INTTTWiddleRAM_0_2_we0,
        INTTTWiddleRAM_0_2_d0,
        INTTTWiddleRAM_0_3_address0,
        INTTTWiddleRAM_0_3_ce0,
        INTTTWiddleRAM_0_3_we0,
        INTTTWiddleRAM_0_3_d0,
        NTTTwiddleIn_address0,
        NTTTwiddleIn_ce0,
        NTTTwiddleIn_q0,
        INTTTwiddleIn_address0,
        INTTTwiddleIn_ce0,
        INTTTwiddleIn_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] NTTTWiddleRAM_0_address0;
output   NTTTWiddleRAM_0_ce0;
output   NTTTWiddleRAM_0_we0;
output  [31:0] NTTTWiddleRAM_0_d0;
output  [11:0] NTTTWiddleRAM_0_1_address0;
output   NTTTWiddleRAM_0_1_ce0;
output   NTTTWiddleRAM_0_1_we0;
output  [31:0] NTTTWiddleRAM_0_1_d0;
output  [11:0] NTTTWiddleRAM_0_2_address0;
output   NTTTWiddleRAM_0_2_ce0;
output   NTTTWiddleRAM_0_2_we0;
output  [31:0] NTTTWiddleRAM_0_2_d0;
output  [11:0] NTTTWiddleRAM_0_3_address0;
output   NTTTWiddleRAM_0_3_ce0;
output   NTTTWiddleRAM_0_3_we0;
output  [31:0] NTTTWiddleRAM_0_3_d0;
output  [11:0] INTTTWiddleRAM_0_address0;
output   INTTTWiddleRAM_0_ce0;
output   INTTTWiddleRAM_0_we0;
output  [31:0] INTTTWiddleRAM_0_d0;
output  [11:0] INTTTWiddleRAM_0_1_address0;
output   INTTTWiddleRAM_0_1_ce0;
output   INTTTWiddleRAM_0_1_we0;
output  [31:0] INTTTWiddleRAM_0_1_d0;
output  [11:0] INTTTWiddleRAM_0_2_address0;
output   INTTTWiddleRAM_0_2_ce0;
output   INTTTWiddleRAM_0_2_we0;
output  [31:0] INTTTWiddleRAM_0_2_d0;
output  [11:0] INTTTWiddleRAM_0_3_address0;
output   INTTTWiddleRAM_0_3_ce0;
output   INTTTWiddleRAM_0_3_we0;
output  [31:0] INTTTWiddleRAM_0_3_d0;
output  [13:0] NTTTwiddleIn_address0;
output   NTTTwiddleIn_ce0;
input  [31:0] NTTTwiddleIn_q0;
output  [13:0] INTTTwiddleIn_address0;
output   INTTTwiddleIn_ce0;
input  [31:0] INTTTwiddleIn_q0;

reg ap_idle;
reg NTTTWiddleRAM_0_ce0;
reg NTTTWiddleRAM_0_we0;
reg NTTTWiddleRAM_0_1_ce0;
reg NTTTWiddleRAM_0_1_we0;
reg NTTTWiddleRAM_0_2_ce0;
reg NTTTWiddleRAM_0_2_we0;
reg NTTTWiddleRAM_0_3_ce0;
reg NTTTWiddleRAM_0_3_we0;
reg INTTTWiddleRAM_0_ce0;
reg INTTTWiddleRAM_0_we0;
reg INTTTWiddleRAM_0_1_ce0;
reg INTTTWiddleRAM_0_1_we0;
reg INTTTWiddleRAM_0_2_ce0;
reg INTTTWiddleRAM_0_2_we0;
reg INTTTWiddleRAM_0_3_ce0;
reg INTTTWiddleRAM_0_3_we0;
reg NTTTwiddleIn_ce0;
reg INTTTwiddleIn_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln115_fu_244_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] select_ln115_1_fu_282_p3;
reg   [1:0] select_ln115_1_reg_384;
reg   [1:0] select_ln115_1_reg_384_pp0_iter1_reg;
reg   [1:0] select_ln115_1_reg_384_pp0_iter2_reg;
wire   [11:0] empty_fu_290_p1;
reg   [11:0] empty_reg_390;
wire   [1:0] empty_477_fu_294_p1;
reg   [1:0] empty_477_reg_395;
reg   [1:0] empty_477_reg_395_pp0_iter1_reg;
reg   [1:0] empty_477_reg_395_pp0_iter2_reg;
reg   [9:0] lshr_ln_reg_399;
reg   [9:0] lshr_ln_reg_399_pp0_iter1_reg;
reg   [9:0] lshr_ln_reg_399_pp0_iter2_reg;
reg   [31:0] NTTTwiddleIn_load_reg_414;
reg   [31:0] INTTTwiddleIn_load_reg_422;
wire   [63:0] zext_ln120_fu_335_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln120_1_fu_347_p1;
reg   [12:0] k_fu_84;
wire   [12:0] add_ln119_fu_308_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_k_load;
reg   [1:0] i_fu_88;
reg   [1:0] ap_sig_allocacmp_i_load;
reg   [13:0] indvar_flatten13_fu_92;
wire   [13:0] add_ln115_1_fu_250_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten13_load;
wire   [0:0] icmp_ln119_fu_268_p2;
wire   [1:0] add_ln115_fu_262_p2;
wire   [12:0] select_ln115_fu_274_p3;
wire   [13:0] tmp_49_fu_329_p3;
wire   [11:0] tmp_s_fu_341_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Crypto1_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln115_fu_244_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_88 <= select_ln115_1_fu_282_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_88 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln115_fu_244_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten13_fu_92 <= add_ln115_1_fu_250_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_92 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln115_fu_244_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_84 <= add_ln119_fu_308_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_84 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        INTTTwiddleIn_load_reg_422 <= INTTTwiddleIn_q0;
        NTTTwiddleIn_load_reg_414 <= NTTTwiddleIn_q0;
        empty_477_reg_395_pp0_iter2_reg <= empty_477_reg_395_pp0_iter1_reg;
        lshr_ln_reg_399_pp0_iter2_reg <= lshr_ln_reg_399_pp0_iter1_reg;
        select_ln115_1_reg_384_pp0_iter2_reg <= select_ln115_1_reg_384_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_477_reg_395_pp0_iter1_reg <= empty_477_reg_395;
        lshr_ln_reg_399_pp0_iter1_reg <= lshr_ln_reg_399;
        select_ln115_1_reg_384_pp0_iter1_reg <= select_ln115_1_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_244_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_477_reg_395 <= empty_477_fu_294_p1;
        empty_reg_390 <= empty_fu_290_p1;
        lshr_ln_reg_399 <= {{select_ln115_fu_274_p3[11:2]}};
        select_ln115_1_reg_384 <= select_ln115_1_fu_282_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        INTTTWiddleRAM_0_1_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (empty_477_reg_395_pp0_iter2_reg == 2'd1))) begin
        INTTTWiddleRAM_0_1_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        INTTTWiddleRAM_0_2_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (empty_477_reg_395_pp0_iter2_reg == 2'd2))) begin
        INTTTWiddleRAM_0_2_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        INTTTWiddleRAM_0_3_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (empty_477_reg_395_pp0_iter2_reg == 2'd3))) begin
        INTTTWiddleRAM_0_3_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        INTTTWiddleRAM_0_ce0 = 1'b1;
    end else begin
        INTTTWiddleRAM_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (empty_477_reg_395_pp0_iter2_reg == 2'd0))) begin
        INTTTWiddleRAM_0_we0 = 1'b1;
    end else begin
        INTTTWiddleRAM_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        INTTTwiddleIn_ce0 = 1'b1;
    end else begin
        INTTTwiddleIn_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        NTTTWiddleRAM_0_1_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (empty_477_reg_395_pp0_iter2_reg == 2'd1))) begin
        NTTTWiddleRAM_0_1_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        NTTTWiddleRAM_0_2_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (empty_477_reg_395_pp0_iter2_reg == 2'd2))) begin
        NTTTWiddleRAM_0_2_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        NTTTWiddleRAM_0_3_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (empty_477_reg_395_pp0_iter2_reg == 2'd3))) begin
        NTTTWiddleRAM_0_3_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        NTTTWiddleRAM_0_ce0 = 1'b1;
    end else begin
        NTTTWiddleRAM_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (empty_477_reg_395_pp0_iter2_reg == 2'd0))) begin
        NTTTWiddleRAM_0_we0 = 1'b1;
    end else begin
        NTTTWiddleRAM_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        NTTTwiddleIn_ce0 = 1'b1;
    end else begin
        NTTTwiddleIn_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln115_fu_244_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 2'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k_load = 13'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_84;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INTTTWiddleRAM_0_1_address0 = zext_ln120_1_fu_347_p1;

assign INTTTWiddleRAM_0_1_d0 = INTTTwiddleIn_load_reg_422;

assign INTTTWiddleRAM_0_2_address0 = zext_ln120_1_fu_347_p1;

assign INTTTWiddleRAM_0_2_d0 = INTTTwiddleIn_load_reg_422;

assign INTTTWiddleRAM_0_3_address0 = zext_ln120_1_fu_347_p1;

assign INTTTWiddleRAM_0_3_d0 = INTTTwiddleIn_load_reg_422;

assign INTTTWiddleRAM_0_address0 = zext_ln120_1_fu_347_p1;

assign INTTTWiddleRAM_0_d0 = INTTTwiddleIn_load_reg_422;

assign INTTTwiddleIn_address0 = zext_ln120_fu_335_p1;

assign NTTTWiddleRAM_0_1_address0 = zext_ln120_1_fu_347_p1;

assign NTTTWiddleRAM_0_1_d0 = NTTTwiddleIn_load_reg_414;

assign NTTTWiddleRAM_0_2_address0 = zext_ln120_1_fu_347_p1;

assign NTTTWiddleRAM_0_2_d0 = NTTTwiddleIn_load_reg_414;

assign NTTTWiddleRAM_0_3_address0 = zext_ln120_1_fu_347_p1;

assign NTTTWiddleRAM_0_3_d0 = NTTTwiddleIn_load_reg_414;

assign NTTTWiddleRAM_0_address0 = zext_ln120_1_fu_347_p1;

assign NTTTWiddleRAM_0_d0 = NTTTwiddleIn_load_reg_414;

assign NTTTwiddleIn_address0 = zext_ln120_fu_335_p1;

assign add_ln115_1_fu_250_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 14'd1);

assign add_ln115_fu_262_p2 = (ap_sig_allocacmp_i_load + 2'd1);

assign add_ln119_fu_308_p2 = (select_ln115_fu_274_p3 + 13'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_477_fu_294_p1 = select_ln115_fu_274_p3[1:0];

assign empty_fu_290_p1 = select_ln115_fu_274_p3[11:0];

assign icmp_ln115_fu_244_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 14'd12288) ? 1'b1 : 1'b0);

assign icmp_ln119_fu_268_p2 = ((ap_sig_allocacmp_k_load == 13'd4096) ? 1'b1 : 1'b0);

assign select_ln115_1_fu_282_p3 = ((icmp_ln119_fu_268_p2[0:0] == 1'b1) ? add_ln115_fu_262_p2 : ap_sig_allocacmp_i_load);

assign select_ln115_fu_274_p3 = ((icmp_ln119_fu_268_p2[0:0] == 1'b1) ? 13'd0 : ap_sig_allocacmp_k_load);

assign tmp_49_fu_329_p3 = {{select_ln115_1_reg_384}, {empty_reg_390}};

assign tmp_s_fu_341_p3 = {{select_ln115_1_reg_384_pp0_iter2_reg}, {lshr_ln_reg_399_pp0_iter2_reg}};

assign zext_ln120_1_fu_347_p1 = tmp_s_fu_341_p3;

assign zext_ln120_fu_335_p1 = tmp_49_fu_329_p3;

endmodule //Crypto1_Crypto1_Pipeline_WRITE_TWIDDLE_LOOP_WRITE_TWIDDLE_COL_LOOP
