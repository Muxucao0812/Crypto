// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Crypto1_Crypto1_Pipeline_VITIS_LOOP_311_116 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        InputIndex_address0,
        InputIndex_ce0,
        InputIndex_q0,
        ReadData_address0,
        ReadData_ce0,
        ReadData_q0,
        ReadData_1_address0,
        ReadData_1_ce0,
        ReadData_1_q0,
        ReadData_2_address0,
        ReadData_2_ce0,
        ReadData_2_q0,
        ReadData_3_address0,
        ReadData_3_ce0,
        ReadData_3_q0,
        PermuteData_address0,
        PermuteData_ce0,
        PermuteData_we0,
        PermuteData_d0,
        PermuteData_1_address0,
        PermuteData_1_ce0,
        PermuteData_1_we0,
        PermuteData_1_d0,
        PermuteData_2_address0,
        PermuteData_2_ce0,
        PermuteData_2_we0,
        PermuteData_2_d0,
        PermuteData_3_address0,
        PermuteData_3_ce0,
        PermuteData_3_we0,
        PermuteData_3_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] InputIndex_address0;
output   InputIndex_ce0;
input  [5:0] InputIndex_q0;
output  [3:0] ReadData_address0;
output   ReadData_ce0;
input  [31:0] ReadData_q0;
output  [3:0] ReadData_1_address0;
output   ReadData_1_ce0;
input  [31:0] ReadData_1_q0;
output  [3:0] ReadData_2_address0;
output   ReadData_2_ce0;
input  [31:0] ReadData_2_q0;
output  [3:0] ReadData_3_address0;
output   ReadData_3_ce0;
input  [31:0] ReadData_3_q0;
output  [3:0] PermuteData_address0;
output   PermuteData_ce0;
output   PermuteData_we0;
output  [31:0] PermuteData_d0;
output  [3:0] PermuteData_1_address0;
output   PermuteData_1_ce0;
output   PermuteData_1_we0;
output  [31:0] PermuteData_1_d0;
output  [3:0] PermuteData_2_address0;
output   PermuteData_2_ce0;
output   PermuteData_2_we0;
output  [31:0] PermuteData_2_d0;
output  [3:0] PermuteData_3_address0;
output   PermuteData_3_ce0;
output   PermuteData_3_we0;
output  [31:0] PermuteData_3_d0;

reg ap_idle;
reg InputIndex_ce0;
reg ReadData_ce0;
reg ReadData_1_ce0;
reg ReadData_2_ce0;
reg ReadData_3_ce0;
reg PermuteData_ce0;
reg PermuteData_we0;
reg PermuteData_1_ce0;
reg PermuteData_1_we0;
reg PermuteData_2_ce0;
reg PermuteData_2_we0;
reg PermuteData_3_ce0;
reg PermuteData_3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln311_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] empty_fu_206_p1;
reg   [1:0] empty_reg_278;
reg   [1:0] empty_reg_278_pp0_iter1_reg;
reg   [1:0] empty_reg_278_pp0_iter2_reg;
reg   [3:0] lshr_ln311_2_reg_282;
reg   [3:0] lshr_ln311_2_reg_282_pp0_iter1_reg;
reg   [3:0] lshr_ln311_2_reg_282_pp0_iter2_reg;
wire   [1:0] trunc_ln313_fu_225_p1;
reg   [1:0] trunc_ln313_reg_292;
wire   [31:0] tmp_15_fu_247_p6;
reg   [31:0] tmp_15_reg_317;
wire   [63:0] l_10_cast88_fu_201_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln313_fu_239_p1;
wire   [63:0] zext_ln311_fu_260_p1;
reg   [6:0] l_fu_60;
wire   [6:0] add_ln311_fu_195_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_l_9;
wire   [3:0] lshr_ln313_2_fu_229_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Crypto1_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U340(
    .din0(ReadData_q0),
    .din1(ReadData_1_q0),
    .din2(ReadData_2_q0),
    .din3(ReadData_3_q0),
    .din4(trunc_ln313_reg_292),
    .dout(tmp_15_fu_247_p6)
);

Crypto1_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln311_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            l_fu_60 <= add_ln311_fu_195_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            l_fu_60 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_reg_278_pp0_iter1_reg <= empty_reg_278;
        lshr_ln311_2_reg_282_pp0_iter1_reg <= lshr_ln311_2_reg_282;
        trunc_ln313_reg_292 <= trunc_ln313_fu_225_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln311_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_reg_278 <= empty_fu_206_p1;
        lshr_ln311_2_reg_282 <= {{ap_sig_allocacmp_l_9[5:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        empty_reg_278_pp0_iter2_reg <= empty_reg_278_pp0_iter1_reg;
        lshr_ln311_2_reg_282_pp0_iter2_reg <= lshr_ln311_2_reg_282_pp0_iter1_reg;
        tmp_15_reg_317 <= tmp_15_fu_247_p6;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        InputIndex_ce0 = 1'b1;
    end else begin
        InputIndex_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        PermuteData_1_ce0 = 1'b1;
    end else begin
        PermuteData_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (empty_reg_278_pp0_iter2_reg == 2'd1))) begin
        PermuteData_1_we0 = 1'b1;
    end else begin
        PermuteData_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        PermuteData_2_ce0 = 1'b1;
    end else begin
        PermuteData_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (empty_reg_278_pp0_iter2_reg == 2'd2))) begin
        PermuteData_2_we0 = 1'b1;
    end else begin
        PermuteData_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        PermuteData_3_ce0 = 1'b1;
    end else begin
        PermuteData_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (empty_reg_278_pp0_iter2_reg == 2'd3))) begin
        PermuteData_3_we0 = 1'b1;
    end else begin
        PermuteData_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        PermuteData_ce0 = 1'b1;
    end else begin
        PermuteData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (empty_reg_278_pp0_iter2_reg == 2'd0))) begin
        PermuteData_we0 = 1'b1;
    end else begin
        PermuteData_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ReadData_1_ce0 = 1'b1;
    end else begin
        ReadData_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ReadData_2_ce0 = 1'b1;
    end else begin
        ReadData_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ReadData_3_ce0 = 1'b1;
    end else begin
        ReadData_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ReadData_ce0 = 1'b1;
    end else begin
        ReadData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln311_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_l_9 = 7'd0;
    end else begin
        ap_sig_allocacmp_l_9 = l_fu_60;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign InputIndex_address0 = l_10_cast88_fu_201_p1;

assign PermuteData_1_address0 = zext_ln311_fu_260_p1;

assign PermuteData_1_d0 = tmp_15_reg_317;

assign PermuteData_2_address0 = zext_ln311_fu_260_p1;

assign PermuteData_2_d0 = tmp_15_reg_317;

assign PermuteData_3_address0 = zext_ln311_fu_260_p1;

assign PermuteData_3_d0 = tmp_15_reg_317;

assign PermuteData_address0 = zext_ln311_fu_260_p1;

assign PermuteData_d0 = tmp_15_reg_317;

assign ReadData_1_address0 = zext_ln313_fu_239_p1;

assign ReadData_2_address0 = zext_ln313_fu_239_p1;

assign ReadData_3_address0 = zext_ln313_fu_239_p1;

assign ReadData_address0 = zext_ln313_fu_239_p1;

assign add_ln311_fu_195_p2 = (ap_sig_allocacmp_l_9 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_206_p1 = ap_sig_allocacmp_l_9[1:0];

assign icmp_ln311_fu_189_p2 = ((ap_sig_allocacmp_l_9 == 7'd64) ? 1'b1 : 1'b0);

assign l_10_cast88_fu_201_p1 = ap_sig_allocacmp_l_9;

assign lshr_ln313_2_fu_229_p4 = {{InputIndex_q0[5:2]}};

assign trunc_ln313_fu_225_p1 = InputIndex_q0[1:0];

assign zext_ln311_fu_260_p1 = lshr_ln311_2_reg_282_pp0_iter2_reg;

assign zext_ln313_fu_239_p1 = lshr_ln313_2_fu_229_p4;

endmodule //Crypto1_Crypto1_Pipeline_VITIS_LOOP_311_116
