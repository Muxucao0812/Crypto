// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Crypto_Crypto_Pipeline_VITIS_LOOP_63_27 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dataInStream_TVALID,
        DataRAM_10_address0,
        DataRAM_10_ce0,
        DataRAM_10_we0,
        DataRAM_10_d0,
        DataRAM_7_address0,
        DataRAM_7_ce0,
        DataRAM_7_we0,
        DataRAM_7_d0,
        DataRAM_4_address0,
        DataRAM_4_ce0,
        DataRAM_4_we0,
        DataRAM_4_d0,
        DataRAM_1_address0,
        DataRAM_1_ce0,
        DataRAM_1_we0,
        DataRAM_1_d0,
        dataInStream_TDATA,
        dataInStream_TREADY,
        dataInStream_TKEEP,
        dataInStream_TSTRB,
        dataInStream_TLAST,
        RAMSel_cast
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   dataInStream_TVALID;
output  [11:0] DataRAM_10_address0;
output   DataRAM_10_ce0;
output   DataRAM_10_we0;
output  [31:0] DataRAM_10_d0;
output  [11:0] DataRAM_7_address0;
output   DataRAM_7_ce0;
output   DataRAM_7_we0;
output  [31:0] DataRAM_7_d0;
output  [11:0] DataRAM_4_address0;
output   DataRAM_4_ce0;
output   DataRAM_4_we0;
output  [31:0] DataRAM_4_d0;
output  [11:0] DataRAM_1_address0;
output   DataRAM_1_ce0;
output   DataRAM_1_we0;
output  [31:0] DataRAM_1_d0;
input  [31:0] dataInStream_TDATA;
output   dataInStream_TREADY;
input  [3:0] dataInStream_TKEEP;
input  [3:0] dataInStream_TSTRB;
input  [0:0] dataInStream_TLAST;
input  [1:0] RAMSel_cast;

reg ap_idle;
reg DataRAM_10_ce0;
reg DataRAM_10_we0;
reg DataRAM_7_ce0;
reg DataRAM_7_we0;
reg DataRAM_4_ce0;
reg DataRAM_4_we0;
reg DataRAM_1_ce0;
reg DataRAM_1_we0;
reg dataInStream_TREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln63_fu_148_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    dataInStream_TDATA_blk_n;
wire   [63:0] zext_ln63_fu_160_p1;
reg   [12:0] j_fu_66;
wire   [12:0] add_ln63_fu_154_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_j_6;
wire   [1:0] RAMSel_cast_read_read_fu_70_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_151;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

Crypto_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_151)) begin
        if ((icmp_ln63_fu_148_p2 == 1'd0)) begin
            j_fu_66 <= add_ln63_fu_154_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_66 <= 13'd0;
        end
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        DataRAM_10_ce0 = 1'b1;
    end else begin
        DataRAM_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0))) & (icmp_ln63_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (2'd3 == RAMSel_cast_read_read_fu_70_p2))) begin
        DataRAM_10_we0 = 1'b1;
    end else begin
        DataRAM_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        DataRAM_1_ce0 = 1'b1;
    end else begin
        DataRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0))) & (icmp_ln63_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (2'd0 == RAMSel_cast_read_read_fu_70_p2))) begin
        DataRAM_1_we0 = 1'b1;
    end else begin
        DataRAM_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        DataRAM_4_ce0 = 1'b1;
    end else begin
        DataRAM_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0))) & (icmp_ln63_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (2'd1 == RAMSel_cast_read_read_fu_70_p2))) begin
        DataRAM_4_we0 = 1'b1;
    end else begin
        DataRAM_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        DataRAM_7_ce0 = 1'b1;
    end else begin
        DataRAM_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0))) & (2'd2 == RAMSel_cast_read_read_fu_70_p2) & (icmp_ln63_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        DataRAM_7_we0 = 1'b1;
    end else begin
        DataRAM_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0))) & (icmp_ln63_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_j_6 = 13'd0;
    end else begin
        ap_sig_allocacmp_j_6 = j_fu_66;
    end
end

always @ (*) begin
    if (((icmp_ln63_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        dataInStream_TDATA_blk_n = dataInStream_TVALID;
    end else begin
        dataInStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0))) & (icmp_ln63_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        dataInStream_TREADY = 1'b1;
    end else begin
        dataInStream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DataRAM_10_address0 = zext_ln63_fu_160_p1;

assign DataRAM_10_d0 = dataInStream_TDATA;

assign DataRAM_1_address0 = zext_ln63_fu_160_p1;

assign DataRAM_1_d0 = dataInStream_TDATA;

assign DataRAM_4_address0 = zext_ln63_fu_160_p1;

assign DataRAM_4_d0 = dataInStream_TDATA;

assign DataRAM_7_address0 = zext_ln63_fu_160_p1;

assign DataRAM_7_d0 = dataInStream_TDATA;

assign RAMSel_cast_read_read_fu_70_p2 = RAMSel_cast;

assign add_ln63_fu_154_p2 = (ap_sig_allocacmp_j_6 + 13'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0)));
end

always @ (*) begin
    ap_condition_151 = (~((ap_start_int == 1'b0) | ((icmp_ln63_fu_148_p2 == 1'd0) & (dataInStream_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln63_fu_148_p2 = ((ap_sig_allocacmp_j_6 == 13'd4096) ? 1'b1 : 1'b0);

assign zext_ln63_fu_160_p1 = ap_sig_allocacmp_j_6;

endmodule //Crypto_Crypto_Pipeline_VITIS_LOOP_63_27
