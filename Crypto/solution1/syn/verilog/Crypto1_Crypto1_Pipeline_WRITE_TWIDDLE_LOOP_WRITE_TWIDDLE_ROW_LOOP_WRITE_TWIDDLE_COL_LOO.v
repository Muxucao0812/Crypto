// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Crypto1_Crypto1_Pipeline_WRITE_TWIDDLE_LOOP_WRITE_TWIDDLE_ROW_LOOP_WRITE_TWIDDLE_COL_LOO (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        NTTTWiddleRAM_address0,
        NTTTWiddleRAM_ce0,
        NTTTWiddleRAM_we0,
        NTTTWiddleRAM_d0,
        NTTTWiddleRAM_1_address0,
        NTTTWiddleRAM_1_ce0,
        NTTTWiddleRAM_1_we0,
        NTTTWiddleRAM_1_d0,
        NTTTWiddleRAM_2_address0,
        NTTTWiddleRAM_2_ce0,
        NTTTWiddleRAM_2_we0,
        NTTTWiddleRAM_2_d0,
        NTTTWiddleRAM_3_address0,
        NTTTWiddleRAM_3_ce0,
        NTTTWiddleRAM_3_we0,
        NTTTWiddleRAM_3_d0,
        INTTTWiddleRAM_address0,
        INTTTWiddleRAM_ce0,
        INTTTWiddleRAM_we0,
        INTTTWiddleRAM_d0,
        INTTTWiddleRAM_1_address0,
        INTTTWiddleRAM_1_ce0,
        INTTTWiddleRAM_1_we0,
        INTTTWiddleRAM_1_d0,
        INTTTWiddleRAM_2_address0,
        INTTTWiddleRAM_2_ce0,
        INTTTWiddleRAM_2_we0,
        INTTTWiddleRAM_2_d0,
        INTTTWiddleRAM_3_address0,
        INTTTWiddleRAM_3_ce0,
        INTTTWiddleRAM_3_we0,
        INTTTWiddleRAM_3_d0,
        NTTTwiddleIn_address0,
        NTTTwiddleIn_ce0,
        NTTTwiddleIn_q0,
        INTTTwiddleIn_address0,
        INTTTwiddleIn_ce0,
        INTTTwiddleIn_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [16:0] NTTTWiddleRAM_address0;
output   NTTTWiddleRAM_ce0;
output   NTTTWiddleRAM_we0;
output  [31:0] NTTTWiddleRAM_d0;
output  [16:0] NTTTWiddleRAM_1_address0;
output   NTTTWiddleRAM_1_ce0;
output   NTTTWiddleRAM_1_we0;
output  [31:0] NTTTWiddleRAM_1_d0;
output  [16:0] NTTTWiddleRAM_2_address0;
output   NTTTWiddleRAM_2_ce0;
output   NTTTWiddleRAM_2_we0;
output  [31:0] NTTTWiddleRAM_2_d0;
output  [16:0] NTTTWiddleRAM_3_address0;
output   NTTTWiddleRAM_3_ce0;
output   NTTTWiddleRAM_3_we0;
output  [31:0] NTTTWiddleRAM_3_d0;
output  [16:0] INTTTWiddleRAM_address0;
output   INTTTWiddleRAM_ce0;
output   INTTTWiddleRAM_we0;
output  [31:0] INTTTWiddleRAM_d0;
output  [16:0] INTTTWiddleRAM_1_address0;
output   INTTTWiddleRAM_1_ce0;
output   INTTTWiddleRAM_1_we0;
output  [31:0] INTTTWiddleRAM_1_d0;
output  [16:0] INTTTWiddleRAM_2_address0;
output   INTTTWiddleRAM_2_ce0;
output   INTTTWiddleRAM_2_we0;
output  [31:0] INTTTWiddleRAM_2_d0;
output  [16:0] INTTTWiddleRAM_3_address0;
output   INTTTWiddleRAM_3_ce0;
output   INTTTWiddleRAM_3_we0;
output  [31:0] INTTTWiddleRAM_3_d0;
output  [13:0] NTTTwiddleIn_address0;
output   NTTTwiddleIn_ce0;
input  [31:0] NTTTwiddleIn_q0;
output  [13:0] INTTTwiddleIn_address0;
output   INTTTwiddleIn_ce0;
input  [31:0] INTTTwiddleIn_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln115_fu_281_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln117_fu_293_p2;
reg   [0:0] icmp_ln117_reg_524;
wire   [6:0] add_ln119_1_fu_408_p2;
reg   [6:0] add_ln119_1_reg_532;
wire   [1:0] trunc_ln119_5_fu_418_p1;
reg   [1:0] trunc_ln119_5_reg_537;
reg   [9:0] lshr_ln_reg_541;
wire   [63:0] zext_ln120_1_fu_440_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln120_2_fu_473_p1;
reg   [12:0] k_fu_92;
wire   [12:0] add_ln119_fu_446_p2;
wire    ap_loop_init;
reg   [5:0] j_fu_96;
wire   [5:0] select_ln117_fu_388_p3;
reg   [18:0] indvar_flatten13_fu_100;
wire   [18:0] select_ln117_1_fu_305_p3;
reg   [1:0] i_fu_104;
wire   [1:0] select_ln115_1_fu_362_p3;
reg   [18:0] indvar_flatten26_fu_108;
wire   [18:0] add_ln115_1_fu_287_p2;
reg    NTTTwiddleIn_ce0_local;
reg    INTTTwiddleIn_ce0_local;
reg    NTTTWiddleRAM_2_we0_local;
reg    NTTTWiddleRAM_2_ce0_local;
reg    INTTTWiddleRAM_2_we0_local;
reg    INTTTWiddleRAM_2_ce0_local;
reg    NTTTWiddleRAM_1_we0_local;
reg    NTTTWiddleRAM_1_ce0_local;
reg    INTTTWiddleRAM_1_we0_local;
reg    INTTTWiddleRAM_1_ce0_local;
reg    NTTTWiddleRAM_we0_local;
reg    NTTTWiddleRAM_ce0_local;
reg    INTTTWiddleRAM_we0_local;
reg    INTTTWiddleRAM_ce0_local;
reg    NTTTWiddleRAM_3_we0_local;
reg    NTTTWiddleRAM_3_ce0_local;
reg    INTTTWiddleRAM_3_we0_local;
reg    INTTTWiddleRAM_3_ce0_local;
wire   [18:0] add_ln117_1_fu_299_p2;
wire   [0:0] icmp_ln119_fu_350_p2;
wire   [0:0] xor_ln115_fu_345_p2;
wire   [1:0] add_ln115_fu_332_p2;
wire   [5:0] select_ln115_fu_338_p3;
wire   [0:0] and_ln115_fu_356_p2;
wire   [0:0] empty_fu_375_p2;
wire   [5:0] add_ln117_fu_369_p2;
wire   [6:0] tmp_s_fu_396_p3;
wire   [6:0] zext_ln120_fu_404_p1;
wire   [12:0] k_6_mid2_fu_380_p3;
wire   [11:0] trunc_ln119_fu_414_p1;
wire   [13:0] tmp_52_fu_432_p3;
wire   [16:0] tmp_51_fu_467_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 k_fu_92 = 13'd0;
#0 j_fu_96 = 6'd0;
#0 indvar_flatten13_fu_100 = 19'd0;
#0 i_fu_104 = 2'd0;
#0 indvar_flatten26_fu_108 = 19'd0;
#0 ap_done_reg = 1'b0;
end

Crypto1_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            i_fu_104 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i_fu_104 <= select_ln115_1_fu_362_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_100 <= 19'd0;
        end else if (((icmp_ln115_fu_281_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten13_fu_100 <= select_ln117_1_fu_305_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten26_fu_108 <= 19'd0;
        end else if (((icmp_ln115_fu_281_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten26_fu_108 <= add_ln115_1_fu_287_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            j_fu_96 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            j_fu_96 <= select_ln117_fu_388_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            k_fu_92 <= 13'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            k_fu_92 <= add_ln119_fu_446_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln119_1_reg_532 <= add_ln119_1_fu_408_p2;
        lshr_ln_reg_541 <= {{k_6_mid2_fu_380_p3[11:2]}};
        trunc_ln119_5_reg_537 <= trunc_ln119_5_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln117_reg_524 <= icmp_ln117_fu_293_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        INTTTWiddleRAM_1_ce0_local = 1'b1;
    end else begin
        INTTTWiddleRAM_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln119_5_reg_537 == 2'd1))) begin
        INTTTWiddleRAM_1_we0_local = 1'b1;
    end else begin
        INTTTWiddleRAM_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        INTTTWiddleRAM_2_ce0_local = 1'b1;
    end else begin
        INTTTWiddleRAM_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln119_5_reg_537 == 2'd2))) begin
        INTTTWiddleRAM_2_we0_local = 1'b1;
    end else begin
        INTTTWiddleRAM_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        INTTTWiddleRAM_3_ce0_local = 1'b1;
    end else begin
        INTTTWiddleRAM_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln119_5_reg_537 == 2'd3))) begin
        INTTTWiddleRAM_3_we0_local = 1'b1;
    end else begin
        INTTTWiddleRAM_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        INTTTWiddleRAM_ce0_local = 1'b1;
    end else begin
        INTTTWiddleRAM_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln119_5_reg_537 == 2'd0))) begin
        INTTTWiddleRAM_we0_local = 1'b1;
    end else begin
        INTTTWiddleRAM_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        INTTTwiddleIn_ce0_local = 1'b1;
    end else begin
        INTTTwiddleIn_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        NTTTWiddleRAM_1_ce0_local = 1'b1;
    end else begin
        NTTTWiddleRAM_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln119_5_reg_537 == 2'd1))) begin
        NTTTWiddleRAM_1_we0_local = 1'b1;
    end else begin
        NTTTWiddleRAM_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        NTTTWiddleRAM_2_ce0_local = 1'b1;
    end else begin
        NTTTWiddleRAM_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln119_5_reg_537 == 2'd2))) begin
        NTTTWiddleRAM_2_we0_local = 1'b1;
    end else begin
        NTTTWiddleRAM_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        NTTTWiddleRAM_3_ce0_local = 1'b1;
    end else begin
        NTTTWiddleRAM_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln119_5_reg_537 == 2'd3))) begin
        NTTTWiddleRAM_3_we0_local = 1'b1;
    end else begin
        NTTTWiddleRAM_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        NTTTWiddleRAM_ce0_local = 1'b1;
    end else begin
        NTTTWiddleRAM_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln119_5_reg_537 == 2'd0))) begin
        NTTTWiddleRAM_we0_local = 1'b1;
    end else begin
        NTTTWiddleRAM_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        NTTTwiddleIn_ce0_local = 1'b1;
    end else begin
        NTTTwiddleIn_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln115_fu_281_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INTTTWiddleRAM_1_address0 = zext_ln120_2_fu_473_p1;

assign INTTTWiddleRAM_1_ce0 = INTTTWiddleRAM_1_ce0_local;

assign INTTTWiddleRAM_1_d0 = INTTTwiddleIn_q0;

assign INTTTWiddleRAM_1_we0 = INTTTWiddleRAM_1_we0_local;

assign INTTTWiddleRAM_2_address0 = zext_ln120_2_fu_473_p1;

assign INTTTWiddleRAM_2_ce0 = INTTTWiddleRAM_2_ce0_local;

assign INTTTWiddleRAM_2_d0 = INTTTwiddleIn_q0;

assign INTTTWiddleRAM_2_we0 = INTTTWiddleRAM_2_we0_local;

assign INTTTWiddleRAM_3_address0 = zext_ln120_2_fu_473_p1;

assign INTTTWiddleRAM_3_ce0 = INTTTWiddleRAM_3_ce0_local;

assign INTTTWiddleRAM_3_d0 = INTTTwiddleIn_q0;

assign INTTTWiddleRAM_3_we0 = INTTTWiddleRAM_3_we0_local;

assign INTTTWiddleRAM_address0 = zext_ln120_2_fu_473_p1;

assign INTTTWiddleRAM_ce0 = INTTTWiddleRAM_ce0_local;

assign INTTTWiddleRAM_d0 = INTTTwiddleIn_q0;

assign INTTTWiddleRAM_we0 = INTTTWiddleRAM_we0_local;

assign INTTTwiddleIn_address0 = zext_ln120_1_fu_440_p1;

assign INTTTwiddleIn_ce0 = INTTTwiddleIn_ce0_local;

assign NTTTWiddleRAM_1_address0 = zext_ln120_2_fu_473_p1;

assign NTTTWiddleRAM_1_ce0 = NTTTWiddleRAM_1_ce0_local;

assign NTTTWiddleRAM_1_d0 = NTTTwiddleIn_q0;

assign NTTTWiddleRAM_1_we0 = NTTTWiddleRAM_1_we0_local;

assign NTTTWiddleRAM_2_address0 = zext_ln120_2_fu_473_p1;

assign NTTTWiddleRAM_2_ce0 = NTTTWiddleRAM_2_ce0_local;

assign NTTTWiddleRAM_2_d0 = NTTTwiddleIn_q0;

assign NTTTWiddleRAM_2_we0 = NTTTWiddleRAM_2_we0_local;

assign NTTTWiddleRAM_3_address0 = zext_ln120_2_fu_473_p1;

assign NTTTWiddleRAM_3_ce0 = NTTTWiddleRAM_3_ce0_local;

assign NTTTWiddleRAM_3_d0 = NTTTwiddleIn_q0;

assign NTTTWiddleRAM_3_we0 = NTTTWiddleRAM_3_we0_local;

assign NTTTWiddleRAM_address0 = zext_ln120_2_fu_473_p1;

assign NTTTWiddleRAM_ce0 = NTTTWiddleRAM_ce0_local;

assign NTTTWiddleRAM_d0 = NTTTwiddleIn_q0;

assign NTTTWiddleRAM_we0 = NTTTWiddleRAM_we0_local;

assign NTTTwiddleIn_address0 = zext_ln120_1_fu_440_p1;

assign NTTTwiddleIn_ce0 = NTTTwiddleIn_ce0_local;

assign add_ln115_1_fu_287_p2 = (indvar_flatten26_fu_108 + 19'd1);

assign add_ln115_fu_332_p2 = (i_fu_104 + 2'd1);

assign add_ln117_1_fu_299_p2 = (indvar_flatten13_fu_100 + 19'd1);

assign add_ln117_fu_369_p2 = (select_ln115_fu_338_p3 + 6'd1);

assign add_ln119_1_fu_408_p2 = (tmp_s_fu_396_p3 + zext_ln120_fu_404_p1);

assign add_ln119_fu_446_p2 = (k_6_mid2_fu_380_p3 + 13'd1);

assign and_ln115_fu_356_p2 = (xor_ln115_fu_345_p2 & icmp_ln119_fu_350_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign empty_fu_375_p2 = (icmp_ln117_reg_524 | and_ln115_fu_356_p2);

assign icmp_ln115_fu_281_p2 = ((indvar_flatten26_fu_108 == 19'd393216) ? 1'b1 : 1'b0);

assign icmp_ln117_fu_293_p2 = ((indvar_flatten13_fu_100 == 19'd131072) ? 1'b1 : 1'b0);

assign icmp_ln119_fu_350_p2 = ((k_fu_92 == 13'd4096) ? 1'b1 : 1'b0);

assign k_6_mid2_fu_380_p3 = ((empty_fu_375_p2[0:0] == 1'b1) ? 13'd0 : k_fu_92);

assign select_ln115_1_fu_362_p3 = ((icmp_ln117_reg_524[0:0] == 1'b1) ? add_ln115_fu_332_p2 : i_fu_104);

assign select_ln115_fu_338_p3 = ((icmp_ln117_reg_524[0:0] == 1'b1) ? 6'd0 : j_fu_96);

assign select_ln117_1_fu_305_p3 = ((icmp_ln117_fu_293_p2[0:0] == 1'b1) ? 19'd1 : add_ln117_1_fu_299_p2);

assign select_ln117_fu_388_p3 = ((and_ln115_fu_356_p2[0:0] == 1'b1) ? add_ln117_fu_369_p2 : select_ln115_fu_338_p3);

assign tmp_51_fu_467_p3 = {{add_ln119_1_reg_532}, {lshr_ln_reg_541}};

assign tmp_52_fu_432_p3 = {{select_ln115_1_fu_362_p3}, {trunc_ln119_fu_414_p1}};

assign tmp_s_fu_396_p3 = {{select_ln115_1_fu_362_p3}, {5'd0}};

assign trunc_ln119_5_fu_418_p1 = k_6_mid2_fu_380_p3[1:0];

assign trunc_ln119_fu_414_p1 = k_6_mid2_fu_380_p3[11:0];

assign xor_ln115_fu_345_p2 = (icmp_ln117_reg_524 ^ 1'd1);

assign zext_ln120_1_fu_440_p1 = tmp_52_fu_432_p3;

assign zext_ln120_2_fu_473_p1 = tmp_51_fu_467_p3;

assign zext_ln120_fu_404_p1 = select_ln117_fu_388_p3;

endmodule //Crypto1_Crypto1_Pipeline_WRITE_TWIDDLE_LOOP_WRITE_TWIDDLE_ROW_LOOP_WRITE_TWIDDLE_COL_LOO
