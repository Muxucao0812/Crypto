// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Crypto_ADD_MOD (
        ap_ready,
        input1_val,
        input2_val,
        MOD_INDEX,
        ap_return
);


output   ap_ready;
input  [31:0] input1_val;
input  [31:0] input2_val;
input  [1:0] MOD_INDEX;
output  [31:0] ap_return;

wire   [30:0] zext_ln43_cast_fu_42_p5;
wire   [31:0] add_ln40_fu_36_p2;
wire   [31:0] zext_ln43_fu_54_p1;
wire   [0:0] icmp_ln43_fu_58_p2;
wire   [31:0] sub_ln44_fu_64_p2;

Crypto_mux_3_2_31_1_0 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .din2_WIDTH( 31 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 31 ))
mux_3_2_31_1_0_U44(
    .din0(31'd1073750017),
    .din1(31'd1073815553),
    .din2(31'd1073872897),
    .din3(MOD_INDEX),
    .dout(zext_ln43_cast_fu_42_p5)
);

assign add_ln40_fu_36_p2 = (input2_val + input1_val);

assign ap_ready = 1'b1;

assign sub_ln44_fu_64_p2 = (add_ln40_fu_36_p2 - zext_ln43_fu_54_p1);

assign zext_ln43_fu_54_p1 = zext_ln43_cast_fu_42_p5;

assign ap_return = ((icmp_ln43_fu_58_p2[0:0] == 1'b1) ? add_ln40_fu_36_p2 : sub_ln44_fu_64_p2);

assign icmp_ln43_fu_58_p2 = (($signed(add_ln40_fu_36_p2) < $signed(zext_ln43_fu_54_p1)) ? 1'b1 : 1'b0);

endmodule //Crypto_ADD_MOD
