// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Crypto_Crypto_Pipeline_NTT_PE_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        hf,
        trunc_ln108_2,
        DataTemp_address0,
        DataTemp_ce0,
        DataTemp_we0,
        DataTemp_d0,
        DataTemp_q0,
        DataTemp_address1,
        DataTemp_ce1,
        DataTemp_we1,
        DataTemp_d1,
        DataTemp_q1,
        trunc_ln108_1,
        trunc_ln8,
        m,
        zext_ln19_5,
        mod_r,
        zext_ln19_6,
        zext_ln89,
        zext_ln64,
        twiddle_ram_address0,
        twiddle_ram_ce0,
        twiddle_ram_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] hf;
input  [11:0] trunc_ln108_2;
output  [11:0] DataTemp_address0;
output   DataTemp_ce0;
output   DataTemp_we0;
output  [31:0] DataTemp_d0;
input  [31:0] DataTemp_q0;
output  [11:0] DataTemp_address1;
output   DataTemp_ce1;
output   DataTemp_we1;
output  [31:0] DataTemp_d1;
input  [31:0] DataTemp_q1;
input  [11:0] trunc_ln108_1;
input  [12:0] trunc_ln8;
input  [19:0] m;
input  [15:0] zext_ln19_5;
input  [30:0] mod_r;
input  [15:0] zext_ln19_6;
input  [30:0] zext_ln89;
input  [30:0] zext_ln64;
output  [12:0] twiddle_ram_address0;
output   twiddle_ram_ce0;
input  [31:0] twiddle_ram_q0;

reg ap_idle;
reg[11:0] DataTemp_address0;
reg DataTemp_ce0;
reg DataTemp_we0;
reg[11:0] DataTemp_address1;
reg DataTemp_ce1;
reg DataTemp_we1;
reg twiddle_ram_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln110_fu_253_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln64_cast_fu_220_p1;
reg   [31:0] zext_ln64_cast_reg_824;
wire   [63:0] zext_ln89_cast_fu_224_p1;
reg   [63:0] zext_ln89_cast_reg_831;
wire   [31:0] zext_ln19_6_cast_fu_228_p1;
reg   [31:0] zext_ln19_6_cast_reg_836;
wire   [31:0] zext_ln19_5_cast_fu_232_p1;
reg   [31:0] zext_ln19_5_cast_reg_842;
reg   [11:0] res_reg_851;
wire    ap_block_pp0_stage1_11001;
reg   [11:0] res_1_reg_856;
reg   [3:0] input2_high_5_reg_866;
reg   [31:0] u_reg_871;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] v_fu_702_p3;
reg   [31:0] v_reg_876;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln112_fu_276_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln113_fu_286_p1;
wire   [63:0] zext_ln114_fu_296_p1;
reg   [12:0] phi_mul_fu_114;
wire   [12:0] add_ln114_fu_291_p2;
wire    ap_loop_init;
reg   [30:0] j_fu_118;
wire   [30:0] add_ln110_fu_258_p2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln110_fu_249_p1;
wire   [11:0] trunc_ln110_fu_267_p1;
wire   [11:0] add_ln112_fu_271_p2;
wire   [11:0] add_ln113_fu_281_p2;
wire   [15:0] input1_low_fu_320_p1;
wire   [15:0] input1_high_fu_332_p4;
wire   [15:0] input2_low_fu_324_p1;
wire   [15:0] input2_high_fu_350_p4;
wire   [15:0] temp1_fu_364_p0;
wire   [31:0] zext_ln19_fu_346_p1;
wire   [15:0] temp1_fu_364_p1;
wire   [31:0] zext_ln17_fu_328_p1;
wire   [15:0] temp2_fu_370_p0;
wire   [31:0] zext_ln20_fu_360_p1;
wire   [15:0] temp2_fu_370_p1;
wire   [15:0] temp4_fu_376_p0;
wire   [15:0] temp4_fu_376_p1;
wire   [31:0] zext_ln18_fu_342_p1;
wire   [31:0] temp4_fu_376_p2;
wire   [31:0] temp1_fu_364_p2;
wire   [31:0] temp2_fu_370_p2;
wire   [32:0] grp_fu_761_p3;
wire   [48:0] sum2_fu_394_p3;
wire   [63:0] zext_ln28_fu_401_p1;
wire   [63:0] sum1_fu_382_p3;
wire   [63:0] res_mult_fu_405_p2;
wire   [15:0] input1_low_5_fu_411_p4;
wire   [15:0] input1_high_3_fu_425_p4;
wire  signed [15:0] sext_ln20_fu_439_p1;
wire   [15:0] temp1_5_fu_446_p0;
wire   [31:0] zext_ln17_8_fu_421_p1;
wire   [15:0] temp1_5_fu_446_p1;
wire   [15:0] temp2_5_fu_451_p0;
wire   [15:0] temp2_5_fu_451_p1;
wire   [31:0] zext_ln20_5_fu_442_p1;
wire   [15:0] temp3_5_fu_457_p0;
wire   [31:0] zext_ln18_4_fu_435_p1;
wire   [15:0] temp3_5_fu_457_p1;
wire   [15:0] temp4_5_fu_462_p0;
wire   [15:0] temp4_5_fu_462_p1;
wire   [31:0] temp4_5_fu_462_p2;
wire   [31:0] temp1_5_fu_446_p2;
wire   [31:0] temp2_5_fu_451_p2;
wire   [31:0] temp3_5_fu_457_p2;
wire   [32:0] zext_ln30_12_fu_480_p1;
wire   [32:0] zext_ln30_13_fu_484_p1;
wire   [32:0] add_ln30_5_fu_494_p2;
wire   [48:0] sum2_5_fu_500_p3;
wire   [15:0] trunc_ln29_fu_468_p1;
wire   [31:0] add_ln30_7_fu_488_p2;
wire   [63:0] zext_ln28_8_fu_508_p1;
wire   [63:0] sum1_5_fu_472_p3;
wire   [47:0] trunc_ln_fu_520_p3;
wire   [47:0] tmp_fu_512_p3;
wire   [47:0] add_ln74_fu_534_p2;
wire   [15:0] res_mult_shift_part_fu_540_p4;
wire   [14:0] input2_high_6_fu_558_p4;
wire   [15:0] temp1_6_fu_571_p0;
wire   [15:0] temp1_6_fu_571_p1;
wire   [63:0] res_mult_shift_fu_528_p2;
wire   [15:0] trunc_ln1_fu_576_p4;
wire   [15:0] temp3_6_fu_594_p0;
wire   [15:0] temp3_6_fu_594_p1;
wire   [14:0] temp4_6_fu_599_p0;
wire   [30:0] zext_ln20_6_fu_567_p1;
wire   [15:0] temp4_6_fu_599_p1;
wire   [30:0] temp4_6_fu_599_p2;
wire   [31:0] temp1_6_fu_571_p2;
wire   [62:0] sum1_6_fu_605_p3;
wire   [31:0] temp3_6_fu_594_p2;
wire   [32:0] grp_fu_770_p3;
wire   [48:0] sum2_6_fu_621_p3;
wire   [63:0] zext_ln28_9_fu_613_p1;
wire   [63:0] res_shift_fu_632_p2;
wire   [63:0] zext_ln28_10_fu_628_p1;
wire   [63:0] sub_ln85_fu_638_p2;
wire   [31:0] shl_ln_fu_649_p3;
wire   [63:0] zext_ln90_fu_656_p1;
wire   [63:0] sub_ln89_fu_644_p2;
wire   [63:0] sub_ln90_fu_660_p2;
wire   [0:0] tmp_6_fu_674_p3;
wire   [31:0] trunc_ln92_5_fu_686_p1;
wire   [31:0] trunc_ln92_6_fu_690_p1;
wire   [0:0] tmp_5_fu_666_p3;
wire   [31:0] trunc_ln92_fu_682_p1;
wire   [31:0] select_ln92_fu_694_p3;
wire   [31:0] add_ln40_fu_710_p2;
wire   [0:0] icmp_ln43_fu_716_p2;
wire   [31:0] sub_ln44_fu_721_p2;
wire   [31:0] sub_ln53_fu_735_p2;
wire   [0:0] tmp_7_fu_739_p3;
wire   [31:0] add_ln56_fu_747_p2;
wire   [15:0] grp_fu_761_p0;
wire   [15:0] grp_fu_761_p1;
wire   [31:0] grp_fu_761_p2;
wire   [15:0] grp_fu_770_p0;
wire   [14:0] grp_fu_770_p1;
wire   [31:0] grp_fu_770_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [32:0] grp_fu_761_p20;
wire   [30:0] grp_fu_770_p00;
wire   [32:0] grp_fu_770_p20;
wire   [31:0] temp1_6_fu_571_p00;
wire   [31:0] temp3_6_fu_594_p10;
wire   [30:0] temp4_6_fu_599_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U71(
    .din0(temp1_fu_364_p0),
    .din1(temp1_fu_364_p1),
    .dout(temp1_fu_364_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U72(
    .din0(temp2_fu_370_p0),
    .din1(temp2_fu_370_p1),
    .dout(temp2_fu_370_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U73(
    .din0(temp4_fu_376_p0),
    .din1(temp4_fu_376_p1),
    .dout(temp4_fu_376_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U74(
    .din0(temp1_5_fu_446_p0),
    .din1(temp1_5_fu_446_p1),
    .dout(temp1_5_fu_446_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U75(
    .din0(temp2_5_fu_451_p0),
    .din1(temp2_5_fu_451_p1),
    .dout(temp2_5_fu_451_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U76(
    .din0(temp3_5_fu_457_p0),
    .din1(temp3_5_fu_457_p1),
    .dout(temp3_5_fu_457_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U77(
    .din0(temp4_5_fu_462_p0),
    .din1(temp4_5_fu_462_p1),
    .dout(temp4_5_fu_462_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U78(
    .din0(temp1_6_fu_571_p0),
    .din1(temp1_6_fu_571_p1),
    .dout(temp1_6_fu_571_p2)
);

Crypto_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16ns_16ns_32_1_1_U79(
    .din0(temp3_6_fu_594_p0),
    .din1(temp3_6_fu_594_p1),
    .dout(temp3_6_fu_594_p2)
);

Crypto_mul_15ns_16ns_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
mul_15ns_16ns_31_1_1_U80(
    .din0(temp4_6_fu_599_p0),
    .din1(temp4_6_fu_599_p1),
    .dout(temp4_6_fu_599_p2)
);

Crypto_mac_muladd_16ns_16ns_32ns_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 33 ))
mac_muladd_16ns_16ns_32ns_33_1_1_U81(
    .din0(grp_fu_761_p0),
    .din1(grp_fu_761_p1),
    .din2(grp_fu_761_p2),
    .dout(grp_fu_761_p3)
);

Crypto_mac_muladd_16ns_15ns_32ns_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 33 ))
mac_muladd_16ns_15ns_32ns_33_1_1_U82(
    .din0(grp_fu_770_p0),
    .din1(grp_fu_770_p1),
    .din2(grp_fu_770_p2),
    .dout(grp_fu_770_p3)
);

Crypto_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        j_fu_118 <= 31'd0;
    end else if (((icmp_ln110_fu_253_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        j_fu_118 <= add_ln110_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        phi_mul_fu_114 <= 13'd0;
    end else if (((icmp_ln110_fu_253_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        phi_mul_fu_114 <= add_ln114_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_253_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input2_high_5_reg_866 <= {{m[19:16]}};
        res_1_reg_856 <= zext_ln113_fu_286_p1;
        res_reg_851 <= zext_ln112_fu_276_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        u_reg_871 <= DataTemp_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        v_reg_876 <= v_fu_702_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln19_5_cast_reg_842[15 : 0] <= zext_ln19_5_cast_fu_232_p1[15 : 0];
        zext_ln19_6_cast_reg_836[15 : 0] <= zext_ln19_6_cast_fu_228_p1[15 : 0];
        zext_ln64_cast_reg_824[30 : 0] <= zext_ln64_cast_fu_220_p1[30 : 0];
        zext_ln89_cast_reg_831[30 : 0] <= zext_ln89_cast_fu_224_p1[30 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataTemp_address0 = res_1_reg_856;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        DataTemp_address0 = zext_ln113_fu_286_p1;
    end else begin
        DataTemp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            DataTemp_address1 = res_reg_851;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            DataTemp_address1 = zext_ln112_fu_276_p1;
        end else begin
            DataTemp_address1 = 'bx;
        end
    end else begin
        DataTemp_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        DataTemp_ce0 = 1'b1;
    end else begin
        DataTemp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        DataTemp_ce1 = 1'b1;
    end else begin
        DataTemp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataTemp_we0 = 1'b1;
    end else begin
        DataTemp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        DataTemp_we1 = 1'b1;
    end else begin
        DataTemp_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln110_fu_253_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        twiddle_ram_ce0 = 1'b1;
    end else begin
        twiddle_ram_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DataTemp_d0 = ((tmp_7_fu_739_p3[0:0] == 1'b1) ? add_ln56_fu_747_p2 : sub_ln53_fu_735_p2);

assign DataTemp_d1 = ((icmp_ln43_fu_716_p2[0:0] == 1'b1) ? add_ln40_fu_710_p2 : sub_ln44_fu_721_p2);

assign add_ln110_fu_258_p2 = (j_fu_118 + 31'd1);

assign add_ln112_fu_271_p2 = (trunc_ln110_fu_267_p1 + trunc_ln108_2);

assign add_ln113_fu_281_p2 = (add_ln112_fu_271_p2 + trunc_ln108_1);

assign add_ln114_fu_291_p2 = (phi_mul_fu_114 + trunc_ln8);

assign add_ln30_5_fu_494_p2 = (zext_ln30_12_fu_480_p1 + zext_ln30_13_fu_484_p1);

assign add_ln30_7_fu_488_p2 = (temp2_5_fu_451_p2 + temp3_5_fu_457_p2);

assign add_ln40_fu_710_p2 = (DataTemp_q1 + v_fu_702_p3);

assign add_ln56_fu_747_p2 = (sub_ln53_fu_735_p2 + zext_ln64_cast_reg_824);

assign add_ln74_fu_534_p2 = (trunc_ln_fu_520_p3 + tmp_fu_512_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_761_p0 = zext_ln19_fu_346_p1;

assign grp_fu_761_p1 = zext_ln18_fu_342_p1;

assign grp_fu_761_p2 = grp_fu_761_p20;

assign grp_fu_761_p20 = temp2_fu_370_p2;

assign grp_fu_770_p0 = grp_fu_770_p00;

assign grp_fu_770_p00 = res_mult_shift_part_fu_540_p4;

assign grp_fu_770_p1 = zext_ln20_6_fu_567_p1;

assign grp_fu_770_p2 = grp_fu_770_p20;

assign grp_fu_770_p20 = temp3_6_fu_594_p2;

assign icmp_ln110_fu_253_p2 = (($signed(zext_ln110_fu_249_p1) < $signed(hf)) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_716_p2 = (($signed(add_ln40_fu_710_p2) < $signed(zext_ln64_cast_reg_824)) ? 1'b1 : 1'b0);

assign input1_high_3_fu_425_p4 = {{res_mult_fu_405_p2[61:46]}};

assign input1_high_fu_332_p4 = {{DataTemp_q0[31:16]}};

assign input1_low_5_fu_411_p4 = {{res_mult_fu_405_p2[45:30]}};

assign input1_low_fu_320_p1 = DataTemp_q0[15:0];

assign input2_high_6_fu_558_p4 = {{mod_r[30:16]}};

assign input2_high_fu_350_p4 = {{twiddle_ram_q0[31:16]}};

assign input2_low_fu_324_p1 = twiddle_ram_q0[15:0];

assign res_mult_fu_405_p2 = (zext_ln28_fu_401_p1 + sum1_fu_382_p3);

assign res_mult_shift_fu_528_p2 = (zext_ln28_8_fu_508_p1 + sum1_5_fu_472_p3);

assign res_mult_shift_part_fu_540_p4 = {{add_ln74_fu_534_p2[47:32]}};

assign res_shift_fu_632_p2 = (res_mult_fu_405_p2 - zext_ln28_9_fu_613_p1);

assign select_ln92_fu_694_p3 = ((tmp_6_fu_674_p3[0:0] == 1'b1) ? trunc_ln92_5_fu_686_p1 : trunc_ln92_6_fu_690_p1);

assign sext_ln20_fu_439_p1 = $signed(input2_high_5_reg_866);

assign shl_ln_fu_649_p3 = {{mod_r}, {1'd0}};

assign sub_ln44_fu_721_p2 = (add_ln40_fu_710_p2 - zext_ln64_cast_reg_824);

assign sub_ln53_fu_735_p2 = (u_reg_871 - v_reg_876);

assign sub_ln85_fu_638_p2 = (res_shift_fu_632_p2 - zext_ln28_10_fu_628_p1);

assign sub_ln89_fu_644_p2 = (sub_ln85_fu_638_p2 - zext_ln89_cast_reg_831);

assign sub_ln90_fu_660_p2 = (sub_ln85_fu_638_p2 - zext_ln90_fu_656_p1);

assign sum1_5_fu_472_p3 = {{temp4_5_fu_462_p2}, {temp1_5_fu_446_p2}};

assign sum1_6_fu_605_p3 = {{temp4_6_fu_599_p2}, {temp1_6_fu_571_p2}};

assign sum1_fu_382_p3 = {{temp4_fu_376_p2}, {temp1_fu_364_p2}};

assign sum2_5_fu_500_p3 = {{add_ln30_5_fu_494_p2}, {16'd0}};

assign sum2_6_fu_621_p3 = {{grp_fu_770_p3}, {16'd0}};

assign sum2_fu_394_p3 = {{grp_fu_761_p3}, {16'd0}};

assign temp1_5_fu_446_p0 = zext_ln17_8_fu_421_p1;

assign temp1_5_fu_446_p1 = zext_ln19_5_cast_reg_842;

assign temp1_6_fu_571_p0 = temp1_6_fu_571_p00;

assign temp1_6_fu_571_p00 = res_mult_shift_part_fu_540_p4;

assign temp1_6_fu_571_p1 = zext_ln19_6_cast_reg_836;

assign temp1_fu_364_p0 = zext_ln19_fu_346_p1;

assign temp1_fu_364_p1 = zext_ln17_fu_328_p1;

assign temp2_5_fu_451_p0 = zext_ln17_8_fu_421_p1;

assign temp2_5_fu_451_p1 = zext_ln20_5_fu_442_p1;

assign temp2_fu_370_p0 = zext_ln20_fu_360_p1;

assign temp2_fu_370_p1 = zext_ln17_fu_328_p1;

assign temp3_5_fu_457_p0 = zext_ln18_4_fu_435_p1;

assign temp3_5_fu_457_p1 = zext_ln19_5_cast_reg_842;

assign temp3_6_fu_594_p0 = zext_ln19_6_cast_reg_836;

assign temp3_6_fu_594_p1 = temp3_6_fu_594_p10;

assign temp3_6_fu_594_p10 = trunc_ln1_fu_576_p4;

assign temp4_5_fu_462_p0 = zext_ln18_4_fu_435_p1;

assign temp4_5_fu_462_p1 = zext_ln20_5_fu_442_p1;

assign temp4_6_fu_599_p0 = zext_ln20_6_fu_567_p1;

assign temp4_6_fu_599_p1 = temp4_6_fu_599_p10;

assign temp4_6_fu_599_p10 = trunc_ln1_fu_576_p4;

assign temp4_fu_376_p0 = zext_ln20_fu_360_p1;

assign temp4_fu_376_p1 = zext_ln18_fu_342_p1;

assign tmp_5_fu_666_p3 = sub_ln89_fu_644_p2[32'd63];

assign tmp_6_fu_674_p3 = sub_ln90_fu_660_p2[32'd63];

assign tmp_7_fu_739_p3 = sub_ln53_fu_735_p2[32'd31];

assign tmp_fu_512_p3 = {{trunc_ln29_fu_468_p1}, {temp1_5_fu_446_p2}};

assign trunc_ln110_fu_267_p1 = j_fu_118[11:0];

assign trunc_ln1_fu_576_p4 = {{res_mult_shift_fu_528_p2[63:48]}};

assign trunc_ln29_fu_468_p1 = temp4_5_fu_462_p2[15:0];

assign trunc_ln92_5_fu_686_p1 = sub_ln89_fu_644_p2[31:0];

assign trunc_ln92_6_fu_690_p1 = sub_ln90_fu_660_p2[31:0];

assign trunc_ln92_fu_682_p1 = sub_ln85_fu_638_p2[31:0];

assign trunc_ln_fu_520_p3 = {{add_ln30_7_fu_488_p2}, {16'd0}};

assign twiddle_ram_address0 = zext_ln114_fu_296_p1;

assign v_fu_702_p3 = ((tmp_5_fu_666_p3[0:0] == 1'b1) ? trunc_ln92_fu_682_p1 : select_ln92_fu_694_p3);

assign zext_ln110_fu_249_p1 = j_fu_118;

assign zext_ln112_fu_276_p1 = add_ln112_fu_271_p2;

assign zext_ln113_fu_286_p1 = add_ln113_fu_281_p2;

assign zext_ln114_fu_296_p1 = phi_mul_fu_114;

assign zext_ln17_8_fu_421_p1 = input1_low_5_fu_411_p4;

assign zext_ln17_fu_328_p1 = input1_low_fu_320_p1;

assign zext_ln18_4_fu_435_p1 = input1_high_3_fu_425_p4;

assign zext_ln18_fu_342_p1 = input1_high_fu_332_p4;

assign zext_ln19_5_cast_fu_232_p1 = zext_ln19_5;

assign zext_ln19_6_cast_fu_228_p1 = zext_ln19_6;

assign zext_ln19_fu_346_p1 = input2_low_fu_324_p1;

assign zext_ln20_5_fu_442_p1 = $unsigned(sext_ln20_fu_439_p1);

assign zext_ln20_6_fu_567_p1 = input2_high_6_fu_558_p4;

assign zext_ln20_fu_360_p1 = input2_high_fu_350_p4;

assign zext_ln28_10_fu_628_p1 = sum2_6_fu_621_p3;

assign zext_ln28_8_fu_508_p1 = sum2_5_fu_500_p3;

assign zext_ln28_9_fu_613_p1 = sum1_6_fu_605_p3;

assign zext_ln28_fu_401_p1 = sum2_fu_394_p3;

assign zext_ln30_12_fu_480_p1 = temp2_5_fu_451_p2;

assign zext_ln30_13_fu_484_p1 = temp3_5_fu_457_p2;

assign zext_ln64_cast_fu_220_p1 = zext_ln64;

assign zext_ln89_cast_fu_224_p1 = zext_ln89;

assign zext_ln90_fu_656_p1 = shl_ln_fu_649_p3;

always @ (posedge ap_clk) begin
    zext_ln64_cast_reg_824[31] <= 1'b0;
    zext_ln89_cast_reg_831[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln19_6_cast_reg_836[31:16] <= 16'b0000000000000000;
    zext_ln19_5_cast_reg_842[31:16] <= 16'b0000000000000000;
end

endmodule //Crypto_Crypto_Pipeline_NTT_PE_LOOP
